{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAoB;AAC7B;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACG;AAGP,OAAO;AACP,OAAO;AACP,OAAO;AACP,SAAS,eAAe;AACxB,SAAS,0BAA0B;AAGnC,QAAQ,2BAA2B,iBAAiB;AAEpD,aAAa,CAAC,QAAQ,eAAe;AAnBrC;AAqBI,QAAM,YAAY,WAAW;AAG7B,QAAM,0BAAyB,4CAAW,2BAAX,YAAqC;AAAA,IAChE;AAAA,IACA;AAAA,EACJ;AAGA,QAAM,4BAA2B,4CAAW,6BAAX,YAAuC,CAAC,8BAA8B;AAKvG,QAAM,gBAAgB,uBAAuB,GAAG,sBAAsB;AACtE,QAAM,kBAAkB,yBAAyB,GAAG,wBAAwB;AAO5E,QAAM,EAAE,SAAS,IAAI,cAAc,gBAAgB,UAAU,CAAC;AAI9D,MAAI,YAAY,MAAM;AAClB,WAAO,OAAO,QAAQ,EAAE,SAAS,CAAC;AAAA,EACtC;AAWA,MAAI,QAAQ,IAAI,iCAAiC;AAC7C,UAAM,SAAS,mBAAmB,YAAY;AAE9C,WAAO,KAAK,EAAE;AACd,WAAO,KAAK,6CAA6C;AACzD,WAAO,KAAK,4CAA4C;AACxD,WAAO,KAAK,EAAE;AACd,WAAO,KAAK,mCAAmC;AAC/C,WAAO,KAAK,mCAAmC;AAC/C,WAAO,KAAK,mCAAmC;AAC/C,WAAO,KAAK,EAAE;AACd,WAAO,KAAK,oDAAoD;AAChE,WAAO,KAAK,EAAE;AAEd,UAAM,mBAAmB,yBAAwB,kDAAW,iBAAX,mBAAyB,eAAzB,YAAuC,CAAC,GAAG,MAAM;AAClG,UAAM,WAAW,2BAA2B,kBAAkB,OAAO,QAAQ;AAE7E,WAAO,OAAO,QAAQ,EAAE,UAAU,EAAE,GAAG,OAAO,UAAU,GAAG,SAAS,EAAE,CAAC;AAEvE,WAAO,KAAK,8CAA8C;AAC1D,WAAO,KAAK,EAAE;AAEd,WAAO,QAAQ,OAAO,QAAQ,EAAE,QAAQ,CAAC,CAAC,aAAa,aAAa,MAAM;AACtE,UAAI,SAAS,eAAe;AACxB,eAAO,KAAK,WAAW,WAAW,OAAO,cAAc,GAAG,EAAE;AAAA,MAChE;AAAA,IACJ,CAAC;AAED,WAAO,KAAK,EAAE;AAAA,EAClB;AACJ,CAAC","sourcesContent":["import { extendConfig } from 'hardhat/config'\nimport {\n    createErrorParser,\n    getHardhatNetworkOverrides,\n    resolveSimulationConfig,\n    withLayerZeroArtifacts,\n    withLayerZeroDeployments,\n} from '@layerzerolabs/devtools-evm-hardhat'\n\n// Here we extend the HardhatUserConfig types & import all the LayerZero tasks\nimport '@layerzerolabs/devtools-evm-hardhat/type-extensions'\nimport '@layerzerolabs/devtools-evm-hardhat/tasks'\nimport '@layerzerolabs/ua-devtools-evm-hardhat/tasks'\nimport { OmniSDK } from '@layerzerolabs/devtools-evm'\nimport { createModuleLogger } from '@layerzerolabs/io-devtools'\n\n// Register a hardhat-specific error parser factory on the OmniSDK\nOmniSDK.registerErrorParserFactory(createErrorParser)\n\nextendConfig((config, userConfig) => {\n    // First we get the LayerZero config\n    const layerZero = userConfig.layerZero\n\n    // Now we check the config for packages from which to import artifacts\n    const artifactSourcePackages = layerZero?.artifactSourcePackages ?? [\n        '@layerzerolabs/lz-evm-sdk-v2',\n        '@layerzerolabs/test-devtools-evm-hardhat',\n    ]\n\n    // And we check the config for packages from which to import deployments as well\n    const deploymentSourcePackages = layerZero?.deploymentSourcePackages ?? ['@layerzerolabs/lz-evm-sdk-v2']\n\n    // Here we create our two config extenders, two curried functions\n    // that accept hardhat user config and return a hardhat user config with external\n    // artifacts and deployments configured\n    const withArtifacts = withLayerZeroArtifacts(...artifactSourcePackages)\n    const withDeployments = withLayerZeroDeployments(...deploymentSourcePackages)\n\n    // To stay on the safe side we'll only use the external configuration\n    // of the extended config and we won't even import the type extensions from hardhat-deploy\n    // just in case the import path changes in one of the versions\n    //\n    // As a result we'll need to type the result of our function call as { external: unknown }\n    const { external } = withArtifacts(withDeployments(userConfig)) as { external: unknown }\n\n    // To remain on the safe side we are staying on we'll only extend the config\n    // if we got any external deployments\n    if (external != null) {\n        Object.assign(config, { external })\n    }\n\n    // !!!!!!!!!!!!!!!!!!!!! EXPERIMENTAL !!!!!!!!!!!!!!!!!!!!!\n    //\n    // If the LZ_EXPERIMENTAL_WITH_SIMULATION environment variable is set, we'll apply\n    // the simulation settings\n    //\n    // This feature is still in developer preview and requires familiarity with the code\n    // and knowledge of the requirements & developer flow\n    //\n    // !!!!!!!!!!!!!!!!!!!!! EXPERIMENTAL !!!!!!!!!!!!!!!!!!!!!\n    if (process.env.LZ_EXPERIMENTAL_WITH_SIMULATION) {\n        const logger = createModuleLogger('simulation')\n\n        logger.warn('')\n        logger.warn(`The experimental simulation mode is enabled`)\n        logger.warn(`This feature is still in developer preview`)\n        logger.warn('')\n        logger.warn(`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`)\n        logger.warn(`!!! ONLY USE AT YOUR OWN RISK !!!`)\n        logger.warn(`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`)\n        logger.warn('')\n        logger.warn(`The networks in your hardhat config will be forked`)\n        logger.warn('')\n\n        const simulationConfig = resolveSimulationConfig(layerZero?.experimental?.simulation ?? {}, config)\n        const networks = getHardhatNetworkOverrides(simulationConfig, config.networks)\n\n        Object.assign(config, { networks: { ...config.networks, ...networks } })\n\n        logger.warn(`The new network configuration is as follows:`)\n        logger.warn('')\n\n        Object.entries(config.networks).forEach(([networkName, networkConfig]) => {\n            if ('url' in networkConfig) {\n                logger.warn(`Network ${networkName} -> ${networkConfig.url}`)\n            }\n        })\n\n        logger.warn('')\n    }\n})\n"]}