'use strict';

var config = require('hardhat/config');
var devtoolsEvmHardhat = require('@layerzerolabs/devtools-evm-hardhat');
require('@layerzerolabs/devtools-evm-hardhat/type-extensions');
require('@layerzerolabs/devtools-evm-hardhat/tasks');
require('@layerzerolabs/ua-devtools-evm-hardhat/tasks');
var devtoolsEvm = require('@layerzerolabs/devtools-evm');
var ioDevtools = require('@layerzerolabs/io-devtools');

// src/index.ts
devtoolsEvm.OmniSDK.registerErrorParserFactory(devtoolsEvmHardhat.createErrorParser);
config.extendConfig((config, userConfig) => {
  var _a, _b, _c, _d;
  const layerZero = userConfig.layerZero;
  const artifactSourcePackages = (_a = layerZero == null ? void 0 : layerZero.artifactSourcePackages) != null ? _a : [
    "@layerzerolabs/lz-evm-sdk-v2",
    "@layerzerolabs/test-devtools-evm-hardhat"
  ];
  const deploymentSourcePackages = (_b = layerZero == null ? void 0 : layerZero.deploymentSourcePackages) != null ? _b : ["@layerzerolabs/lz-evm-sdk-v2"];
  const withArtifacts = devtoolsEvmHardhat.withLayerZeroArtifacts(...artifactSourcePackages);
  const withDeployments = devtoolsEvmHardhat.withLayerZeroDeployments(...deploymentSourcePackages);
  const { external } = withArtifacts(withDeployments(userConfig));
  if (external != null) {
    Object.assign(config, { external });
  }
  if (process.env.LZ_EXPERIMENTAL_WITH_SIMULATION) {
    const logger = ioDevtools.createModuleLogger("simulation");
    logger.warn("");
    logger.warn(`The experimental simulation mode is enabled`);
    logger.warn(`This feature is still in developer preview`);
    logger.warn("");
    logger.warn(`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`);
    logger.warn(`!!! ONLY USE AT YOUR OWN RISK !!!`);
    logger.warn(`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`);
    logger.warn("");
    logger.warn(`The networks in your hardhat config will be forked`);
    logger.warn("");
    const simulationConfig = devtoolsEvmHardhat.resolveSimulationConfig((_d = (_c = layerZero == null ? void 0 : layerZero.experimental) == null ? void 0 : _c.simulation) != null ? _d : {}, config);
    const networks = devtoolsEvmHardhat.getHardhatNetworkOverrides(simulationConfig, config.networks);
    Object.assign(config, { networks: { ...config.networks, ...networks } });
    logger.warn(`The new network configuration is as follows:`);
    logger.warn("");
    Object.entries(config.networks).forEach(([networkName, networkConfig]) => {
      if ("url" in networkConfig) {
        logger.warn(`Network ${networkName} -> ${networkConfig.url}`);
      }
    });
    logger.warn("");
  }
});
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map