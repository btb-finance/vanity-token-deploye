export { ap as AddressCast, aq as AddressCast__factory, cZ as AddressSizeConfig, c_ as AddressSizeConfig__factory, bR as ArbitrumDVNAdapterL1, bS as ArbitrumDVNAdapterL1__factory, bT as ArbitrumDVNAdapterL2, bU as ArbitrumDVNAdapterL2__factory, bV as AxelarDVNAdapter, bZ as AxelarDVNAdapterFeeLib, b_ as AxelarDVNAdapterFeeLib__factory, bW as AxelarDVNAdapter__factory, aB as BlockedMessageLib, aC as BlockedMessageLib__factory, b$ as CCIPDVNAdapter, c1 as CCIPDVNAdapterFeeLib, c2 as CCIPDVNAdapterFeeLib__factory, c0 as CCIPDVNAdapter__factory, aK as CmdCodecV1Mock, aL as CmdCodecV1Mock__factory, C as ComposeSentEvent, cf as DVN, c3 as DVNAdapterBase, c4 as DVNAdapterBase__factory, c7 as DVNAdapterMessageCodec, c8 as DVNAdapterMessageCodec__factory, B as DVNDecompressor, F as DVNDecompressor__factory, ch as DVNFeeLib, ci as DVNFeeLib__factory, cF as DVNOptions, cG as DVNOptions__factory, cg as DVN__factory, cd as DeadDVN, ce as DeadDVN__factory, D as DecompressorExtension, A as DecompressorExtension__factory, E as EndpointV2, p as EndpointV2Alt, J as EndpointV2Alt__factory, q as EndpointV2View, r as EndpointV2ViewUpgradeable, L as EndpointV2ViewUpgradeable__factory, K as EndpointV2View__factory, I as EndpointV2__factory, ar as Errors, as as Errors__factory, ax as EssenceDVNWrapper, ay as EssenceDVNWrapper__factory, N as Executor, G as ExecutorDecompressor, H as ExecutorDecompressor__factory, s as ExecutorFeeLib, V as ExecutorFeeLib__factory, at as ExecutorOptions, au as ExecutorOptions__factory, O as Executor__factory, dL as GetARGsTypeFromFactory, dK as GetContractTypeFromFactory, cn as IAxelarDVNAdapter, cp as IAxelarDVNAdapterFeeLib, cq as IAxelarDVNAdapterFeeLib__factory, co as IAxelarDVNAdapter__factory, cr as ICCIPDVNAdapter, ct as ICCIPDVNAdapterFeeLib, cu as ICCIPDVNAdapterFeeLib__factory, cs as ICCIPDVNAdapter__factory, cv as IDVN, cx as IDVNFeeLib, cy as IDVNFeeLib__factory, cw as IDVN__factory, X as IExecutor, Z as IExecutorFeeLib, _ as IExecutorFeeLib__factory, Y as IExecutor__factory, $ as ILayerZeroComposer, a0 as ILayerZeroComposer__factory, cz as ILayerZeroDVN, cA as ILayerZeroDVN__factory, Q as ILayerZeroEndpointV2, U as ILayerZeroEndpointV2__factory, a1 as ILayerZeroExecutor, a2 as ILayerZeroExecutor__factory, a3 as ILayerZeroPriceFeed, a4 as ILayerZeroPriceFeed__factory, cB as ILayerZeroReadDVN, cC as ILayerZeroReadDVN__factory, a5 as ILayerZeroReadExecutor, a6 as ILayerZeroReadExecutor__factory, d9 as ILayerZeroReceiveLibrary, da as ILayerZeroReceiveLibrary__factory, a7 as ILayerZeroReceiver, a8 as ILayerZeroReceiver__factory, a9 as ILayerZeroTreasury, aa as ILayerZeroTreasury__factory, ab as IMessageLib, c$ as IMessageLibE1, d0 as IMessageLibE1__factory, ad as IMessageLibManager, ae as IMessageLibManager__factory, ac as IMessageLib__factory, af as IMessagingChannel, ag as IMessagingChannel__factory, ah as IMessagingComposer, ai as IMessagingComposer__factory, aj as IMessagingContext, ak as IMessagingContext__factory, d1 as INonceContract, d2 as INonceContract__factory, aU as IOAppComposer, aV as IOAppComposer__factory, aW as IOAppComputer, aY as IOAppComputerMap, aZ as IOAppComputerMap__factory, a_ as IOAppComputerReduce, a$ as IOAppComputerReduce__factory, aX as IOAppComputer__factory, b0 as IOAppCore, b1 as IOAppCore__factory, b2 as IOAppMsgInspector, b3 as IOAppMsgInspector__factory, b4 as IOAppOptionsType3, b5 as IOAppOptionsType3__factory, bA as IOAppPreCrimeSimulator, bB as IOAppPreCrimeSimulator__factory, b6 as IOAppReceiver, b7 as IOAppReceiver__factory, bq as IOFT, br as IOFT__factory, bC as IPreCrime, bD as IPreCrime__factory, c5 as IReceiveUln, df as IReceiveUln301, dg as IReceiveUln301__factory, ds as IReceiveUln302, dt as IReceiveUln302__factory, cD as IReceiveUlnE2, cE as IReceiveUlnE2__factory, cL as IReceiveUlnView, cM as IReceiveUlnView__factory, c6 as IReceiveUln__factory, al as ISendLib, bX as ISendLibBase, bY as ISendLibBase__factory, am as ISendLib__factory, d3 as ITreasuryFeeHandler, d4 as ITreasuryFeeHandler__factory, d5 as IUltraLightNode301, d6 as IUltraLightNode301__factory, an as IWorker, ao as IWorker__factory, cN as LzExecutor, cO as LzExecutor__factory, aM as LzReadCounter, aN as LzReadCounter__factory, M as MessageLibBase, aF as MessageLibBase__factory, t as MessageLibManager, aG as MessageLibManager__factory, u as MessagingChannel, aH as MessagingChannel__factory, v as MessagingComposer, aI as MessagingComposer__factory, w as MessagingContext, aJ as MessagingContext__factory, dJ as MinEthersFactory, az as MultiCall, aA as MultiCall__factory, cj as MultiSig, ck as MultiSig__factory, d7 as NonceContractMock, d8 as NonceContractMock__factory, be as OApp, bg as OAppCore, bh as OAppCore__factory, b8 as OAppOptionsType3, b9 as OAppOptionsType3__factory, bE as OAppPreCrimeSimulator, bF as OAppPreCrimeSimulator__factory, bi as OAppRead, bj as OAppRead__factory, bk as OAppReceiver, bl as OAppReceiver__factory, bm as OAppSender, bn as OAppSender__factory, bf as OApp__factory, bs as OFT, bu as OFTAdapter, bv as OFTAdapter__factory, bw as OFTCore, bx as OFTCore__factory, bt as OFT__factory, aO as OmniCounter, aQ as OmniCounterAbstract, aR as OmniCounterAbstract__factory, aS as OmniCounterPreCrime, aT as OmniCounterPreCrime__factory, aP as OmniCounter__factory, dI as OnEvent, c9 as OptimismDVNAdapterL1, ca as OptimismDVNAdapterL1__factory, cb as OptimismDVNAdapterL2, cc as OptimismDVNAdapterL2__factory, ba as OptionsBuilder, bb as OptionsBuilder__factory, P as PacketSentEvent, b as PacketSentEvent301, a as PacketVerifiedEvent, bG as PreCrime, by as PreCrimeE1, bz as PreCrimeE1__factory, bH as PreCrime__factory, x as PriceFeed, bI as PriceFeed__factory, dM as PromiseOrValue, dA as ProxyAdmin, dB as ProxyAdmin__factory, bo as RateLimiter, bp as RateLimiter__factory, bc as ReadCmdCodecV1, bd as ReadCmdCodecV1__factory, cP as ReadLib1002, cR as ReadLib1002View, cS as ReadLib1002View__factory, cQ as ReadLib1002__factory, cT as ReadLibBase, cU as ReadLibBase__factory, db as ReceiveLibBaseE1, dc as ReceiveLibBaseE1__factory, R as ReceiveLibBaseE2, bL as ReceiveLibBaseE2__factory, dd as ReceiveUln301, dh as ReceiveUln301View, di as ReceiveUln301View__factory, de as ReceiveUln301__factory, dq as ReceiveUln302, du as ReceiveUln302View, dv as ReceiveUln302View__factory, dr as ReceiveUln302__factory, cV as ReceiveUlnBase, cW as ReceiveUlnBase__factory, S as SendLibBase, dj as SendLibBaseE1, dk as SendLibBaseE1__factory, y as SendLibBaseE2, bN as SendLibBaseE2__factory, bM as SendLibBase__factory, dl as SendUln301, dm as SendUln301__factory, dw as SendUln302, dx as SendUln302__factory, cX as SendUlnBase, cY as SendUlnBase__factory, aD as SimpleMessageLib, aE as SimpleMessageLib__factory, cl as SimpleReadDVN, cm as SimpleReadDVN__factory, bO as SimpleReadExecutor, bP as SimpleReadExecutor__factory, cH as SupportedCmdTypesLib, cI as SupportedCmdTypesLib__factory, av as Transfer, aw as Transfer__factory, bJ as TransparentUpgradeableProxy, bK as TransparentUpgradeableProxy__factory, T as Treasury, dn as TreasuryFeeHandler, dp as TreasuryFeeHandler__factory, bQ as Treasury__factory, dF as TypedEvent, dG as TypedEventFilter, dH as TypedListener, dy as UlnBase, dz as UlnBase__factory, cJ as UlnOptions, cK as UlnOptions__factory, W as Worker, dC as WorkerUpgradeable, dD as WorkerUpgradeable__factory, dE as Worker__factory, d as decompressor, i as executorSol, z as factories, e as interfaces, f as libs, g as lowlat, h as messagelib, j as oapp, k as oft, l as precrime, m as proxy, c as simpleReadExecutorSol, n as uln, o as upgradeable } from './index-DNs3w6_6.mjs';
import 'ethers';
import '@ethersproject/providers';
import '@ethersproject/abi';

declare function getDeployedContractAddress(network: string, contractName: string): string;
declare function getDeploymentAddressAndAbi(network: string, contractName: string): {
    address: string;
    abi: any;
};

export { getDeployedContractAddress, getDeploymentAddressAndAbi };
