{"version":3,"sources":["../src/dvn/config.ts","../src/dvn/schema.ts","../src/endpointv2/config.ts","../src/endpointv2/schema.ts","../src/executor/config.ts","../src/executor/schema.ts","../src/priceFeed/config.ts","../src/priceFeed/schema.ts","../src/uln302/config.ts","../src/uln302/schema.ts","../src/uln302/types.ts","../src/ulnRead/config.ts","../src/ulnRead/schema.ts"],"names":["librariesByEndpoint","UIntBigIntSchema","z","flattenTransactions","isDeepEqual","config","AddressSchema","Uln302ConfigType","createModuleLogger","createWithAsyncLogger","printBoolean","createConfigureMultiple","createConfigureNodes","formatOmniPoint","UIntNumberSchema"],"mappings":"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","sourcesContent":["import { flattenTransactions, isDeepEqual, type OmniTransaction } from '@layerzerolabs/devtools'\nimport type { DVNConfigurator } from './types'\n\nexport const configureDVN: DVNConfigurator = async (graph, createSdk) =>\n    flattenTransactions([await configureDVNDstConfig(graph, createSdk)])\n\nexport const configureDVNDstConfig: DVNConfigurator = async (graph, createSdk) =>\n    flattenTransactions(\n        await Promise.all(\n            graph.connections.map(async ({ vector: { from, to }, config }): Promise<OmniTransaction[]> => {\n                const sdk = await createSdk(from)\n                const dstConfig = await sdk.getDstConfig(to.eid)\n\n                // TODO Normalize the config values using a schema before comparing them\n                if (isDeepEqual(dstConfig, config.dstConfig)) {\n                    return []\n                }\n\n                return [await sdk.setDstConfig(to.eid, config.dstConfig)]\n            })\n        )\n    )\n","import { z } from 'zod'\nimport type { DVNDstConfig } from './types'\nimport { UIntBigIntSchema } from '@layerzerolabs/devtools'\n\nexport const DVNDstConfigSchema = z.object({\n    gas: UIntBigIntSchema,\n    multiplierBps: UIntBigIntSchema,\n    floorMarginUSD: UIntBigIntSchema,\n}) satisfies z.ZodSchema<DVNDstConfig, z.ZodTypeDef, unknown>\n","import { createModuleLogger, createWithAsyncLogger, printBoolean } from '@layerzerolabs/io-devtools'\nimport {\n    type OmniTransaction,\n    OmniPointMap,\n    Bytes32,\n    createConfigureNodes,\n    formatOmniPoint,\n    createConfigureMultiple,\n    createConfigureEdges,\n    formatOmniVector,\n} from '@layerzerolabs/devtools'\nimport type { EndpointV2Configurator } from './types'\n\nconst createEndpointV2Logger = () => createModuleLogger('EndpointV2')\nconst withEndpointV2Logger = createWithAsyncLogger(createEndpointV2Logger)\n\nexport const configureEndpointV2RegisterLibraries: EndpointV2Configurator = withEndpointV2Logger(\n    createConfigureMultiple(\n        withEndpointV2Logger(\n            async (graph, createSdk): Promise<OmniTransaction[]> => {\n                const logger = createEndpointV2Logger()\n                const librariesByEndpoint = graph.connections.reduce(\n                    (librariesByEndpoint, { vector: { from }, config }) =>\n                        librariesByEndpoint.set(\n                            from,\n                            librariesByEndpoint\n                                .getOrElse(from, () => new Set<string>())\n                                .add(config.defaultReceiveLibrary)\n                                .add(config.defaultSendLibrary)\n                        ),\n                    new OmniPointMap<Set<Bytes32>>()\n                )\n\n                graph.contracts.forEach(({ point, config }) => {\n                    config?.readChannelConfigs?.forEach(({ defaultReadLibrary }) =>\n                        librariesByEndpoint.getOrElse(point, () => new Set<string>()).add(defaultReadLibrary)\n                    )\n                })\n\n                const omniTransactions: OmniTransaction[] = []\n\n                logger.verbose(`Checking libraries for registration`)\n\n                for (const [from, libraries] of librariesByEndpoint) {\n                    const sdk = await createSdk(from)\n                    const label = formatOmniPoint(from)\n\n                    for (const address of libraries) {\n                        const isRegistered = await sdk.isRegisteredLibrary(address)\n                        logger.verbose(`Checking library ${address} for registration on ${label}`)\n\n                        if (isRegistered) {\n                            logger.verbose(`Library ${address} is already registered on ${label}`)\n                            continue\n                        }\n\n                        logger.verbose(`Registering library ${address} on ${label}`)\n                        omniTransactions.push(await sdk.registerLibrary(address))\n                    }\n                }\n                return omniTransactions\n            },\n            {\n                onStart: (logger) => logger.verbose(`Checking register libraries configuration`),\n                onSuccess: (logger) => logger.verbose(`${printBoolean(true)} Checked register libraries configuration`),\n                onError: (logger, _graph, error) =>\n                    logger.error(`Failed to check register libraries configuration: ${error}`),\n            }\n        )\n    )\n)\n\nexport const configureEndpointV2DefaultReceiveLibraries: EndpointV2Configurator = withEndpointV2Logger(\n    createConfigureEdges(\n        withEndpointV2Logger(\n            async ({ vector: { from, to }, config }, sdk): Promise<OmniTransaction[]> => {\n                const logger = createEndpointV2Logger()\n                const label = formatOmniVector({ from, to })\n                const address = await sdk.getDefaultReceiveLibrary(to.eid)\n                logger.verbose(`Checking default receive library for ${label}`)\n\n                // If the library is already set as default, do nothing\n                if (config.defaultReceiveLibrary === address) {\n                    logger.verbose(`Default receive library is already set to ${address} for ${label}, skipping`)\n                    return []\n                }\n\n                logger.info(`Setting default receive library to ${config.defaultReceiveLibrary} for ${label}`)\n                return [\n                    await sdk.setDefaultReceiveLibrary(\n                        to.eid,\n                        config.defaultReceiveLibrary,\n                        config.defaultReceiveLibraryGracePeriod\n                    ),\n                ]\n            },\n            {\n                onStart: (logger, [{ vector }]) =>\n                    logger.verbose(`Checking default receive libraries for ${formatOmniVector(vector)}`),\n                onSuccess: (logger, [{ vector }]) =>\n                    logger.verbose(\n                        `${printBoolean(true)} Checked default receive libraries for ${formatOmniVector(vector)}`\n                    ),\n                onError: (logger, [{ vector }], error) =>\n                    logger.error(`Failed to check default receive libraries for ${formatOmniVector(vector)}: ${error}`),\n            }\n        )\n    )\n)\n\nexport const configureEndpointV2DefaultSendLibraries: EndpointV2Configurator = withEndpointV2Logger(\n    createConfigureEdges(\n        withEndpointV2Logger(\n            async ({ vector: { from, to }, config }, sdk): Promise<OmniTransaction[]> => {\n                const logger = createEndpointV2Logger()\n                const label = formatOmniVector({ from, to })\n                const address = await sdk.getDefaultSendLibrary(to.eid)\n                logger.verbose(`Checking default send library for ${label}`)\n\n                // If the library is already set as default, do nothing\n                if (config.defaultSendLibrary === address) {\n                    logger.verbose(`Default send library is already set to ${address} for ${label}, skipping`)\n                    return []\n                }\n\n                logger.info(`Setting default send library to ${config.defaultSendLibrary} for ${label}`)\n                return [await sdk.setDefaultSendLibrary(to.eid, config.defaultSendLibrary)]\n            },\n            {\n                onStart: (logger, [{ vector }]) =>\n                    logger.verbose(`Checking default send libraries for ${formatOmniVector(vector)}`),\n                onSuccess: (logger, [{ vector }]) =>\n                    logger.verbose(\n                        `${printBoolean(true)} Checked default send libraries for ${formatOmniVector(vector)}`\n                    ),\n                onError: (logger, [{ vector }], error) =>\n                    logger.error(`Failed to check default send libraries for ${formatOmniVector(vector)}: ${error}`),\n            }\n        )\n    )\n)\n\nexport const configureEndpointV2DefaultReadLibraries: EndpointV2Configurator = withEndpointV2Logger(\n    createConfigureNodes(\n        withEndpointV2Logger(\n            async ({ config, point }, sdk): Promise<OmniTransaction[]> => {\n                const logger = createEndpointV2Logger()\n                const label = formatOmniPoint(point)\n                const transactions: OmniTransaction[] = []\n\n                if (!config?.readChannelConfigs) {\n                    logger.verbose(`readChannelConfigs not defined for ${label}, skipping`)\n                    return []\n                }\n\n                logger.verbose(`Checking read channels ${label}`)\n\n                for (const { channelId, defaultReadLibrary } of config.readChannelConfigs) {\n                    const sendAddress = await sdk.getDefaultSendLibrary(channelId)\n                    logger.verbose(`Checking default send library for channel ${channelId} for ${label}`)\n\n                    // If the library is already set as default, do nothing\n                    if (defaultReadLibrary === sendAddress) {\n                        logger.verbose(\n                            `Default send library for channel ${channelId} is already set to ${defaultReadLibrary} for ${label}`\n                        )\n                        continue\n                    } else {\n                        logger.verbose(\n                            `Setting default send library for channel ${channelId} to ${defaultReadLibrary} for ${label}`\n                        )\n                        transactions.push(await sdk.setDefaultSendLibrary(channelId, defaultReadLibrary))\n                    }\n\n                    const receiveAddress = await sdk.getDefaultReceiveLibrary(channelId)\n                    logger.verbose(`Checking default receive library for channel ${channelId} for ${label}`)\n\n                    // If the library is already set as default, do nothing\n                    if (defaultReadLibrary === receiveAddress) {\n                        logger.verbose(\n                            `Default receive library for channel ${channelId} is already set to ${defaultReadLibrary} for ${label}`\n                        )\n                        continue\n                    } else {\n                        // TODO READ: Grace period should be configurable\n                        logger.verbose(\n                            `Setting default receive library for channel ${channelId} to ${defaultReadLibrary} for ${label}`\n                        )\n                        transactions.push(await sdk.setDefaultReceiveLibrary(channelId, defaultReadLibrary))\n                    }\n                }\n\n                return transactions\n            },\n            {\n                onStart: (logger, [{ point }]) =>\n                    logger.verbose(`Checking Endpoint default read libraries for ${formatOmniPoint(point)}`),\n                onSuccess: (logger, [{ point }]) =>\n                    logger.verbose(\n                        `${printBoolean(true)} Checked Endpoint default read libraries for ${formatOmniPoint(point)}`\n                    ),\n                onError: (logger, [{ point }], error) =>\n                    logger.error(\n                        `Failed to check Endpoint default read libraries for ${formatOmniPoint(point)}: ${error}`\n                    ),\n            }\n        )\n    )\n)\n\nexport const configureEndpointV2: EndpointV2Configurator = withEndpointV2Logger(\n    createConfigureMultiple(\n        configureEndpointV2RegisterLibraries,\n        configureEndpointV2DefaultReceiveLibraries,\n        configureEndpointV2DefaultSendLibraries,\n        configureEndpointV2DefaultReadLibraries\n    ),\n    {\n        onStart: (logger) => logger.info(`Checking EndpointV2 configuration`),\n        onSuccess: (logger) => logger.info(`${printBoolean(true)} Checked EndpointV2 configuration`),\n        onError: (logger, args, error) => logger.error(`Failed to check EndpointV2 configuration: ${error}`),\n    }\n)\n","import { AddressSchema, UIntBigIntSchema } from '@layerzerolabs/devtools'\nimport { z } from 'zod'\nimport { Timeout } from './types'\n\nexport const TimeoutSchema = z.object({\n    lib: AddressSchema,\n    expiry: UIntBigIntSchema,\n}) satisfies z.ZodSchema<Timeout, z.ZodTypeDef, unknown>\n","import { flattenTransactions, isDeepEqual, type OmniTransaction } from '@layerzerolabs/devtools'\nimport type { ExecutorConfigurator } from './types'\n\nexport const configureExecutor: ExecutorConfigurator = async (graph, createSdk) =>\n    flattenTransactions([await configureExecutorDstConfig(graph, createSdk)])\n\nexport const configureExecutorDstConfig: ExecutorConfigurator = async (graph, createSdk) =>\n    flattenTransactions(\n        await Promise.all(\n            graph.connections.map(async ({ vector: { from, to }, config }): Promise<OmniTransaction[]> => {\n                const sdk = await createSdk(from)\n                const dstConfig = await sdk.getDstConfig(to.eid)\n\n                // TODO Normalize the config values using a schema before comparing them\n                if (isDeepEqual(dstConfig, config.dstConfig)) {\n                    return []\n                }\n\n                return [await sdk.setDstConfig(to.eid, config.dstConfig)]\n            })\n        )\n    )\n","import { z } from 'zod'\nimport type { ExecutorDstConfig, ExecutorDstConfigPost2_1_27, ExecutorDstConfigPre2_1_27 } from './types'\nimport { UIntBigIntSchema } from '@layerzerolabs/devtools'\n\nexport const ExecutorDstConfigPre2_1_27Schema = z.object({\n    baseGas: UIntBigIntSchema,\n    multiplierBps: UIntBigIntSchema,\n    floorMarginUSD: UIntBigIntSchema,\n    nativeCap: UIntBigIntSchema,\n}) satisfies z.ZodSchema<ExecutorDstConfigPre2_1_27, z.ZodTypeDef, unknown>\n\nexport const ExecutorDstConfigPost2_1_27Schema = z.object({\n    lzComposeBaseGas: UIntBigIntSchema,\n    lzReceiveBaseGas: UIntBigIntSchema,\n    multiplierBps: UIntBigIntSchema,\n    floorMarginUSD: UIntBigIntSchema,\n    nativeCap: UIntBigIntSchema,\n}) satisfies z.ZodSchema<ExecutorDstConfigPost2_1_27, z.ZodTypeDef, unknown>\n\nexport const ExecutorDstConfigSchema = z.union([\n    ExecutorDstConfigPre2_1_27Schema,\n    ExecutorDstConfigPost2_1_27Schema,\n]) satisfies z.ZodSchema<ExecutorDstConfig, z.ZodTypeDef, unknown>\n","import { flattenTransactions, isDeepEqual, type OmniTransaction } from '@layerzerolabs/devtools'\nimport type { PriceFeedConfigurator } from './types'\n\nexport const configurePriceFeed: PriceFeedConfigurator = async (graph, createSdk) =>\n    flattenTransactions([await configurePriceFeedPriceData(graph, createSdk)])\n\nexport const configurePriceFeedPriceData: PriceFeedConfigurator = async (graph, createSdk) =>\n    flattenTransactions(\n        await Promise.all(\n            graph.connections.map(async ({ vector: { from, to }, config }): Promise<OmniTransaction[]> => {\n                const sdk = await createSdk(from)\n                const priceData = await sdk.getPrice(to.eid)\n\n                // TODO Normalize the config values using a schema before comparing them\n                if (isDeepEqual(priceData, config.priceData)) {\n                    return []\n                }\n\n                return [await sdk.setPrice(to.eid, config.priceData)]\n            })\n        )\n    )\n","import { z } from 'zod'\nimport type { PriceData } from './types'\nimport { UIntBigIntSchema } from '@layerzerolabs/devtools'\n\nexport const PriceDataSchema = z.object({\n    priceRatio: UIntBigIntSchema,\n    gasPriceInUnit: UIntBigIntSchema,\n    gasPerByte: UIntBigIntSchema,\n}) satisfies z.ZodSchema<PriceData, z.ZodTypeDef, unknown>\n","import { flattenTransactions, type OmniTransaction } from '@layerzerolabs/devtools'\nimport type { Uln302Configurator } from './types'\n\nexport const configureUln302: Uln302Configurator = async (graph, createSdk) =>\n    flattenTransactions([\n        ...(await configureUln302DefaultExecutorConfigs(graph, createSdk)),\n        ...(await configureUln302DefaultUlnConfigs(graph, createSdk)),\n    ])\n\nexport const configureUln302DefaultExecutorConfigs: Uln302Configurator = async (graph, createSdk) =>\n    flattenTransactions(\n        await Promise.all(\n            graph.contracts.map(async ({ point, config }): Promise<OmniTransaction[]> => {\n                const sdk = await createSdk(point)\n\n                return Promise.all(\n                    config.defaultExecutorConfigs.map(([eid, config]) => sdk.setDefaultExecutorConfig(eid, config))\n                )\n            })\n        )\n    )\n\nexport const configureUln302DefaultUlnConfigs: Uln302Configurator = async (graph, createSdk) =>\n    flattenTransactions(\n        await Promise.all(\n            graph.contracts.map(async ({ point, config }): Promise<OmniTransaction[]> => {\n                const sdk = await createSdk(point)\n\n                return Promise.all(\n                    config.defaultUlnConfigs.map(([eid, config]) => sdk.setDefaultUlnConfig(eid, config))\n                )\n            })\n        )\n    )\n","import { AddressSchema, UIntBigIntSchema, UIntNumberSchema } from '@layerzerolabs/devtools'\nimport { z } from 'zod'\nimport { Uln302ExecutorConfig, Uln302UlnConfig, Uln302UlnUserConfig } from './types'\n\nexport const Uln302ExecutorConfigSchema = z.object({\n    executor: AddressSchema,\n    maxMessageSize: UIntNumberSchema,\n}) satisfies z.ZodSchema<Uln302ExecutorConfig, z.ZodTypeDef, unknown>\n\nexport const Uln302UlnConfigSchema = z.object({\n    confirmations: UIntBigIntSchema,\n    requiredDVNs: z.array(AddressSchema),\n    optionalDVNs: z.array(AddressSchema),\n    optionalDVNThreshold: UIntNumberSchema,\n}) satisfies z.ZodSchema<Uln302UlnConfig, z.ZodTypeDef, unknown>\n\nexport const Uln302UlnUserConfigSchema = z.object({\n    confirmations: UIntBigIntSchema.optional(),\n    requiredDVNs: z.array(AddressSchema),\n    optionalDVNs: z.array(AddressSchema).optional(),\n    optionalDVNThreshold: UIntNumberSchema.optional(),\n}) satisfies z.ZodSchema<Uln302UlnUserConfig, z.ZodTypeDef, unknown>\n","import type {\n    OmniAddress,\n    OmniGraph,\n    OmniTransaction,\n    IOmniSDK,\n    OmniPoint,\n    OmniSDKFactory,\n    Configurator,\n} from '@layerzerolabs/devtools'\nimport type { EndpointId } from '@layerzerolabs/lz-definitions'\n\nexport enum Uln302ConfigType {\n    Send = 'send',\n    Receive = 'receive',\n}\n\nexport interface IUln302 extends IOmniSDK {\n    /**\n     * Gets the ULN config for a given endpoint ID and an address.\n     *\n     * If there is no executor config specified, this function will return the default\n     * config set for this library and EndpointID\n     *\n     * @see {@link getAppUlnConfig}\n     *\n     * @param {EndpointId} eid Endpoint ID\n     * @param {OmniAddress | null | undefined} address\n     * @param {Uln302ConfigType} type\n     */\n    getUlnConfig(\n        eid: EndpointId,\n        address: OmniAddress | null | undefined,\n        type: Uln302ConfigType\n    ): Promise<Uln302UlnConfig>\n\n    /**\n     * Gets the ULN config for a given endpoint ID and an address.\n     *\n     * This function will not take the default executor config into account\n     * as opposed to `getUlnConfig`\n     *\n     * @see {@link getUlnConfig}\n     *\n     * @param {EndpointId} eid Endpoint ID\n     * @param {OmniAddress} address\n     * @param {Uln302ConfigType} type\n     */\n    getAppUlnConfig(eid: EndpointId, address: OmniAddress, type: Uln302ConfigType): Promise<Uln302UlnConfig>\n\n    /**\n     * Checks whether a given `config` is set explicitly on a given OApp.\n     *\n     * This method makes it easy to take the specifics of a particular VM implementation\n     * into account when checking for differences in ULN configuration.\n     *\n     * @param {EndpointId} eid\n     * @param {OmniAddress} oapp\n     * @param {Uln302UlnUserConfig} config\n     * @param {Uln302ConfigType} type\n     * @returns {Promise<boolean>} `true` if the config has been explicitly set, `false` otherwise\n     */\n    hasAppUlnConfig(\n        eid: EndpointId,\n        oapp: OmniAddress,\n        config: Uln302UlnUserConfig,\n        type: Uln302ConfigType\n    ): Promise<boolean>\n\n    setDefaultUlnConfig(eid: EndpointId, config: Uln302UlnUserConfig): Promise<OmniTransaction>\n\n    /**\n     * Gets the Executor config for a given endpoint ID and an address.\n     *\n     * If there is no executor config specified, this function will return the default\n     * config set for this library and EndpointID\n     *\n     * @see {@link getAppExecutorConfig}\n     *\n     * @param {EndpointId} eid Endpoint ID\n     * @param {PossiblyBytes | null} address\n     */\n    getExecutorConfig(eid: EndpointId, address?: OmniAddress | null | undefined): Promise<Uln302ExecutorConfig>\n\n    /**\n     * Gets the Executor config for a given endpoint ID and an address.\n     *\n     * This function will not take the default executor config into account\n     * as opposed to `getUlnConfig`\n     *\n     * @see {@link getExecutorConfig}\n     *\n     * @param {EndpointId} eid Endpoint ID\n     * @param {PossiblyBytes} address\n     */\n    getAppExecutorConfig(eid: EndpointId, address: OmniAddress): Promise<Uln302ExecutorConfig>\n\n    /**\n     * Checks whether a given `config` is set explicitly on a given OApp.\n     *\n     * This method makes it easy to take the specifics of a particular VM implementation\n     * into account when checking for differences in Executor configuration.\n     *\n     * @param {EndpointId} eid\n     * @param {OmniAddress} oapp\n     * @param {Uln302ExecutorConfig} config\n     * @returns {Promise<boolean>} `true` if the config has been explicitly set, `false` otherwise\n     */\n    hasAppExecutorConfig(eid: EndpointId, oapp: OmniAddress, config: Uln302ExecutorConfig): Promise<boolean>\n\n    setDefaultExecutorConfig(eid: EndpointId, config: Uln302ExecutorConfig): Promise<OmniTransaction>\n}\n\nexport interface Uln302ExecutorConfig {\n    maxMessageSize: number\n    executor: string\n}\n\nexport interface Uln302UlnConfig {\n    confirmations: bigint\n    optionalDVNThreshold: number\n    requiredDVNs: string[]\n    optionalDVNs: string[]\n}\n\n/**\n * Uln302UlnConfig interface with optional properties left out\n * for user convenience.\n */\nexport interface Uln302UlnUserConfig {\n    confirmations?: bigint\n    optionalDVNThreshold?: number\n    requiredDVNs: string[]\n    optionalDVNs?: string[]\n}\n\nexport interface Uln302NodeConfig {\n    defaultExecutorConfigs: [eid: EndpointId, config: Uln302ExecutorConfig][]\n    defaultUlnConfigs: [eid: EndpointId, config: Uln302UlnUserConfig][]\n}\n\nexport type Uln302OmniGraph = OmniGraph<Uln302NodeConfig, unknown>\n\nexport type Uln302Factory<TUln302 extends IUln302 = IUln302, TOmniPoint = OmniPoint> = OmniSDKFactory<\n    TUln302,\n    TOmniPoint\n>\n\nexport type Uln302Configurator<TUln302 extends IUln302 = IUln302> = Configurator<Uln302OmniGraph, TUln302>\n","import { createModuleLogger, createWithAsyncLogger, printBoolean } from '@layerzerolabs/io-devtools'\nimport {\n    createConfigureMultiple,\n    createConfigureNodes,\n    formatOmniPoint,\n    type OmniTransaction,\n} from '@layerzerolabs/devtools'\nimport type { UlnReadConfigurator } from './types'\n\nconst createUlnReadLogger = () => createModuleLogger('UlnRead')\nconst withUlnReadLogger = createWithAsyncLogger(createUlnReadLogger)\n\nexport const configureUlnReadDefaultUlnConfigs: UlnReadConfigurator = withUlnReadLogger(\n    createConfigureNodes(\n        withUlnReadLogger(async ({ config, point }, sdk): Promise<OmniTransaction[]> => {\n            const logger = createUlnReadLogger()\n            const label = formatOmniPoint(point)\n\n            const omniTransactions: OmniTransaction[] = []\n\n            if (!config.defaultUlnConfigs) {\n                logger.verbose(`defaultUln configuration not set for ${label}, skipping`)\n                return []\n            }\n\n            for (const [channelId, ulnConfig] of config.defaultUlnConfigs) {\n                logger.verbose(`Setting defaultUln configuration for ${label} on channel ${channelId}`)\n\n                const transaction = await sdk.setDefaultUlnConfig(channelId, ulnConfig)\n                omniTransactions.push(transaction)\n\n                logger.verbose(`Set defaultUln configuration for ${label} on channel ${channelId}`)\n            }\n\n            return omniTransactions\n        })\n    )\n)\n\nexport const configureUlnRead: UlnReadConfigurator = withUlnReadLogger(\n    createConfigureMultiple(configureUlnReadDefaultUlnConfigs),\n    {\n        onStart: (logger) => logger.info(`Checking UlnRead configuration`),\n        onSuccess: (logger) => logger.info(`${printBoolean(true)} Checked UlnRead configuration`),\n        onError: (logger, args, error) => logger.error(`Failed to check UlnRead configuration: ${error}`),\n    }\n)\n","import { AddressSchema, UIntNumberSchema } from '@layerzerolabs/devtools'\nimport { z } from 'zod'\nimport { UlnReadUlnConfig, UlnReadUlnUserConfig } from './types'\n\nexport const UlnReadUlnConfigSchema = z.object({\n    executor: AddressSchema,\n    requiredDVNs: z.array(AddressSchema),\n    optionalDVNs: z.array(AddressSchema),\n    optionalDVNThreshold: UIntNumberSchema,\n}) satisfies z.ZodSchema<UlnReadUlnConfig, z.ZodTypeDef, unknown>\n\nexport const UlnReadUlnUserConfigSchema = z.object({\n    executor: AddressSchema.optional(),\n    requiredDVNs: z.array(AddressSchema),\n    optionalDVNs: z.array(AddressSchema).optional(),\n    optionalDVNThreshold: UIntNumberSchema.optional(),\n}) satisfies z.ZodSchema<UlnReadUlnUserConfig, z.ZodTypeDef, unknown>\n"]}