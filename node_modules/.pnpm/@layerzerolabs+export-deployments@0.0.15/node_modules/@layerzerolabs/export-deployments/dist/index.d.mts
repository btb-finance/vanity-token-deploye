import * as E from 'fp-ts/Either';
import { Either } from 'fp-ts/lib/Either';
import { Dirent } from 'fs';

interface OutputFile {
    path: string;
    content: string;
}
type CodeGenerator = (deploymentFilePaths: string[]) => Either<Error, OutputFile[]>;

/**
 * The main generator function that takes in an array of deployment file paths
 * and transforms them into an array of OutputFile objects, one for every contracts
 * plus one index.ts file
 *
 * @param deploymentFilePaths An array of deployment JSON file paths
 *
 * @returns `Either<Error, OutputFile[]>`
 */
declare const generate$2: (fa: string[]) => E.Either<Error, OutputFile[]>;

/**
 * The main generator function that takes in an array of deployment file paths
 * and transforms them into an array of OutputFile objects, one for every contracts
 * plus one index.ts file
 *
 * @param deploymentFilePaths An array of deployment JSON file paths
 *
 * @returns `Either<Error, OutputFile[]>`
 */
declare const generate$1: (fa: string[]) => E.Either<Error, OutputFile[]>;

type IncludeDirent = (dir: Dirent) => boolean;
interface ExportDeploymentsOptions {
    deploymentsDir: string;
    outDir: string;
    includeDeploymentFile?: IncludeDirent;
    includeNetworkDir?: IncludeDirent;
    generator?: CodeGenerator;
}
/**
 * Generates TypeScript deployment summaries from hardhat-deploy deployments.
 *
 * This function is error-safe and will return a typed Either object,
 * for throwing version please use `generate`
 *
 * @returns Eitehr<Error, OutputFile[]>
 */
declare const generateSafe: ({ deploymentsDir, outDir, includeDeploymentFile, includeNetworkDir, generator, }: ExportDeploymentsOptions) => E.Either<Error, OutputFile[]>;
/**
 * Generates TypeScript deployment summaries from hardhat-deploy deployments.
 *
 * This function will throw an error if anything goes wrong - for stringly typed
 * version please use `generateSafe`
 *
 * @param options
 * @returns
 */
declare const generate: (options: ExportDeploymentsOptions) => OutputFile[];
/**
 * Helper utility that creates a Dirent filtering function
 * based on include/exclude lists.
 *
 * This function will handle .json file extensions internally
 * so filtering for `MyContract` and `MyContract.json` are equivalent
 *
 * @param include string[] a list of file names to include
 * @param exclude string[] a list of file names to exclude (has higher priority than include)
 *
 * @returns
 */
declare const createIncludeDirent: (include?: string[], exclude?: string[]) => IncludeDirent;

export { type ExportDeploymentsOptions, type IncludeDirent, type OutputFile, createIncludeDirent, generate, generateSafe, generate$1 as generatorMarkdown, generate$2 as generatorTypeScript };
