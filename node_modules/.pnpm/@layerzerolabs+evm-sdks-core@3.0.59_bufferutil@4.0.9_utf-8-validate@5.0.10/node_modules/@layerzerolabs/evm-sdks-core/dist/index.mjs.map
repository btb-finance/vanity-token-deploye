{"version":3,"sources":["../src/error-parser.ts"],"names":[],"mappings":";;;AAmDa,IAAA,sBAAA,GAAN,cAAqC,KAAuB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgB/D,WAAA,CAAY,OAAiB,EAAA,KAAA,EAAe,IAA2B,EAAA;AACnE,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAO,GAAA,wBAAA;AACZ,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACb,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AAAA;AAEpB;AAKO,IAAM,uBAAN,MAA2B;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9B,YAAmB,GAAU,EAAA;AAAV,IAAA,IAAA,CAAA,GAAA,GAAA,GAAA;AAAA;AAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQtB,mBAAmB,IAA2C,EAAA;AAClE,IAAI,IAAA;AACA,MAAA,MAAM,MAAS,GAAA,IAAI,KAAM,CAAA,SAAA,CAAU,KAAK,GAAG,CAAA;AAC3C,MAAM,MAAA,MAAA,GAAS,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA;AACrC,MAAI,IAAA,CAAC,QAAe,OAAA,IAAA;AACpB,MAAA,MAAM,EAAE,IAAA,EAAM,KAAO,EAAA,IAAA,EAAS,GAAA,MAAA;AAC9B,MAAA,MAAM,gBAAqC,EAAC;AAC5C,MAAI,IAAA,OAAA,GAAU,GAAG,KAAK,CAAA,EAAA,CAAA;AACtB,MAAO,MAAA,CAAA,aAAA,CAAc,OAAO,OAAQ,CAAA,CAAC,EAAE,IAAM,EAAA,OAAA,EAAS,IAAK,EAAA,EAAG,CAAM,KAAA;AAChE,QAAA,aAAA,CAAc,IAAK,CAAA,EAAE,KAAO,EAAA,OAAA,EAAS,MAAM,KAAO,EAAA,IAAA,CAAK,CAAC,CAAA,EAAG,QAAS,EAAA,IAAK,IAAK,CAAA,CAAC,GAAG,CAAA;AAClF,QAAI,IAAA,OAAA,EAAoB,OAAA,IAAA,CAAA,EAAG,OAAO,CAAA,CAAA,CAAA;AAClC,QAAW,OAAA,IAAA,CAAA,EAAG,IAAK,CAAA,CAAC,CAAC,CAAA,EAAA,CAAA;AAAA,OACxB,CAAA;AACD,MAAO,OAAA,EAAE,OAAS,EAAA,OAAA,CAAQ,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA,EAAG,IAAM,EAAA,wBAAA,EAA0B,KAAO,EAAA,IAAA,EAAM,aAAc,EAAA;AAAA,aAC9F,KAAO,EAAA;AACZ,MAAO,OAAA,IAAA;AAAA;AACX;AACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,MAAM,IAA2C,EAAA;AACpD,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,kBAAA,CAAmB,IAAI,CAAA;AAE1C,IAAO,OAAA,KAAA;AAAA;AACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,KAAA,CAAM,MAAc,iBAAiD,EAAA;AACxE,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,kBAAA,CAAmB,IAAI,CAAA;AAC1C,IAAA,IAAI,KAAO,EAAA;AACP,MAAM,MAAA,KAAA,GAAQ,IAAI,sBAAuB,CAAA,KAAA,CAAM,SAAS,KAAM,CAAA,KAAA,EAAO,MAAM,IAAI,CAAA;AAC/E,MAAA,IAAI,iBAAmB,EAAA,KAAA,CAAM,iBAAkB,CAAA,KAAA,EAAO,iBAAiB,CAAA;AACvE,MAAM,MAAA,KAAA;AAAA;AACV;AAER","file":"index.mjs","sourcesContent":["import { utils } from 'ethers'\n\n/**\n * Interface representing a parsed LayerZero error.\n */\nexport interface LayerZeroParsedError {\n    /**\n     * The error message.\n     */\n    message: string\n    /**\n     * The name of the error.\n     */\n    name: string\n    /**\n     * The cause of the error.\n     */\n    cause: string\n    /**\n     * The arguments associated with the error.\n     * @see {@link FormattedErrorArg}\n     */\n    args: FormattedErrorArg[]\n}\n\n/**\n * Type representing the ABI of a contract.\n */\nexport type Abi = ConstructorParameters<typeof utils.Interface>[0]\n\n/**\n * Interface representing a formatted error argument.\n */\nexport interface FormattedErrorArg {\n    /**\n     * The parameter name.\n     */\n    param: string | null\n    /**\n     * The type of the parameter.\n     */\n    type: string\n    /**\n     * The value of the parameter.\n     */\n    value: string\n}\n\n/**\n * Class representing a LayerZero contract error.\n */\nexport class LayerZeroContractError extends Error implements Error {\n    /**\n     * The arguments associated with the error.\n     * @see {@link FormattedErrorArg}\n     */\n    public args: FormattedErrorArg[]\n    /**\n     * The cause of the error.\n     */\n    public cause: string\n    /**\n     * Creates an instance of LayerZeroContractError.\n     * @param message The error message.\n     * @param cause The cause of the error.\n     * @param args The arguments associated with the error. {@link FormattedErrorArg}\n     */\n    constructor(message: string, cause: string, args: FormattedErrorArg[]) {\n        super(message)\n        this.name = 'LayerZeroContractError'\n        this.cause = cause\n        this.args = args\n    }\n}\n\n/**\n * Class responsible for parsing errors related to LayerZero operations.\n */\nexport class LayerZeroErrorParser {\n    /**\n     * Creates an instance of LayerZeroErrorParser.\n     * @param abi The error abi of the contracts that are interacted with.\n     */\n    constructor(public abi: Abi) {}\n\n    /**\n     * Parses a contract error from a given data string.\n     * @param data The error data string to parse.\n     * @returns The parsed error information or null if parsing fails.\n     * @private\n     */\n    private parseContractError(data: string): LayerZeroParsedError | null {\n        try {\n            const interf = new utils.Interface(this.abi)\n            const parsed = interf.parseError(data)\n            if (!parsed) return null\n            const { name: cause, args } = parsed\n            const formattedArgs: FormattedErrorArg[] = []\n            let message = `${cause}, `\n            parsed.errorFragment.inputs.forEach(({ name: argName, type }, i) => {\n                formattedArgs.push({ param: argName, type, value: args[i]?.toString() ?? args[i] })\n                if (argName) message += `${argName} `\n                message += `${args[i]}, `\n            })\n            return { message: message.slice(0, -2), name: 'LayerZeroContractError', cause, args: formattedArgs }\n        } catch (error) {\n            return null\n        }\n    }\n\n    /**\n     * Parses an error from a given data string.\n     * @param data The error data string to parse.\n     * @returns The parsed error information or null if the error is unrecognized.\n     */\n    public parse(data: string): LayerZeroParsedError | null {\n        const error = this.parseContractError(data)\n        // add more error parsers here as needed, for now only contract errors are supported\n        return error\n    }\n\n    /**\n     * Checks for a contract error in the given data string, throwing a `LayerZeroContractError` if one is found.\n     * @param data The error data string to check.\n     * @param cleanUpStackTrace An optional function to clean up the stack. This function and all function above in the stack will be excluded from the trace.\n     * @throws {LayerZeroContractError} Throws a LayerZeroContractError if an error is found corresponding to the data string.\n     */\n    public check(data: string, cleanUpStackTrace?: (...args: any) => any): void {\n        const error = this.parseContractError(data)\n        if (error) {\n            const lzErr = new LayerZeroContractError(error.message, error.cause, error.args)\n            if (cleanUpStackTrace) Error.captureStackTrace(lzErr, cleanUpStackTrace)\n            throw lzErr\n        }\n    }\n}\n"]}