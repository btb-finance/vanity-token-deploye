import * as _layerzerolabs_devtools from '@layerzerolabs/devtools';
import { IOmniSDK, OmniAddress, OmniTransaction, OmniGraph, OmniPoint, OmniSDKFactory, Configurator, Factory, Bytes, PossiblyBigInt, OmniVector, EndpointBasedFactory } from '@layerzerolabs/devtools';
import { EndpointId } from '@layerzerolabs/lz-definitions';
import { IEndpointV2, Uln302ExecutorConfig, Uln302UlnUserConfig, Timeout, UlnReadUlnUserConfig } from '@layerzerolabs/protocol-devtools';
import { ExecutorOptionType, Command, ComputeEVM, SingleViewFunctionEVMCall, CommandRequest, Compute } from '@layerzerolabs/lz-v2-utilities';
import { z } from 'zod';

interface ILzApp extends IOmniSDK {
    getTrustedRemote(eid: EndpointId): Promise<OmniAddress | undefined>;
    hasTrustedRemote(eid: EndpointId, trustedRemote: OmniAddress | null | undefined): Promise<boolean>;
    setTrustedRemote(eid: EndpointId, trustedRemote: OmniAddress | null | undefined): Promise<OmniTransaction>;
}
type LzAppOmniGraph = OmniGraph<unknown, unknown>;
type LzAppFactory<TLzApp extends ILzApp = ILzApp, TOmniPoint = OmniPoint> = OmniSDKFactory<TLzApp, TOmniPoint>;
type LzAppConfigurator<TLzApp extends ILzApp = ILzApp> = Configurator<LzAppOmniGraph, TLzApp>;

declare const configureLzAppTrustedRemotes: LzAppConfigurator;
declare const configureLzApp: LzAppConfigurator;

interface IOwnable {
    getOwner(): Promise<OmniAddress | undefined>;
    hasOwner(address: OmniAddress): Promise<boolean>;
    setOwner(address: OmniAddress): Promise<OmniTransaction>;
}
interface OwnableNodeConfig {
    owner?: OmniAddress | null;
}
type OwnableOmniGraph = OmniGraph<OwnableNodeConfig | undefined>;
type OwnableFactory<TOwnable extends IOwnable = IOwnable, TOmniPoint = OmniPoint> = Factory<[
    TOmniPoint
], TOwnable>;
type OwnableConfigurator<TOwnable extends IOwnable = IOwnable> = Configurator<OwnableOmniGraph, TOwnable>;

interface IOApp extends IOmniSDK, IOwnable {
    getEndpointSDK(): Promise<IEndpointV2>;
    getPeer(eid: EndpointId): Promise<OmniAddress | undefined>;
    hasPeer(eid: EndpointId, address: OmniAddress | null | undefined): Promise<boolean>;
    setPeer(eid: EndpointId, peer: OmniAddress | null | undefined): Promise<OmniTransaction>;
    getDelegate(): Promise<OmniAddress | undefined>;
    isDelegate(address: OmniAddress): Promise<boolean>;
    setDelegate(address: OmniAddress): Promise<OmniTransaction>;
    getEnforcedOptions(eid: EndpointId, msgType: number): Promise<Bytes>;
    setEnforcedOptions(enforcedOptions: OAppEnforcedOptionParam[]): Promise<OmniTransaction>;
    getCallerBpsCap(): Promise<bigint | undefined>;
    setCallerBpsCap(callerBpsCap: bigint): Promise<OmniTransaction | undefined>;
}
interface OAppReceiveLibraryConfig {
    receiveLibrary: string;
    gracePeriod: bigint;
}
interface OAppSendConfig {
    executorConfig?: Uln302ExecutorConfig;
    ulnConfig?: Uln302UlnUserConfig;
}
interface OAppReceiveConfig {
    ulnConfig?: Uln302UlnUserConfig;
}
interface OAppNodeConfig extends OwnableNodeConfig {
    delegate?: OmniAddress | null;
    callerBpsCap?: bigint;
}
interface OAppEdgeConfig {
    sendLibrary?: string;
    receiveLibraryConfig?: OAppReceiveLibraryConfig;
    receiveLibraryTimeoutConfig?: Timeout;
    sendConfig?: OAppSendConfig;
    receiveConfig?: OAppReceiveConfig;
    enforcedOptions?: OAppEnforcedOption[];
}
interface BaseExecutorOption {
    /**
     * The message type defined by OApp's to set enforced options for.
     * @type {number}
     */
    msgType: number;
}
interface EncodedOption extends BaseExecutorOption {
    options: string;
}
interface ExecutorLzReceiveOption extends BaseExecutorOption {
    optionType: ExecutorOptionType.LZ_RECEIVE;
    gas: PossiblyBigInt;
    value?: PossiblyBigInt;
}
interface ExecutorNativeDropOption extends BaseExecutorOption {
    optionType: ExecutorOptionType.NATIVE_DROP;
    amount: PossiblyBigInt;
    receiver: string;
}
interface ExecutorComposeOption extends BaseExecutorOption {
    optionType: ExecutorOptionType.COMPOSE;
    index: number;
    gas: PossiblyBigInt;
    value?: PossiblyBigInt;
}
interface ExecutorOrderedExecutionOption extends BaseExecutorOption {
    optionType: ExecutorOptionType.ORDERED;
}
type OAppEnforcedOption = ExecutorLzReceiveOption | ExecutorNativeDropOption | ExecutorComposeOption | ExecutorOrderedExecutionOption;
interface OAppEnforcedOptionParam {
    eid: EndpointId;
    option: EncodedOption;
}
interface OAppPeers {
    vector: OmniVector;
    hasPeer: boolean;
}
interface OAppEnforcedOptions {
    vector: OmniVector;
    enforcedOptions: EncodedOption[];
}
type OAppOmniGraph = OmniGraph<OAppNodeConfig | undefined, OAppEdgeConfig | undefined>;
type OAppFactory<TOApp extends IOApp = IOApp, TOmniPoint = OmniPoint> = OmniSDKFactory<TOApp, TOmniPoint>;
type OAppConfigurator<TOApp extends IOApp = IOApp> = Configurator<OAppOmniGraph, TOApp>;

type OAppCheckPeers = (graph: OAppOmniGraph, createSdk: OAppFactory) => Promise<OAppPeers[]>;
type OAppCheckEnforcedOptions = (graph: OAppOmniGraph, createSdk: OAppFactory) => Promise<OAppEnforcedOptions[]>;
declare const checkOAppPeers: OAppCheckPeers;
declare const checkOAppEnforcedOptions: OAppCheckEnforcedOptions;

declare const configureOAppDelegates: OAppConfigurator;
declare const configureOAppPeers: OAppConfigurator;
declare const configureSendLibraries: OAppConfigurator;
declare const configureReceiveLibraries: OAppConfigurator;
declare const configureReceiveLibraryTimeouts: OAppConfigurator;
declare const configureSendConfig: OAppConfigurator;
declare const configureReceiveConfig: OAppConfigurator;
declare const configureEnforcedOptions: OAppConfigurator;
declare const configureCallerBpsCap: OAppConfigurator;
declare const configureOApp: OAppConfigurator;

declare const OAppReceiveLibraryConfigSchema: z.ZodObject<{
    gracePeriod: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
    receiveLibrary: z.ZodString;
}, "strip", z.ZodTypeAny, {
    receiveLibrary: string;
    gracePeriod: bigint;
}, {
    receiveLibrary: string;
    gracePeriod?: unknown;
}>;
declare const OAppSendConfigSchema: z.ZodObject<{
    executorConfig: z.ZodOptional<z.ZodObject<{
        executor: z.ZodString;
        maxMessageSize: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        executor: string;
        maxMessageSize: number;
    }, {
        executor: string;
        maxMessageSize?: unknown;
    }>>;
    ulnConfig: z.ZodOptional<z.ZodObject<{
        confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
        requiredDVNs: z.ZodArray<z.ZodString, "many">;
        optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        requiredDVNs: string[];
        confirmations?: bigint | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: number | undefined;
    }, {
        requiredDVNs: string[];
        confirmations?: unknown;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: unknown;
    }>>;
}, "strip", z.ZodTypeAny, {
    executorConfig?: {
        executor: string;
        maxMessageSize: number;
    } | undefined;
    ulnConfig?: {
        requiredDVNs: string[];
        confirmations?: bigint | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: number | undefined;
    } | undefined;
}, {
    executorConfig?: {
        executor: string;
        maxMessageSize?: unknown;
    } | undefined;
    ulnConfig?: {
        requiredDVNs: string[];
        confirmations?: unknown;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: unknown;
    } | undefined;
}>;
declare const OAppReceiveConfigSchema: z.ZodObject<{
    ulnConfig: z.ZodOptional<z.ZodObject<{
        confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
        requiredDVNs: z.ZodArray<z.ZodString, "many">;
        optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        requiredDVNs: string[];
        confirmations?: bigint | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: number | undefined;
    }, {
        requiredDVNs: string[];
        confirmations?: unknown;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: unknown;
    }>>;
}, "strip", z.ZodTypeAny, {
    ulnConfig?: {
        requiredDVNs: string[];
        confirmations?: bigint | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: number | undefined;
    } | undefined;
}, {
    ulnConfig?: {
        requiredDVNs: string[];
        confirmations?: unknown;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: unknown;
    } | undefined;
}>;
declare const ExecutorLzReceiveOptionSchema: z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.LZ_RECEIVE>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.LZ_RECEIVE;
    gas: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.LZ_RECEIVE;
    msgType?: unknown;
    gas?: unknown;
    value?: unknown;
}>;
declare const ExecutorNativeDropOptionSchema: z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.NATIVE_DROP>;
    amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    receiver: z.ZodString;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.NATIVE_DROP;
    amount: number;
    receiver: string;
}, {
    optionType: ExecutorOptionType.NATIVE_DROP;
    receiver: string;
    msgType?: unknown;
    amount?: unknown;
}>;
declare const ExecutorComposeOptionSchema: z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
    index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.COMPOSE;
    gas: number;
    index: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.COMPOSE;
    msgType?: unknown;
    index?: unknown;
    gas?: unknown;
    value?: unknown;
}>;
declare const ExecutorOrderedExecutionOptionSchema: z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.ORDERED;
}, {
    optionType: ExecutorOptionType.ORDERED;
    msgType?: unknown;
}>;
declare const OAppEnforcedOptionConfigSchema: z.ZodUnion<[z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.LZ_RECEIVE>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.LZ_RECEIVE;
    gas: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.LZ_RECEIVE;
    msgType?: unknown;
    gas?: unknown;
    value?: unknown;
}>, z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.NATIVE_DROP>;
    amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    receiver: z.ZodString;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.NATIVE_DROP;
    amount: number;
    receiver: string;
}, {
    optionType: ExecutorOptionType.NATIVE_DROP;
    receiver: string;
    msgType?: unknown;
    amount?: unknown;
}>, z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
    index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.COMPOSE;
    gas: number;
    index: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.COMPOSE;
    msgType?: unknown;
    index?: unknown;
    gas?: unknown;
    value?: unknown;
}>, z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.ORDERED;
}, {
    optionType: ExecutorOptionType.ORDERED;
    msgType?: unknown;
}>]>;
declare const OAppEnforcedOptionsSchema: z.ZodArray<z.ZodUnion<[z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.LZ_RECEIVE>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.LZ_RECEIVE;
    gas: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.LZ_RECEIVE;
    msgType?: unknown;
    gas?: unknown;
    value?: unknown;
}>, z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.NATIVE_DROP>;
    amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    receiver: z.ZodString;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.NATIVE_DROP;
    amount: number;
    receiver: string;
}, {
    optionType: ExecutorOptionType.NATIVE_DROP;
    receiver: string;
    msgType?: unknown;
    amount?: unknown;
}>, z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
    index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.COMPOSE;
    gas: number;
    index: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.COMPOSE;
    msgType?: unknown;
    index?: unknown;
    gas?: unknown;
    value?: unknown;
}>, z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.ORDERED;
}, {
    optionType: ExecutorOptionType.ORDERED;
    msgType?: unknown;
}>]>, "many">;
declare const OAppNodeConfigSchema: z.ZodObject<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.ZodTypeAny, "passthrough">>;
declare const OAppEdgeConfigSchema: z.ZodObject<{
    sendLibrary: z.ZodOptional<z.ZodString>;
    receiveLibraryConfig: z.ZodOptional<z.ZodObject<{
        gracePeriod: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
        receiveLibrary: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        receiveLibrary: string;
        gracePeriod: bigint;
    }, {
        receiveLibrary: string;
        gracePeriod?: unknown;
    }>>;
    receiveLibraryTimeoutConfig: z.ZodOptional<z.ZodObject<{
        lib: z.ZodString;
        expiry: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        lib: string;
        expiry: bigint;
    }, {
        lib: string;
        expiry?: unknown;
    }>>;
    sendConfig: z.ZodOptional<z.ZodObject<{
        executorConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodString;
            maxMessageSize: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            executor: string;
            maxMessageSize: number;
        }, {
            executor: string;
            maxMessageSize?: unknown;
        }>>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        executorConfig?: {
            executor: string;
            maxMessageSize: number;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        executorConfig?: {
            executor: string;
            maxMessageSize?: unknown;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    receiveConfig: z.ZodOptional<z.ZodObject<{
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.LZ_RECEIVE>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.LZ_RECEIVE;
        gas: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.LZ_RECEIVE;
        msgType?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.NATIVE_DROP>;
        amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        receiver: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.NATIVE_DROP;
        amount: number;
        receiver: string;
    }, {
        optionType: ExecutorOptionType.NATIVE_DROP;
        receiver: string;
        msgType?: unknown;
        amount?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    }, {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    sendLibrary: z.ZodOptional<z.ZodString>;
    receiveLibraryConfig: z.ZodOptional<z.ZodObject<{
        gracePeriod: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
        receiveLibrary: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        receiveLibrary: string;
        gracePeriod: bigint;
    }, {
        receiveLibrary: string;
        gracePeriod?: unknown;
    }>>;
    receiveLibraryTimeoutConfig: z.ZodOptional<z.ZodObject<{
        lib: z.ZodString;
        expiry: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        lib: string;
        expiry: bigint;
    }, {
        lib: string;
        expiry?: unknown;
    }>>;
    sendConfig: z.ZodOptional<z.ZodObject<{
        executorConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodString;
            maxMessageSize: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            executor: string;
            maxMessageSize: number;
        }, {
            executor: string;
            maxMessageSize?: unknown;
        }>>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        executorConfig?: {
            executor: string;
            maxMessageSize: number;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        executorConfig?: {
            executor: string;
            maxMessageSize?: unknown;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    receiveConfig: z.ZodOptional<z.ZodObject<{
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.LZ_RECEIVE>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.LZ_RECEIVE;
        gas: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.LZ_RECEIVE;
        msgType?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.NATIVE_DROP>;
        amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        receiver: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.NATIVE_DROP;
        amount: number;
        receiver: string;
    }, {
        optionType: ExecutorOptionType.NATIVE_DROP;
        receiver: string;
        msgType?: unknown;
        amount?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    }, {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    sendLibrary: z.ZodOptional<z.ZodString>;
    receiveLibraryConfig: z.ZodOptional<z.ZodObject<{
        gracePeriod: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
        receiveLibrary: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        receiveLibrary: string;
        gracePeriod: bigint;
    }, {
        receiveLibrary: string;
        gracePeriod?: unknown;
    }>>;
    receiveLibraryTimeoutConfig: z.ZodOptional<z.ZodObject<{
        lib: z.ZodString;
        expiry: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        lib: string;
        expiry: bigint;
    }, {
        lib: string;
        expiry?: unknown;
    }>>;
    sendConfig: z.ZodOptional<z.ZodObject<{
        executorConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodString;
            maxMessageSize: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            executor: string;
            maxMessageSize: number;
        }, {
            executor: string;
            maxMessageSize?: unknown;
        }>>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        executorConfig?: {
            executor: string;
            maxMessageSize: number;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        executorConfig?: {
            executor: string;
            maxMessageSize?: unknown;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    receiveConfig: z.ZodOptional<z.ZodObject<{
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.LZ_RECEIVE>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.LZ_RECEIVE;
        gas: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.LZ_RECEIVE;
        msgType?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.NATIVE_DROP>;
        amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        receiver: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.NATIVE_DROP;
        amount: number;
        receiver: string;
    }, {
        optionType: ExecutorOptionType.NATIVE_DROP;
        receiver: string;
        msgType?: unknown;
        amount?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    }, {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, z.ZodTypeAny, "passthrough">>;
declare const OAppOmniGraphSchema: z.ZodType<_layerzerolabs_devtools.OmniGraph<z.objectOutputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.ZodTypeAny, "passthrough">, z.objectOutputType<{
    sendLibrary: z.ZodOptional<z.ZodString>;
    receiveLibraryConfig: z.ZodOptional<z.ZodObject<{
        gracePeriod: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
        receiveLibrary: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        receiveLibrary: string;
        gracePeriod: bigint;
    }, {
        receiveLibrary: string;
        gracePeriod?: unknown;
    }>>;
    receiveLibraryTimeoutConfig: z.ZodOptional<z.ZodObject<{
        lib: z.ZodString;
        expiry: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        lib: string;
        expiry: bigint;
    }, {
        lib: string;
        expiry?: unknown;
    }>>;
    sendConfig: z.ZodOptional<z.ZodObject<{
        executorConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodString;
            maxMessageSize: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            executor: string;
            maxMessageSize: number;
        }, {
            executor: string;
            maxMessageSize?: unknown;
        }>>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        executorConfig?: {
            executor: string;
            maxMessageSize: number;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        executorConfig?: {
            executor: string;
            maxMessageSize?: unknown;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    receiveConfig: z.ZodOptional<z.ZodObject<{
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.LZ_RECEIVE>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.LZ_RECEIVE;
        gas: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.LZ_RECEIVE;
        msgType?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.NATIVE_DROP>;
        amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        receiver: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.NATIVE_DROP;
        amount: number;
        receiver: string;
    }, {
        optionType: ExecutorOptionType.NATIVE_DROP;
        receiver: string;
        msgType?: unknown;
        amount?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    }, {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, z.ZodTypeAny, "passthrough">>, z.ZodTypeDef, unknown>;

declare const configureOwnable: OwnableConfigurator;

declare const OwnableNodeConfigSchema: z.ZodObject<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.ZodTypeAny, "passthrough">>;

interface IOAppRead extends IOApp {
    setReadChannel(channelId: number, active: boolean): Promise<OmniTransaction>;
    isReadChannelActive(channelId: number): Promise<boolean>;
}
interface ExecutorLzReadOption extends BaseExecutorOption {
    optionType: ExecutorOptionType.LZ_READ;
    gas: PossiblyBigInt;
    size: PossiblyBigInt;
    value?: PossiblyBigInt;
}
type OAppReadEnforcedOption = ExecutorLzReadOption | ExecutorComposeOption | ExecutorOrderedExecutionOption;
interface OAppReadChannels {
    contract: OmniPoint;
    channelId: number;
    isActive: boolean;
}
interface OAppReadChannelConfig {
    channelId: number;
    active?: boolean;
    readLibrary?: string;
    ulnConfig?: UlnReadUlnUserConfig;
    enforcedOptions?: OAppReadEnforcedOption[];
}
interface OAppReadNodeConfig extends OAppNodeConfig {
    readChannelConfigs?: OAppReadChannelConfig[];
}
type OAppReadOmniGraph = OmniGraph<OAppReadNodeConfig | undefined, OAppEdgeConfig | undefined>;
type OAppReadFactory<TOAppRead extends IOAppRead = IOAppRead, TOmniPoint = OmniPoint> = OmniSDKFactory<TOAppRead, TOmniPoint>;
type OAppReadConfigurator<TOAppRead extends IOAppRead = IOAppRead> = Configurator<OAppReadOmniGraph, TOAppRead>;

declare const configureOAppReadChannels: OAppReadConfigurator;
declare const configureReadLibraries: OAppReadConfigurator;
declare const configureReadConfig: OAppReadConfigurator;
declare const configureReadEnforcedOptions: OAppReadConfigurator;
declare const configureOAppRead: OAppReadConfigurator;

declare const ExecutorLzReadOptionSchema: z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.LZ_READ>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.LZ_READ;
    gas: number;
    size: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.LZ_READ;
    msgType?: unknown;
    gas?: unknown;
    size?: unknown;
    value?: unknown;
}>;
declare const OAppReadEnforcedOptionConfigSchema: z.ZodUnion<[z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.LZ_READ>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.LZ_READ;
    gas: number;
    size: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.LZ_READ;
    msgType?: unknown;
    gas?: unknown;
    size?: unknown;
    value?: unknown;
}>, z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
    index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.COMPOSE;
    gas: number;
    index: number;
    value?: number | undefined;
}, {
    optionType: ExecutorOptionType.COMPOSE;
    msgType?: unknown;
    index?: unknown;
    gas?: unknown;
    value?: unknown;
}>, z.ZodObject<{
    msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
}, "strip", z.ZodTypeAny, {
    msgType: number;
    optionType: ExecutorOptionType.ORDERED;
}, {
    optionType: ExecutorOptionType.ORDERED;
    msgType?: unknown;
}>]>;
declare const OAppReadChannelConfigSchema: z.ZodObject<{
    channelId: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    active: z.ZodOptional<z.ZodBoolean>;
    readLibrary: z.ZodOptional<z.ZodString>;
    ulnConfig: z.ZodOptional<z.ZodObject<{
        executor: z.ZodOptional<z.ZodString>;
        requiredDVNs: z.ZodArray<z.ZodString, "many">;
        optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        requiredDVNs: string[];
        executor?: string | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: number | undefined;
    }, {
        requiredDVNs: string[];
        executor?: string | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: unknown;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.LZ_READ>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.LZ_READ;
        gas: number;
        size: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.LZ_READ;
        msgType?: unknown;
        gas?: unknown;
        size?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    }, {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, "strip", z.ZodTypeAny, {
    channelId: number;
    active?: boolean | undefined;
    readLibrary?: string | undefined;
    ulnConfig?: {
        requiredDVNs: string[];
        executor?: string | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: number | undefined;
    } | undefined;
    enforcedOptions?: ({
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    } | {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    } | {
        msgType: number;
        optionType: ExecutorOptionType.LZ_READ;
        gas: number;
        size: number;
        value?: number | undefined;
    })[] | undefined;
}, {
    channelId?: unknown;
    active?: boolean | undefined;
    readLibrary?: string | undefined;
    ulnConfig?: {
        requiredDVNs: string[];
        executor?: string | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: unknown;
    } | undefined;
    enforcedOptions?: ({
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    } | {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    } | {
        optionType: ExecutorOptionType.LZ_READ;
        msgType?: unknown;
        gas?: unknown;
        size?: unknown;
        value?: unknown;
    })[] | undefined;
}>;
declare const OAppReadChannelSchema: z.ZodArray<z.ZodObject<{
    channelId: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
    active: z.ZodOptional<z.ZodBoolean>;
    readLibrary: z.ZodOptional<z.ZodString>;
    ulnConfig: z.ZodOptional<z.ZodObject<{
        executor: z.ZodOptional<z.ZodString>;
        requiredDVNs: z.ZodArray<z.ZodString, "many">;
        optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        requiredDVNs: string[];
        executor?: string | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: number | undefined;
    }, {
        requiredDVNs: string[];
        executor?: string | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: unknown;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.LZ_READ>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.LZ_READ;
        gas: number;
        size: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.LZ_READ;
        msgType?: unknown;
        gas?: unknown;
        size?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    }, {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, "strip", z.ZodTypeAny, {
    channelId: number;
    active?: boolean | undefined;
    readLibrary?: string | undefined;
    ulnConfig?: {
        requiredDVNs: string[];
        executor?: string | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: number | undefined;
    } | undefined;
    enforcedOptions?: ({
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    } | {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    } | {
        msgType: number;
        optionType: ExecutorOptionType.LZ_READ;
        gas: number;
        size: number;
        value?: number | undefined;
    })[] | undefined;
}, {
    channelId?: unknown;
    active?: boolean | undefined;
    readLibrary?: string | undefined;
    ulnConfig?: {
        requiredDVNs: string[];
        executor?: string | undefined;
        optionalDVNs?: string[] | undefined;
        optionalDVNThreshold?: unknown;
    } | undefined;
    enforcedOptions?: ({
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    } | {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    } | {
        optionType: ExecutorOptionType.LZ_READ;
        msgType?: unknown;
        gas?: unknown;
        size?: unknown;
        value?: unknown;
    })[] | undefined;
}>, "many">;
declare const OAppReadNodeConfigSchema: z.ZodObject<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    readChannelConfigs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        channelId: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        active: z.ZodOptional<z.ZodBoolean>;
        readLibrary: z.ZodOptional<z.ZodString>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodOptional<z.ZodString>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
        enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.LZ_READ>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        }, {
            optionType: ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
            index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        }, {
            optionType: ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.ORDERED;
        }, {
            optionType: ExecutorOptionType.ORDERED;
            msgType?: unknown;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        channelId: number;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
        enforcedOptions?: ({
            msgType: number;
            optionType: ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        } | {
            msgType: number;
            optionType: ExecutorOptionType.ORDERED;
        } | {
            msgType: number;
            optionType: ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        })[] | undefined;
    }, {
        channelId?: unknown;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
        enforcedOptions?: ({
            optionType: ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        } | {
            optionType: ExecutorOptionType.ORDERED;
            msgType?: unknown;
        } | {
            optionType: ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        })[] | undefined;
    }>, "many">>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    readChannelConfigs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        channelId: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        active: z.ZodOptional<z.ZodBoolean>;
        readLibrary: z.ZodOptional<z.ZodString>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodOptional<z.ZodString>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
        enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.LZ_READ>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        }, {
            optionType: ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
            index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        }, {
            optionType: ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.ORDERED;
        }, {
            optionType: ExecutorOptionType.ORDERED;
            msgType?: unknown;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        channelId: number;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
        enforcedOptions?: ({
            msgType: number;
            optionType: ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        } | {
            msgType: number;
            optionType: ExecutorOptionType.ORDERED;
        } | {
            msgType: number;
            optionType: ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        })[] | undefined;
    }, {
        channelId?: unknown;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
        enforcedOptions?: ({
            optionType: ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        } | {
            optionType: ExecutorOptionType.ORDERED;
            msgType?: unknown;
        } | {
            optionType: ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        })[] | undefined;
    }>, "many">>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    readChannelConfigs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        channelId: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        active: z.ZodOptional<z.ZodBoolean>;
        readLibrary: z.ZodOptional<z.ZodString>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodOptional<z.ZodString>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
        enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.LZ_READ>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        }, {
            optionType: ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
            index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        }, {
            optionType: ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.ORDERED;
        }, {
            optionType: ExecutorOptionType.ORDERED;
            msgType?: unknown;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        channelId: number;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
        enforcedOptions?: ({
            msgType: number;
            optionType: ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        } | {
            msgType: number;
            optionType: ExecutorOptionType.ORDERED;
        } | {
            msgType: number;
            optionType: ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        })[] | undefined;
    }, {
        channelId?: unknown;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
        enforcedOptions?: ({
            optionType: ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        } | {
            optionType: ExecutorOptionType.ORDERED;
            msgType?: unknown;
        } | {
            optionType: ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        })[] | undefined;
    }>, "many">>;
}, z.ZodTypeAny, "passthrough">>;
declare const OAppReadOmniGraphSchema: z.ZodType<_layerzerolabs_devtools.OmniGraph<z.objectOutputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    readChannelConfigs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        channelId: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        active: z.ZodOptional<z.ZodBoolean>;
        readLibrary: z.ZodOptional<z.ZodString>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodOptional<z.ZodString>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
        enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.LZ_READ>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        }, {
            optionType: ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
            index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        }, {
            optionType: ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: ExecutorOptionType.ORDERED;
        }, {
            optionType: ExecutorOptionType.ORDERED;
            msgType?: unknown;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        channelId: number;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
        enforcedOptions?: ({
            msgType: number;
            optionType: ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        } | {
            msgType: number;
            optionType: ExecutorOptionType.ORDERED;
        } | {
            msgType: number;
            optionType: ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        })[] | undefined;
    }, {
        channelId?: unknown;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
        enforcedOptions?: ({
            optionType: ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        } | {
            optionType: ExecutorOptionType.ORDERED;
            msgType?: unknown;
        } | {
            optionType: ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        })[] | undefined;
    }>, "many">>;
}, z.ZodTypeAny, "passthrough">, z.objectOutputType<{
    sendLibrary: z.ZodOptional<z.ZodString>;
    receiveLibraryConfig: z.ZodOptional<z.ZodObject<{
        gracePeriod: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
        receiveLibrary: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        receiveLibrary: string;
        gracePeriod: bigint;
    }, {
        receiveLibrary: string;
        gracePeriod?: unknown;
    }>>;
    receiveLibraryTimeoutConfig: z.ZodOptional<z.ZodObject<{
        lib: z.ZodString;
        expiry: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        lib: string;
        expiry: bigint;
    }, {
        lib: string;
        expiry?: unknown;
    }>>;
    sendConfig: z.ZodOptional<z.ZodObject<{
        executorConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodString;
            maxMessageSize: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            executor: string;
            maxMessageSize: number;
        }, {
            executor: string;
            maxMessageSize?: unknown;
        }>>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        executorConfig?: {
            executor: string;
            maxMessageSize: number;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        executorConfig?: {
            executor: string;
            maxMessageSize?: unknown;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    receiveConfig: z.ZodOptional<z.ZodObject<{
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.LZ_RECEIVE>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.LZ_RECEIVE;
        gas: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.LZ_RECEIVE;
        msgType?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.NATIVE_DROP>;
        amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        receiver: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.NATIVE_DROP;
        amount: number;
        receiver: string;
    }, {
        optionType: ExecutorOptionType.NATIVE_DROP;
        receiver: string;
        msgType?: unknown;
        amount?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: ExecutorOptionType.ORDERED;
    }, {
        optionType: ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, z.ZodTypeAny, "passthrough">>, z.ZodTypeDef, unknown>;

type OAppCheckReadChannels = (graph: OAppReadOmniGraph, createSdk: OAppReadFactory) => Promise<OAppReadChannels[]>;
declare const checkOAppReadChannels: OAppCheckReadChannels;

interface BaseTimeMarker {
    blockConfirmation: number;
    isBlockNumber: boolean;
    eid: EndpointId;
    blockNumber?: number;
    timestamp?: number;
}
interface BlockNumberTimeMarker extends BaseTimeMarker {
    isBlockNumber: true;
    blockNumber: number;
    timestamp?: never;
}
interface TimestampTimeMarker extends BaseTimeMarker {
    isBlockNumber: false;
    blockNumber?: never;
    timestamp: number;
}
interface ResolvedTimestampTimeMarker extends BaseTimeMarker {
    isBlockNumber: false;
    blockNumber: number;
    timestamp: number;
}
type TimeMarker = BlockNumberTimeMarker | TimestampTimeMarker;
type ResolvedTimeMarker = BlockNumberTimeMarker | ResolvedTimestampTimeMarker;
interface BlockTime {
    number: number;
    timestamp: number;
}

interface ICommandResolver {
    decodeCommand(command: string): Command;
    extractTimeMarkers(command: string): Promise<{
        blockNumberTimeMarkers: BlockNumberTimeMarker[];
        timestampTimeMarkers: TimestampTimeMarker[];
    }>;
    resolveCommand(command: string, timeMarkers: ResolvedTimestampTimeMarker[]): Promise<string>;
}
interface RequestResponsePair {
    request: string;
    response: string;
}
interface IComputerEVM {
    resolve(cmd: string, compute: ComputeEVM, timeMarker: ResolvedTimeMarker, responses: RequestResponsePair[]): Promise<string>;
}
interface ISingleViewFunctionCallerEVM {
    resolve(request: SingleViewFunctionEVMCall, timeMarker: ResolvedTimeMarker): Promise<string>;
}

declare class CommandResolver implements ICommandResolver {
    protected readonly singleViewFunctionEVMCallFactory: EndpointBasedFactory<ISingleViewFunctionCallerEVM>;
    protected readonly computerEVMFactory: EndpointBasedFactory<IComputerEVM>;
    constructor(singleViewFunctionEVMCallFactory: EndpointBasedFactory<ISingleViewFunctionCallerEVM>, computerEVMFactory: EndpointBasedFactory<IComputerEVM>);
    decodeCommand(command: string): Command;
    extractTimeMarkers(command: string): Promise<{
        blockNumberTimeMarkers: BlockNumberTimeMarker[];
        timestampTimeMarkers: TimestampTimeMarker[];
    }>;
    resolveCommand(command: string, timeMarkers: ResolvedTimestampTimeMarker[]): Promise<string>;
    private resolveRequest;
    private resolveCompute;
}

declare class UnresolvableCommandError extends Error {
    constructor();
}

declare const dedup: <T>(isEqual: (a: T, b: T) => boolean) => (arr: T[]) => T[];
declare const isEqualTimeMarker: (a: TimeMarker, b: TimeMarker) => boolean;
declare const dedupTimeMarkers: (arr: TimeMarker[]) => TimeMarker[];
declare const extractTimeMarker: (req: SingleViewFunctionEVMCall | ComputeEVM) => TimeMarker;
declare const applyResolvedTimestampTimeMarkers: (tms: TimestampTimeMarker[], rtms: ResolvedTimestampTimeMarker[]) => ResolvedTimestampTimeMarker[];
declare const findRequestResolvedTimeMarker: (request: CommandRequest, timeMarkers: ResolvedTimestampTimeMarker[]) => ResolvedTimeMarker;
declare const findComputeResolvedTimeMarker: (compute: Compute, timeMarkers: ResolvedTimestampTimeMarker[]) => ResolvedTimeMarker;
declare const groupByEid: <T extends {
    eid: EndpointId;
}>(arr: T[]) => Map<number, T[]>;
declare const isBlockMatchingTimestamp: (block: BlockTime, previousBlock: BlockTime | null, targetTimestamp: number) => boolean;

interface ITimeMarkerResolver {
    resolveTimestampTimeMarkers(timeMarkers: TimestampTimeMarker[]): Promise<ResolvedTimestampTimeMarker[]>;
}
interface ITimeMarkerResolverChain {
    resolveTimestamps(timestamps: number[]): Promise<{
        [timestamp: number]: number;
    }>;
}

declare class TimeMarkerResolver implements ITimeMarkerResolver {
    protected readonly timeMarkerResolverChainFactory: EndpointBasedFactory<ITimeMarkerResolverChain>;
    constructor(timeMarkerResolverChainFactory: EndpointBasedFactory<ITimeMarkerResolverChain>);
    resolveTimestampTimeMarkers(timeMarkers: TimestampTimeMarker[]): Promise<ResolvedTimestampTimeMarker[]>;
}

interface ITimeMarkerValidator {
    checkResolvedTimeMarkerValidity(tms: ResolvedTimestampTimeMarker[]): Promise<void>;
    assertTimeMarkerBlockConfirmations(tms: ResolvedTimeMarker[]): Promise<void>;
}
interface ITimeMarkerValidatorChain {
    checkResolvedTimeMarkerValidity(tms: Omit<ResolvedTimestampTimeMarker, 'eid'>[]): Promise<void>;
    assertTimeMarkerBlockConfirmations(tms: Omit<ResolvedTimeMarker, 'eid'>[]): Promise<void>;
}

declare class TimeMarkerValidator implements ITimeMarkerValidator {
    protected readonly timeMarkerValidatorChainFactory: EndpointBasedFactory<ITimeMarkerValidatorChain>;
    constructor(timeMarkerValidatorChainFactory: EndpointBasedFactory<ITimeMarkerValidatorChain>);
    checkResolvedTimeMarkerValidity(tms: ResolvedTimestampTimeMarker[]): Promise<void>;
    assertTimeMarkerBlockConfirmations(tms: ResolvedTimeMarker[]): Promise<void>;
}

export { type BaseExecutorOption, type BaseTimeMarker, type BlockNumberTimeMarker, type BlockTime, CommandResolver, type EncodedOption, type ExecutorComposeOption, ExecutorComposeOptionSchema, type ExecutorLzReadOption, ExecutorLzReadOptionSchema, type ExecutorLzReceiveOption, ExecutorLzReceiveOptionSchema, type ExecutorNativeDropOption, ExecutorNativeDropOptionSchema, type ExecutorOrderedExecutionOption, ExecutorOrderedExecutionOptionSchema, type ICommandResolver, type IComputerEVM, type ILzApp, type IOApp, type IOAppRead, type IOwnable, type ISingleViewFunctionCallerEVM, type ITimeMarkerResolver, type ITimeMarkerResolverChain, type ITimeMarkerValidator, type ITimeMarkerValidatorChain, type LzAppConfigurator, type LzAppFactory, type LzAppOmniGraph, type OAppCheckEnforcedOptions, type OAppCheckPeers, type OAppCheckReadChannels, type OAppConfigurator, type OAppEdgeConfig, OAppEdgeConfigSchema, type OAppEnforcedOption, OAppEnforcedOptionConfigSchema, type OAppEnforcedOptionParam, type OAppEnforcedOptions, OAppEnforcedOptionsSchema, type OAppFactory, type OAppNodeConfig, OAppNodeConfigSchema, type OAppOmniGraph, OAppOmniGraphSchema, type OAppPeers, type OAppReadChannelConfig, OAppReadChannelConfigSchema, OAppReadChannelSchema, type OAppReadChannels, type OAppReadConfigurator, type OAppReadEnforcedOption, OAppReadEnforcedOptionConfigSchema, type OAppReadFactory, type OAppReadNodeConfig, OAppReadNodeConfigSchema, type OAppReadOmniGraph, OAppReadOmniGraphSchema, type OAppReceiveConfig, OAppReceiveConfigSchema, type OAppReceiveLibraryConfig, OAppReceiveLibraryConfigSchema, type OAppSendConfig, OAppSendConfigSchema, type OwnableConfigurator, type OwnableFactory, type OwnableNodeConfig, OwnableNodeConfigSchema, type OwnableOmniGraph, type RequestResponsePair, type ResolvedTimeMarker, type ResolvedTimestampTimeMarker, type TimeMarker, TimeMarkerResolver, TimeMarkerValidator, type TimestampTimeMarker, UnresolvableCommandError, applyResolvedTimestampTimeMarkers, checkOAppEnforcedOptions, checkOAppPeers, checkOAppReadChannels, configureCallerBpsCap, configureEnforcedOptions, configureLzApp, configureLzAppTrustedRemotes, configureOApp, configureOAppDelegates, configureOAppPeers, configureOAppRead, configureOAppReadChannels, configureOwnable, configureReadConfig, configureReadEnforcedOptions, configureReadLibraries, configureReceiveConfig, configureReceiveLibraries, configureReceiveLibraryTimeouts, configureSendConfig, configureSendLibraries, dedup, dedupTimeMarkers, extractTimeMarker, findComputeResolvedTimeMarker, findRequestResolvedTimeMarker, groupByEid, isBlockMatchingTimestamp, isEqualTimeMarker };
