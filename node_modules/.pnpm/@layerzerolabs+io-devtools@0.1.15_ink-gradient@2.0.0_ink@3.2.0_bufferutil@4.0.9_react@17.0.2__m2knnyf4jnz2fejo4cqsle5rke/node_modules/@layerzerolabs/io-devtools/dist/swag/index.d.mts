import React from 'react';
export { render } from 'ink';

type PrimitiveValue = string | number | boolean | bigint | symbol | null | undefined;

type RecordData = Record$1<string, PrimitiveValue>;
declare const Record$1: React.FC<{
    data: RecordData;
    columns?: number;
}>;

type TableRow = Record<string | number, PrimitiveValue>;

declare const printLogo: () => void;
/**
 * Renders a horizontal table with rows labeled by object properties:
 *
 * ```
 * printRecord({
 *   Color: 'blue',
 *   Shape: 'weird'
 * })
 * ```
 *
 * |                 |         |
 * | -------------------- | ----------  |
 * | Color                | blue        |
 * | Shape                | weird       |
 *
 * @param {RecordData} data
 * @returns {void}
 */
declare const printRecord: (data: RecordData) => void;
/**
 * Renders a series of individual boxes, each containing
 * an output of `printRecord`
 *
 * @see {@link printRecord}
 *
 * @param {TableRow} data Array of rows
 * @returns {void}
 */
declare const printRecords: (data: RecordData[]) => void;
/**
 * Renders a standard, vertical table without any row labels:
 *
 * ```
 * printVerticalTable([{
 *  Color: 'blue',
 *  Shape: 'weird'
 * }, {
 *  Color: 'red',
 *  Shape: 'green'
 * }, {
 *  Color: 'green',
 *  Shape: 'circle'
 * }])
 * ```
 *
 * | Color                | Shape       |
 * | -------------------- | ----------  |
 * | blue                 | small       |
 * | red                  | weird       |
 * | green                | circle      |
 *
 * @param {TableRow} data Array of rows
 * @returns {void}
 */
declare const printVerticalTable: (data: TableRow[]) => void;

interface ProgressBarProps {
    /**
     * Progress of the task, between [0-1]
     */
    progress?: number;
    /**
     * Text to appear before the progressbar
     */
    before?: string;
    /**
     * Text to appear after the progressbar
     */
    after?: string;
    /**
     * Number of available columns
     */
    columns?: number;
}

/**
 * Creates a ProgressBar React node.
 *
 * This is so that the consumers don't need to use JSX and/or React.createElement
 * and so that we can pass this node to e.g. instance.rerender() if a rendered ink component
 *
 * ```typescript
 * import { createProgressBar, render } from '@layerzerolabs/io-devtools/swag'
 *
 * const instance = render(createProgressBar())
 *
 * instance.rerender(createProgressBar({ progress: 0.5 }))
 * instance.clear()
 * ```
 *
 * @param {ProgressBarProps} props
 * @returns {React.ReactElement<ProgressBarProps>}
 */
declare const createProgressBar: (props?: ProgressBarProps) => React.ReactElement<ProgressBarProps>;

export { createProgressBar, printLogo, printRecord, printRecords, printVerticalTable };
