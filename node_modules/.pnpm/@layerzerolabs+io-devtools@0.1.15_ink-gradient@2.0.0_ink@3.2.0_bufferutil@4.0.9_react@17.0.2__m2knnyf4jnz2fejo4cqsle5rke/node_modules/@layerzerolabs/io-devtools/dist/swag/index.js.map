{"version":3,"sources":["../../src/swag/printer.tsx","../../src/swag/components/logo.tsx","../../src/swag/components/record.tsx","../../src/swag/components/table.tsx","../../src/swag/renderer.tsx","../../src/swag/components/progress.tsx"],"names":["React","_a","Box","Text","Gradient","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"ink\";\nimport { Logo } from \"./components/logo\";\nimport { Record, RecordList, type RecordData } from \"./components/record\";\nimport { Table, type TableRow } from \"./components/table\";\n\nexport const printLogo = () => render(<Logo />).unmount();\n\n/**\n * Renders a horizontal table with rows labeled by object properties:\n *\n * ```\n * printRecord({\n *   Color: 'blue',\n *   Shape: 'weird'\n * })\n * ```\n *\n * |                 |         |\n * | -------------------- | ----------  |\n * | Color                | blue        |\n * | Shape                | weird       |\n *\n * @param {RecordData} data\n * @returns {void}\n */\nexport const printRecord = (data: RecordData): void =>\n  render(<Record data={data} />).unmount();\n\n/**\n * Renders a series of individual boxes, each containing\n * an output of `printRecord`\n *\n * @see {@link printRecord}\n *\n * @param {TableRow} data Array of rows\n * @returns {void}\n */\nexport const printRecords = (data: RecordData[]): void =>\n  render(<RecordList data={data} />).unmount();\n\n/**\n * Renders a standard, vertical table without any row labels:\n *\n * ```\n * printVerticalTable([{\n *  Color: 'blue',\n *  Shape: 'weird'\n * }, {\n *  Color: 'red',\n *  Shape: 'green'\n * }, {\n *  Color: 'green',\n *  Shape: 'circle'\n * }])\n * ```\n *\n * | Color                | Shape       |\n * | -------------------- | ----------  |\n * | blue                 | small       |\n * | red                  | weird       |\n * | green                | circle      |\n *\n * @param {TableRow} data Array of rows\n * @returns {void}\n */\nexport const printVerticalTable = (data: TableRow[]): void =>\n  render(<Table data={data} />).unmount();\n","import { Box, Text } from \"ink\";\nimport Gradient from \"ink-gradient\";\nimport { stdout } from \"process\";\nimport React, { useEffect, useState } from \"react\";\n\nexport const Logo: React.FC = () => {\n  const [columns, setColumns] = useState<number>(stdout.columns ?? 80);\n  const logo = columns >= 130 ? LOGO_LARGE : LOGO_SMALL;\n\n  useEffect(() => {\n    const handleResize = () => setColumns(stdout.columns ?? 80);\n    stdout.on(\"resize\", handleResize);\n\n    return () => {\n      stdout.off(\"resize\", handleResize);\n    };\n  }, []);\n\n  return (\n    <Box justifyContent=\"center\" marginBottom={5} marginTop={5}>\n      <Gradient name=\"rainbow\" key={logo}>\n        <Text>{logo}</Text>\n      </Gradient>\n    </Box>\n  );\n};\n\n// prettier-ignore\nconst LOGO_LARGE = `\n     **********                                                                                                                  \n   **************                                                                                                                \n ******************                                                                                                              \n********************                                                                                                             \n*********  *********                                                                                                             \n*********  *********          ****                                                 ***********                                   \n*********  *********          ****                                                 ***********                                   \n   ******  *********          ****        *************    ****  ******   *******       ****    ******    *** **   ******        \n ********  *********          ****      *********** ****  **** ********** *******      ****   *********** ****** **********      \n*********  ********           ****     ****    ****  ******** ***   ***** ****        ****   ****   ***** ****  ****    ****     \n*********  ******             ****     ****    ****   ******* ********    ****      *****    *********    ***   ****    ****     \n*********  *********          ********* ***********   ******   ********** ****     ********************** ***    **********  ****\n*********  *********          *********  **********    ****     ********  ****     ***********  ********  ***      *******   ****\n*********  *********                                 *****                                                                       \n********************                                 ****                                                                        \n ******************                                                                                                              \n  ****************                                                                                                               \n     **********                                                                                                                  \n\n`\n\n// prettier-ignore\nconst LOGO_SMALL = `\n     **********     \n   **************   \n ****************** \n********************\n*********  *********\n*********  *********\n*********  *********\n   ******  *********\n ********  *********\n*********  ******** \n*********  ******   \n*********  *********\n*********  *********\n*********  *********\n********************\n ****************** \n  ****************  \n     **********     \n\n`\n","import { Box, Text } from \"ink\";\nimport React from \"react\";\nimport type { PrimitiveValue } from \"./types\";\n\nexport type RecordData = Record<string, PrimitiveValue>;\n\nexport const RecordList: React.FC<{ data: RecordData[]; columns?: number }> = ({\n  data = [],\n  columns,\n}) => {\n  return (\n    <>\n      {data.map((row, index) => (\n        <Record data={row} columns={columns} key={index} />\n      ))}\n    </>\n  );\n};\n\nexport const Record: React.FC<{ data: RecordData; columns?: number }> = ({\n  data = {},\n  columns = process.stdout.columns ?? 80,\n}) => {\n  const padding = 1;\n  const labels = Object.keys(data);\n  const labelLengths = labels.map(({ length }) => length);\n  const maxLabelLength = Math.max(1, ...labelLengths);\n  const labelColumnWidth = maxLabelLength + 2 * padding;\n  const valueColumnWidth = Math.max(10, columns - labelColumnWidth);\n\n  return (\n    <Box\n      flexDirection=\"column\"\n      borderColor=\"grey\"\n      borderStyle=\"single\"\n      paddingX={1}\n    >\n      {Object.entries(data).map(([key, value]) => {\n        return (\n          <Box key={key}>\n            <Box width={labelColumnWidth}>\n              <Text bold wrap=\"truncate\" color=\"magenta\">\n                {key}\n              </Text>\n            </Box>\n\n            <Box width={valueColumnWidth}>\n              {value == null ? (\n                <Text wrap=\"wrap\" color=\"gray\">\n                  -\n                </Text>\n              ) : (\n                <Text wrap=\"wrap\">{String(value)}</Text>\n              )}\n            </Box>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport InkTable from \"ink-table\";\nimport type { PrimitiveValue } from \"./types\";\nimport { Text } from \"ink\";\n\nexport type TableRow = Record<string | number, PrimitiveValue>;\n\nexport const Table: React.FC<{ data: TableRow[] }> = ({ data }) => (\n  <InkTable\n    data={data as any}\n    header={({ children }) => (\n      <Text bold color=\"magenta\">\n        {children}\n      </Text>\n    )}\n  />\n);\n","import React from \"react\";\nimport { ProgressBar, ProgressBarProps } from \"./components/progress\";\n\n/**\n * Creates a ProgressBar React node.\n *\n * This is so that the consumers don't need to use JSX and/or React.createElement\n * and so that we can pass this node to e.g. instance.rerender() if a rendered ink component\n *\n * ```typescript\n * import { createProgressBar, render } from '@layerzerolabs/io-devtools/swag'\n *\n * const instance = render(createProgressBar())\n *\n * instance.rerender(createProgressBar({ progress: 0.5 }))\n * instance.clear()\n * ```\n *\n * @param {ProgressBarProps} props\n * @returns {React.ReactElement<ProgressBarProps>}\n */\nexport const createProgressBar = (\n  props: ProgressBarProps = {},\n): React.ReactElement<ProgressBarProps> => <ProgressBar {...props} />;\n\n/**\n * Re-export the render from ink so that we can use it without importing directly from ink\n */\nexport { render } from \"ink\";\n","import { Box, Text } from \"ink\";\nimport Gradient from \"ink-gradient\";\nimport React from \"react\";\n\nexport interface ProgressBarProps {\n  /**\n   * Progress of the task, between [0-1]\n   */\n  progress?: number;\n  /**\n   * Text to appear before the progressbar\n   */\n  before?: string;\n  /**\n   * Text to appear after the progressbar\n   */\n  after?: string;\n  /**\n   * Number of available columns\n   */\n  columns?: number;\n}\n\nexport const ProgressBar: React.FC<ProgressBarProps> = ({\n  columns = process.stdout.columns ?? 80,\n  progress = 0,\n  before = \"\",\n  after = \"\",\n}) => {\n  // First we calculate the available space\n  const padding = before.length + after.length;\n  const space = Math.max(0, columns - padding);\n\n  // Then we clamp the progress, just in case\n  const clampedProgress = Math.max(0, Math.min(1, progress));\n\n  // Then we calculate the amount of characters we need and put them together\n  const numChars = Math.min(Math.floor(space * clampedProgress), space);\n  const chars = CHARACTER.repeat(numChars);\n\n  // Then we calculate the amount of \"empty\" characters we need and put them together\n  const numEmptyChars = space - numChars;\n  const emptyChars = EMPTY_CHARACTER.repeat(numEmptyChars);\n\n  return (\n    <Box>\n      <Text>{before}</Text>\n\n      <Box alignItems=\"center\">\n        <Gradient name=\"rainbow\">\n          <Text>{chars}</Text>\n        </Gradient>\n\n        <Text>{emptyChars}</Text>\n      </Box>\n\n      <Text>{after}</Text>\n    </Box>\n  );\n};\n\nconst CHARACTER = \"█\";\nconst EMPTY_CHARACTER = \"░\";\n"]}