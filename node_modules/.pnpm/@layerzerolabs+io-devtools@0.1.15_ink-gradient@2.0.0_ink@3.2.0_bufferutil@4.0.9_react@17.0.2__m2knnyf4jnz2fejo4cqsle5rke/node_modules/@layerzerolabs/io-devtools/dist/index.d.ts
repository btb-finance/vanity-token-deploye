import * as winston from 'winston';
export { Logger } from 'winston';
import { z } from 'zod';
export { importDefault, isDirectory, isFile, isReadable } from './filesystem/index.js';
export { COLORS, CreateWithAsyncLoggerOptions, LogLevel, PromptOption, createLogger, createModuleInteractionLogger, createModuleLogger, createWithAsyncLogger, handlePromptState, isLogLevel, printBoolean, printCrossTable, printJson, printRecord, printZodErrors, promptForText, promptToContinue, promptToSelectMultiple, promptToSelectOne, setDefaultLogLevel } from './stdio/index.js';
import 'logform';
import 'chalk';

/**
 * Returns a promise that resolves after the specified number of milliseconds
 *
 * @param {number} timeout Nap time in milliseconds
 * @returns {Promise<void>}
 */
declare const sleep: (timeout: number) => Promise<void>;

/**
 * @deprecated Please use `createConfigLoadFlow` from `@layerzerolabs/devtools`
 */
declare const createConfigLoader: <TConfig>(schema: z.ZodSchema<TConfig, z.ZodTypeDef, unknown>, logger?: winston.Logger) => (path: string) => Promise<TConfig>;

/**
 * Turn a number into an ordinal.
 *
 * ```typescript
 * pluralizeOrdinal(7) // 7th
 * pluralizeOrdinal(1) // 1st
 * pluralizeOrdinal(19) // 19th
 * ```
 *
 * @param {number} n
 * @returns {string}
 */
declare const pluralizeOrdinal: (n: number) => string;
/**
 * Choose a correct form of a noun based on cardinality.
 *
 * ```typescript
 * pluralizeNoun(7, 'cat') // cats
 * pluralizeNoun(1, 'cat') // cat
 * pluralizeNoun(19, 'cactus', 'cacti') // cacti
 * ```
 *
 * @param {number} n
 * @param {string} singular The singular form of the english noun
 * @param {string} [plural] Plural version of the noun for irregular cases
 * @returns {string}
 */
declare const pluralizeNoun: (n: number, singular: string, plural?: string) => string;

export { createConfigLoader, pluralizeNoun, pluralizeOrdinal, sleep };
