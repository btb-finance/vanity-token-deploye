import { format, createLogger as createLogger$1, transports } from 'winston';
import { z } from 'zod';
import { lstatSync, accessSync, constants } from 'fs';

var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var LogLevel = /* @__PURE__ */ ((LogLevel2) => {
  LogLevel2["error"] = "error";
  LogLevel2["warn"] = "warn";
  LogLevel2["info"] = "info";
  LogLevel2["http"] = "http";
  LogLevel2["verbose"] = "verbose";
  LogLevel2["debug"] = "debug";
  LogLevel2["silly"] = "silly";
  return LogLevel2;
})(LogLevel || {});
z.nativeEnum(LogLevel);
var DEFAULT_LOG_LEVEL = "info" /* info */;
var createLogger = (level = DEFAULT_LOG_LEVEL, logFormat = format.cli()) => createLogger$1({
  level,
  format: logFormat,
  transports: [new transports.Console()]
});
var createModuleLogger = (module, level = DEFAULT_LOG_LEVEL) => createLogger(level, format.combine(prefix({ label: module }), format.cli()));
var prefix = format((info, { label }) => ({
  ...info,
  message: `${label ? `[${label}] ` : ""}${info.message}`
}));
var isDirectory = (path) => {
  try {
    return lstatSync(path).isDirectory();
  } catch (e) {
    return false;
  }
};
var isFile = (path) => {
  try {
    return lstatSync(path).isFile();
  } catch (e) {
    return false;
  }
};
var isReadable = (path) => {
  try {
    return accessSync(path, constants.R_OK), true;
  } catch (e) {
    return false;
  }
};
var importDefault = async (path) => {
  const logger = createModuleLogger("filesystem");
  try {
    logger.debug(`Importing default from '${path}' using dynamic import`);
    const result = await import(path);
    if (result != null && "default" in result) {
      return logger.debug(`Found default in '${path}' using dynamic import`), result.default;
    }
    return logger.debug(`Did not find default in '${path}' using dynamic import, returning the whole thing`), result;
  } catch (error) {
    logger.debug(`Failed to import from '${path}' using dynamic import: ${error}`);
  }
  try {
    logger.debug(`Importing default from '${path}' using require`);
    const result = await __require(path);
    if (result != null && result.__esModule) {
      return logger.debug(`Found default in '${path}' using require`), result.default;
    }
    return logger.debug(`Did not find default in '${path}' using require, returning the whole thing`), result;
  } catch (error) {
    logger.debug(`Failed to import from '${path}' using require: ${error}`);
    throw error;
  }
};

export { importDefault, isDirectory, isFile, isReadable };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.mjs.map