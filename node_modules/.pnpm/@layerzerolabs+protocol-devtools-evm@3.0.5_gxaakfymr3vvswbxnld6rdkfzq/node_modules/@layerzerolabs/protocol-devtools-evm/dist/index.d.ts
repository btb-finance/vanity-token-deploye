import { OmniSDK, Provider, ProviderFactory } from '@layerzerolabs/devtools-evm';
import { IDVN, DVNDstConfig, DVNFactory, IUln302, Uln302ConfigType, Uln302UlnConfig, Uln302UlnUserConfig, Uln302ExecutorConfig, Uln302Factory, IUlnRead, UlnReadUlnConfig, UlnReadUlnUserConfig, UlnReadFactory, IEndpointV2, Timeout, SetConfigParam, Uln302SetUlnConfig, UlnReadSetUlnConfig, Uln302SetExecutorConfig, MessageParams, MessagingFee, EndpointV2Factory, IExecutor, ExecutorDstConfig, ExecutorFactory, IPriceFeed, PriceData, PriceFeedFactory } from '@layerzerolabs/protocol-devtools';
import { EndpointId } from '@layerzerolabs/lz-definitions';
import { OmniPoint, OmniTransaction, OmniAddress } from '@layerzerolabs/devtools';
import * as _ethersproject_bignumber from '@ethersproject/bignumber';
import { BigNumberish } from '@ethersproject/bignumber';
import { z } from 'zod';

declare class DVN extends OmniSDK implements IDVN {
    constructor(provider: Provider, point: OmniPoint);
    getDstConfig(eid: EndpointId): Promise<DVNDstConfig>;
    setDstConfig(eid: EndpointId, value: DVNDstConfig): Promise<OmniTransaction>;
}

/**
 * Syntactic sugar that creates an instance of EVM `DVN` SDK
 * based on an `OmniPoint` with help of a `ProviderFactory`
 *
 * @param {ProviderFactory} providerFactory
 * @returns {DVNFactory<DVN>}
 */
declare const createDVNFactory: (providerFactory: ProviderFactory) => DVNFactory<DVN, OmniPoint>;

/**
 * Schema for parsing an ethers-specific DVN DstConfig into a common format
 */
declare const DVNDstConfigSchema: z.ZodObject<{
    gas: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    multiplierBps: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    floorMarginUSD: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
}, "strip", z.ZodTypeAny, {
    gas: bigint;
    multiplierBps: bigint;
    floorMarginUSD: bigint;
}, {
    gas: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    multiplierBps: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    floorMarginUSD: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
}>;

declare class Uln302 extends OmniSDK implements IUln302 {
    constructor(provider: Provider, point: OmniPoint);
    /**
     * @see {@link IUln302.getUlnConfig}
     */
    getUlnConfig(eid: EndpointId, address: OmniAddress | null | undefined, type: Uln302ConfigType): Promise<Uln302UlnConfig>;
    /**
     * @see {@link IUln302.getAppUlnConfig}
     */
    getAppUlnConfig(eid: EndpointId, address: OmniAddress, type: Uln302ConfigType): Promise<Uln302UlnConfig>;
    /**
     * @see {@link IUln302.hasAppUlnConfig}
     */
    hasAppUlnConfig(eid: EndpointId, oapp: string, config: Uln302UlnUserConfig, type: Uln302ConfigType): Promise<boolean>;
    /**
     * @see {@link IUln302.getExecutorConfig}
     */
    getExecutorConfig(eid: EndpointId, address?: OmniAddress | null | undefined): Promise<Uln302ExecutorConfig>;
    /**
     * @see {@link IUln302.getAppExecutorConfig}
     */
    getAppExecutorConfig(eid: EndpointId, address: OmniAddress): Promise<Uln302ExecutorConfig>;
    /**
     * @see {@link IUln302.hasAppExecutorConfig}
     */
    hasAppExecutorConfig(eid: EndpointId, oapp: OmniAddress, config: Uln302ExecutorConfig): Promise<boolean>;
    /**
     * @see {@link IUln302.setDefaultExecutorConfig}
     */
    setDefaultExecutorConfig(eid: EndpointId, config: Uln302ExecutorConfig): Promise<OmniTransaction>;
    decodeExecutorConfig(executorConfigBytes: string): Uln302ExecutorConfig;
    encodeExecutorConfig(config: Uln302ExecutorConfig): string;
    decodeUlnConfig(ulnConfigBytes: string): Uln302UlnConfig;
    encodeUlnConfig(config: Uln302UlnUserConfig): string;
    setDefaultUlnConfig(eid: EndpointId, config: Uln302UlnUserConfig): Promise<OmniTransaction>;
    /**
     * Prepares the ULN config to be sent to the contract
     *
     * This involves adding two properties that are required by the EVM
     * contracts (for optimization purposes) but don't need to be present
     * in our configuration and ensuring correct checksum on the DVN addresses.
     *
     * @param {Uln302UlnUserConfig} config
     * @returns {SerializedUln302UlnConfig}
     */
    protected serializeUlnConfig({ confirmations, requiredDVNs, optionalDVNs, optionalDVNThreshold, }: Uln302UlnUserConfig): SerializedUln302UlnConfig;
    /**
     * Prepares the Executor config to be sent to the contract
     *
     * @param {Uln302ExecutorConfig} config
     * @returns {SerializedUln302ExecutorConfig}
     */
    protected serializeExecutorConfig({ maxMessageSize, executor, }: Uln302ExecutorConfig): SerializedUln302ExecutorConfig;
}
/**
 * Helper type that matches the expected UlnConfig type for the solicity implementation
 */
interface SerializedUln302UlnConfig extends Uln302UlnConfig {
    requiredDVNCount: number;
    optionalDVNCount: number;
}
/**
 * For reasons of symmetry we'll add a type for serialized `Uln302ExecutorConfig`,
 * even though it totally matches the `Uln302ExecutorConfig` type
 */
type SerializedUln302ExecutorConfig = Uln302ExecutorConfig;

/**
 * Syntactic sugar that creates an instance of EVM `Uln302` SDK
 * based on an `OmniPoint` with help of an `OmniContractFactory`
 *
 * @param {ProviderFactory} providerFactory
 * @returns {Uln302Factory<Uln302>}
 */
declare const createUln302Factory: (providerFactory: ProviderFactory) => Uln302Factory<Uln302, OmniPoint>;

interface Uln302UlnConfigInput extends Omit<Uln302UlnConfig, 'confirmations'> {
    confirmations: BigNumberish;
}
interface Uln302ExecutorConfigInput extends Omit<Uln302ExecutorConfig, 'maxMessageSize'> {
    maxMessageSize: BigNumberish;
}

declare class UlnRead extends OmniSDK implements IUlnRead {
    constructor(provider: Provider, point: OmniPoint);
    /**
     * @see {@link IUlnRead.getUlnConfig}
     */
    getUlnConfig(channelId: number, address: OmniAddress | null | undefined): Promise<UlnReadUlnConfig>;
    /**
     * @see {@link IUlnRead.getAppUlnConfig}
     */
    getAppUlnConfig(channelId: number, address: OmniAddress): Promise<UlnReadUlnConfig>;
    /**
     * @see {@link IUlnRead.hasAppUlnConfig}
     */
    hasAppUlnConfig(channelId: number, oapp: string, config: UlnReadUlnUserConfig): Promise<boolean>;
    decodeUlnConfig(ulnConfigBytes: string): UlnReadUlnConfig;
    encodeUlnConfig(config: UlnReadUlnUserConfig): string;
    setDefaultUlnConfig(channelId: number, config: UlnReadUlnUserConfig): Promise<OmniTransaction>;
    /**
     * Prepares the ULN config to be sent to the contract
     *
     * This involves adding two properties that are required by the EVM
     * contracts (for optimization purposes) but don't need to be present
     * in our configuration and ensuring correct checksum on the DVN addresses.
     *
     * @param {UlnReadUlnUserConfig} config
     * @returns {SerializedUlnReadUlnConfig}
     */
    protected serializeUlnConfig({ requiredDVNs, optionalDVNs, optionalDVNThreshold, executor, }: UlnReadUlnUserConfig): SerializedUlnReadUlnConfig;
}
/**
 * Helper type that matches the expected UlnConfig type for the solicity implementation
 */
interface SerializedUlnReadUlnConfig extends UlnReadUlnConfig {
    requiredDVNCount: number;
    optionalDVNCount: number;
}

/**
 * Syntactic sugar that creates an instance of EVM `UlnRead` SDK
 * based on an `OmniPoint` with help of an `OmniContractFactory`
 *
 * @param {ProviderFactory} providerFactory
 * @returns {UlnReadFactory<UlnRead>}
 */
declare const createUlnReadFactory: (providerFactory: ProviderFactory) => UlnReadFactory<UlnRead, OmniPoint>;

/**
 * EVM-specific SDK for EndpointV2 contracts
 *
 * @implements {IEndpointV2}
 */
declare class EndpointV2 extends OmniSDK implements IEndpointV2 {
    constructor(provider: Provider, point: OmniPoint);
    getDelegate(oapp: OmniAddress): Promise<OmniAddress | undefined>;
    isDelegate(oapp: OmniAddress, delegate: OmniAddress): Promise<boolean>;
    getUln302SDK(address: OmniAddress): Promise<Uln302>;
    getUlnReadSDK(address: OmniAddress): Promise<UlnRead>;
    getDefaultReceiveLibrary(eid: EndpointId): Promise<OmniAddress | undefined>;
    getSendLibrary(sender: OmniAddress, dstEid: EndpointId): Promise<OmniAddress | undefined>;
    getReceiveLibrary(receiver: OmniAddress, srcEid: EndpointId): Promise<[address: OmniAddress | undefined, isDefault: boolean]>;
    setDefaultReceiveLibrary(eid: EndpointId, uln: OmniAddress | null | undefined, gracePeriod?: bigint): Promise<OmniTransaction>;
    getDefaultSendLibrary(eid: EndpointId): Promise<OmniAddress | undefined>;
    isDefaultSendLibrary(sender: OmniAddress, dstEid: EndpointId): Promise<boolean>;
    setDefaultSendLibrary(eid: EndpointId, uln: OmniAddress | null | undefined): Promise<OmniTransaction>;
    setSendLibrary(oapp: OmniAddress, eid: EndpointId, uln: OmniAddress | null | undefined): Promise<OmniTransaction>;
    setReceiveLibrary(oapp: OmniAddress, eid: EndpointId, uln: OmniAddress | null | undefined, gracePeriod: bigint): Promise<OmniTransaction>;
    getReceiveLibraryTimeout(receiver: OmniAddress, srcEid: EndpointId): Promise<Timeout>;
    getDefaultReceiveLibraryTimeout(eid: EndpointId): Promise<Timeout>;
    setReceiveLibraryTimeout(oapp: OmniAddress, eid: EndpointId, uln: OmniAddress | null | undefined, expiry: bigint): Promise<OmniTransaction>;
    setConfig(oapp: OmniAddress, uln: OmniAddress, setConfigParam: SetConfigParam[]): Promise<OmniTransaction[]>;
    setUlnConfig(oapp: OmniAddress, uln: OmniAddress, setUlnConfig: Uln302SetUlnConfig[]): Promise<OmniTransaction[]>;
    setUlnReadConfig(oapp: OmniAddress, uln: OmniAddress, setUlnConfig: UlnReadSetUlnConfig[]): Promise<OmniTransaction[]>;
    setExecutorConfig(oapp: OmniAddress, uln: OmniAddress, setExecutorConfig: Uln302SetExecutorConfig[]): Promise<OmniTransaction[]>;
    getExecutorConfig(oapp: OmniAddress, uln: OmniAddress, eid: EndpointId): Promise<Uln302ExecutorConfig>;
    getAppExecutorConfig(oapp: OmniAddress, uln: OmniAddress, eid: EndpointId): Promise<Uln302ExecutorConfig>;
    /**
     * @see {@link IEndpointV2.hasAppExecutorConfig}
     */
    hasAppExecutorConfig(oapp: OmniAddress, uln: OmniAddress, eid: EndpointId, config: Uln302ExecutorConfig): Promise<boolean>;
    /**
     * @see {@link IEndpointV2.getUlnConfig}
     */
    getUlnConfig(oapp: OmniAddress, uln: OmniAddress, eid: EndpointId, type: Uln302ConfigType): Promise<Uln302UlnConfig>;
    /**
     * @see {@link IEndpointV2.getAppUlnConfig}
     */
    getAppUlnConfig(oapp: OmniAddress, uln: OmniAddress, eid: EndpointId, type: Uln302ConfigType): Promise<Uln302UlnConfig>;
    /**
     * @see {@link IEndpointV2.getAppUlnReadConfig}
     */
    getAppUlnReadConfig(oapp: OmniAddress, uln: OmniAddress, channelId: number): Promise<UlnReadUlnConfig>;
    /**
     * @see {@link IEndpointV2.hasAppUlnConfig}
     */
    hasAppUlnConfig(oapp: string, uln: OmniAddress, eid: EndpointId, config: Uln302UlnUserConfig, type: Uln302ConfigType): Promise<boolean>;
    /**
     * @see {@link IEndpointV2.hasAppUlnReadConfig}
     */
    hasAppUlnReadConfig(oapp: string, uln: OmniAddress, channelId: number, config: UlnReadUlnUserConfig): Promise<boolean>;
    isRegisteredLibrary(uln: OmniAddress): Promise<boolean>;
    registerLibrary(uln: OmniAddress): Promise<OmniTransaction>;
    quote(params: MessageParams, sender: OmniAddress): Promise<MessagingFee>;
    getUlnConfigParams(uln: OmniAddress, setUlnConfig: Uln302SetUlnConfig[]): Promise<SetConfigParam[]>;
    getUlnReadConfigParams(uln: OmniAddress, setUlnConfig: UlnReadSetUlnConfig[]): Promise<SetConfigParam[]>;
    getExecutorConfigParams(uln: OmniAddress, setExecutorConfig: Uln302SetExecutorConfig[]): Promise<SetConfigParam[]>;
}

/**
 * Syntactic sugar that creates an instance of EVM `Endpoint` SDK
 * based on an `OmniPoint` with help of an `OmniContractFactory`
 *
 * @param {ProviderFactory} providerFactory
 * @returns {EndpointV2Factory<EndpointV2>}
 */
declare const createEndpointV2Factory: (providerFactory: ProviderFactory) => EndpointV2Factory<EndpointV2, OmniPoint>;

declare class Executor extends OmniSDK implements IExecutor {
    constructor(provider: Provider, point: OmniPoint);
    getDstConfig(eid: EndpointId): Promise<ExecutorDstConfig>;
    setDstConfig(eid: EndpointId, value: ExecutorDstConfig): Promise<OmniTransaction>;
    private serializeExecutorConfig;
}

/**
 * Syntactic sugar that creates an instance of EVM `Executor` SDK
 * based on an `OmniPoint` with help of a `ProviderFactory`
 *
 * @param {ProviderFactory} providerFactory
 * @returns {ExecutorFactory<Executor>}
 */
declare const createExecutorFactory: (providerFactory: ProviderFactory) => ExecutorFactory<Executor, OmniPoint>;

/**
 * Schema for parsing an ethers-specific ExecutorDstConfig into a common format
 */
declare const ExecutorDstConfigPre2_1_27Schema: z.ZodObject<{
    baseGas: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    multiplierBps: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    floorMarginUSD: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    nativeCap: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
}, "strip", z.ZodTypeAny, {
    multiplierBps: bigint;
    floorMarginUSD: bigint;
    baseGas: bigint;
    nativeCap: bigint;
}, {
    multiplierBps: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    floorMarginUSD: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    baseGas: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    nativeCap: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
}>;
/**
 * Schema for parsing an ethers-specific ExecutorDstConfig into a common format
 */
declare const ExecutorDstConfigPost2_1_27Schema: z.ZodObject<{
    lzComposeBaseGas: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    lzReceiveBaseGas: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    multiplierBps: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    floorMarginUSD: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    nativeCap: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
}, "strip", z.ZodTypeAny, {
    multiplierBps: bigint;
    floorMarginUSD: bigint;
    nativeCap: bigint;
    lzComposeBaseGas: bigint;
    lzReceiveBaseGas: bigint;
}, {
    multiplierBps: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    floorMarginUSD: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    nativeCap: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    lzComposeBaseGas: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    lzReceiveBaseGas: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
}>;
declare const ExecutorDstConfigSchema: z.ZodUnion<[z.ZodObject<{
    baseGas: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    multiplierBps: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    floorMarginUSD: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    nativeCap: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
}, "strip", z.ZodTypeAny, {
    multiplierBps: bigint;
    floorMarginUSD: bigint;
    baseGas: bigint;
    nativeCap: bigint;
}, {
    multiplierBps: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    floorMarginUSD: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    baseGas: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    nativeCap: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
}>, z.ZodObject<{
    lzComposeBaseGas: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    lzReceiveBaseGas: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    multiplierBps: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    floorMarginUSD: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    nativeCap: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
}, "strip", z.ZodTypeAny, {
    multiplierBps: bigint;
    floorMarginUSD: bigint;
    nativeCap: bigint;
    lzComposeBaseGas: bigint;
    lzReceiveBaseGas: bigint;
}, {
    multiplierBps: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    floorMarginUSD: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    nativeCap: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    lzComposeBaseGas: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    lzReceiveBaseGas: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
}>]>;

declare class PriceFeed extends OmniSDK implements IPriceFeed {
    constructor(provider: Provider, point: OmniPoint);
    getPrice(eid: EndpointId): Promise<PriceData>;
    setPrice(eid: EndpointId, priceData: PriceData): Promise<OmniTransaction>;
}

/**
 * Syntactic sugar that creates an instance of EVM `PriceFeed` SDK
 * based on an `OmniPoint` with help of an `OmniContractFactory`
 *
 * @param {ProviderFactory} providerFactory
 * @returns {PriceFeedFactory<PriceFeed>}
 */
declare const createPriceFeedFactory: (providerFactory: ProviderFactory) => PriceFeedFactory<PriceFeed, OmniPoint>;

/**
 * Schema for parsing an ethers-specific PriceData into a common format
 */
declare const PriceDataSchema: z.ZodObject<{
    priceRatio: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    gasPriceInUnit: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
    gasPerByte: z.ZodEffects<z.ZodEffects<z.ZodType<_ethersproject_bignumber.BigNumberish, z.ZodTypeDef, _ethersproject_bignumber.BigNumberish>, _ethersproject_bignumber.BigNumber, _ethersproject_bignumber.BigNumberish>, bigint, _ethersproject_bignumber.BigNumberish>;
}, "strip", z.ZodTypeAny, {
    priceRatio: bigint;
    gasPriceInUnit: bigint;
    gasPerByte: bigint;
}, {
    priceRatio: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    gasPriceInUnit: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
    gasPerByte: _ethersproject_bignumber.BigNumberish & (_ethersproject_bignumber.BigNumberish | undefined);
}>;

export { DVN, DVNDstConfigSchema, EndpointV2, Executor, ExecutorDstConfigPost2_1_27Schema, ExecutorDstConfigPre2_1_27Schema, ExecutorDstConfigSchema, PriceDataSchema, PriceFeed, Uln302, type Uln302ExecutorConfigInput, type Uln302UlnConfigInput, UlnRead, createDVNFactory, createEndpointV2Factory, createExecutorFactory, createPriceFeedFactory, createUln302Factory, createUlnReadFactory };
