'use strict';

var pMemoize = require('p-memoize');
var devtools = require('@layerzerolabs/devtools');
var devtoolsEvm = require('@layerzerolabs/devtools-evm');
var ioDevtools = require('@layerzerolabs/io-devtools');
var protocolDevtools = require('@layerzerolabs/protocol-devtools');
var contracts = require('@ethersproject/contracts');
var assert = require('assert');
var zod = require('zod');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var pMemoize__default = /*#__PURE__*/_interopDefault(pMemoize);
var assert__default = /*#__PURE__*/_interopDefault(assert);

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
var DVNDstConfigSchema = protocolDevtools.DVNDstConfigSchema.extend({
  gas: devtoolsEvm.BigNumberishBigIntSchema,
  multiplierBps: devtoolsEvm.BigNumberishBigIntSchema,
  floorMarginUSD: devtoolsEvm.BigNumberishBigIntSchema
});

// ../../node_modules/.pnpm/@layerzerolabs+lz-evm-sdk-v2@3.0.22/node_modules/@layerzerolabs/lz-evm-sdk-v2/artifacts/contracts/uln/dvn/DVN.sol/DVN.json
var abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_localEidV2",
        type: "uint32"
      },
      {
        internalType: "uint32",
        name: "_vid",
        type: "uint32"
      },
      {
        internalType: "address[]",
        name: "_messageLibs",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address"
      },
      {
        internalType: "address[]",
        name: "_signers",
        type: "address[]"
      },
      {
        internalType: "uint64",
        name: "_quorum",
        type: "uint64"
      },
      {
        internalType: "address[]",
        name: "_admins",
        type: "address[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "executableHash",
        type: "bytes32"
      }
    ],
    name: "DVN_DuplicatedHash",
    type: "error"
  },
  {
    inputs: [],
    name: "DVN_InstructionExpired",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      }
    ],
    name: "DVN_InvalidRole",
    type: "error"
  },
  {
    inputs: [],
    name: "DVN_InvalidSignatures",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address"
      }
    ],
    name: "DVN_InvalidTarget",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "vid",
        type: "uint32"
      }
    ],
    name: "DVN_InvalidVid",
    type: "error"
  },
  {
    inputs: [],
    name: "DVN_OnlySelf",
    type: "error"
  },
  {
    inputs: [],
    name: "MultiSig_InvalidSigner",
    type: "error"
  },
  {
    inputs: [],
    name: "MultiSig_OnlySigner",
    type: "error"
  },
  {
    inputs: [],
    name: "MultiSig_QuorumIsZero",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "signersSize",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "quorum",
        type: "uint64"
      }
    ],
    name: "MultiSig_SignersSizeIsLessThanQuorum",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address"
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool"
      }
    ],
    name: "MultiSig_StateAlreadySet",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address"
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool"
      }
    ],
    name: "MultiSig_StateNotSet",
    type: "error"
  },
  {
    inputs: [],
    name: "MultiSig_UnorderedSigners",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      }
    ],
    name: "Transfer_NativeFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "Transfer_ToAddressIsZero",
    type: "error"
  },
  {
    inputs: [],
    name: "Worker_NotAllowed",
    type: "error"
  },
  {
    inputs: [],
    name: "Worker_OnlyMessageLib",
    type: "error"
  },
  {
    inputs: [],
    name: "Worker_RoleRenouncingDisabled",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "ExecuteFailed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "vid",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "expiration",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct ExecuteParam",
        name: "param",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32"
      }
    ],
    name: "HashAlreadyUsed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "previousAdminRole",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "newAdminRole",
        type: "bytes32"
      }
    ],
    name: "RoleAdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleGranted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleRevoked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint16",
        name: "multiplierBps",
        type: "uint16"
      }
    ],
    name: "SetDefaultMultiplierBps",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "gas",
            type: "uint64"
          },
          {
            internalType: "uint16",
            name: "multiplierBps",
            type: "uint16"
          },
          {
            internalType: "uint128",
            name: "floorMarginUSD",
            type: "uint128"
          }
        ],
        indexed: false,
        internalType: "struct IDVN.DstConfigParam[]",
        name: "params",
        type: "tuple[]"
      }
    ],
    name: "SetDstConfig",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "priceFeed",
        type: "address"
      }
    ],
    name: "SetPriceFeed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "dstEid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint8[]",
        name: "optionTypes",
        type: "uint8[]"
      }
    ],
    name: "SetSupportedOptionTypes",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "workerLib",
        type: "address"
      }
    ],
    name: "SetWorkerLib",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "_quorum",
        type: "uint64"
      }
    ],
    name: "UpdateQuorum",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_signer",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_active",
        type: "bool"
      }
    ],
    name: "UpdateSigner",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "VerifierFeePaid",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "idx",
        type: "uint256"
      }
    ],
    name: "VerifySignaturesFailed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "lib",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "allowlistSize",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "bytes",
            name: "packetHeader",
            type: "bytes"
          },
          {
            internalType: "bytes32",
            name: "payloadHash",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "confirmations",
            type: "uint64"
          },
          {
            internalType: "address",
            name: "sender",
            type: "address"
          }
        ],
        internalType: "struct ILayerZeroDVN.AssignJobParam",
        name: "_param",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      }
    ],
    name: "assignJob",
    outputs: [
      {
        internalType: "uint256",
        name: "totalFee",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_dstEid",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16"
      },
      {
        internalType: "uint64",
        name: "_confirmations",
        type: "uint64"
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      }
    ],
    name: "assignJob",
    outputs: [
      {
        internalType: "uint256",
        name: "totalFee",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_cmd",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      }
    ],
    name: "assignJob",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "defaultMultiplierBps",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "dstEid",
        type: "uint32"
      }
    ],
    name: "dstConfig",
    outputs: [
      {
        internalType: "uint64",
        name: "gas",
        type: "uint64"
      },
      {
        internalType: "uint16",
        name: "multiplierBps",
        type: "uint16"
      },
      {
        internalType: "uint128",
        name: "floorMarginUSD",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "vid",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "expiration",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        internalType: "struct ExecuteParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      },
      {
        internalType: "uint64",
        name: "_confirmations",
        type: "uint64"
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      }
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_dstEid",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16"
      },
      {
        internalType: "uint64",
        name: "_confirmations",
        type: "uint64"
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      }
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_cmd",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      }
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      }
    ],
    name: "getRoleAdmin",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getSigners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      }
    ],
    name: "getSupportedOptionTypes",
    outputs: [
      {
        internalType: "uint8[]",
        name: "",
        type: "uint8[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      }
    ],
    name: "hasAcl",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "hasRole",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_vid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_target",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_callData",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "_expiration",
        type: "uint256"
      }
    ],
    name: "hashCallData",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address"
      }
    ],
    name: "isSigner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "localEidV2",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "quorum",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "vid",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "expiration",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "signatures",
            type: "bytes"
          }
        ],
        internalType: "struct ExecuteParam",
        name: "_param",
        type: "tuple"
      }
    ],
    name: "quorumChangeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_account",
        type: "address"
      }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_multiplierBps",
        type: "uint16"
      }
    ],
    name: "setDefaultMultiplierBps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "gas",
            type: "uint64"
          },
          {
            internalType: "uint16",
            name: "multiplierBps",
            type: "uint16"
          },
          {
            internalType: "uint128",
            name: "floorMarginUSD",
            type: "uint128"
          }
        ],
        internalType: "struct IDVN.DstConfigParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setDstConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_paused",
        type: "bool"
      }
    ],
    name: "setPaused",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address"
      }
    ],
    name: "setPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_quorum",
        type: "uint64"
      }
    ],
    name: "setQuorum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address"
      },
      {
        internalType: "bool",
        name: "_active",
        type: "bool"
      }
    ],
    name: "setSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "uint8[]",
        name: "_optionTypes",
        type: "uint8[]"
      }
    ],
    name: "setSupportedOptionTypes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_workerFeeLib",
        type: "address"
      }
    ],
    name: "setWorkerFeeLib",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "signerSize",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address"
      }
    ],
    name: "signers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "executableHash",
        type: "bytes32"
      }
    ],
    name: "usedHashes",
    outputs: [
      {
        internalType: "bool",
        name: "used",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_signatures",
        type: "bytes"
      }
    ],
    name: "verifySignatures",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      },
      {
        internalType: "enum MultiSig.Errors",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "vid",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lib",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lib",
        type: "address"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawFeeFromUlnV2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "workerFeeLib",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var DVN = class extends devtoolsEvm.OmniSDK {
  constructor(provider, point) {
    super({ eid: point.eid, contract: new contracts.Contract(point.address, abi).connect(provider) });
  }
  async getDstConfig(eid) {
    const config = await this.contract.contract.dstConfig(eid);
    return DVNDstConfigSchema.parse({ ...config });
  }
  async setDstConfig(eid, value) {
    const data = this.contract.contract.interface.encodeFunctionData("setDstConfig", [
      [
        {
          dstEid: eid,
          gas: value.gas,
          multiplierBps: value.multiplierBps,
          floorMarginUSD: value.floorMarginUSD
        }
      ]
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting dstConfig for ${devtools.formatEid(eid)}: ${ioDevtools.printJson(value)}`
    };
  }
};

// src/dvn/factory.ts
var createDVNFactory = (providerFactory) => pMemoize__default.default(async (point) => new DVN(await providerFactory(point.eid), point));
var Uln302UlnConfigSchema = protocolDevtools.Uln302UlnConfigSchema.extend({
  confirmations: devtoolsEvm.BigNumberishBigIntSchema
});
var Uln302ExecutorConfigSchema = protocolDevtools.Uln302ExecutorConfigSchema.extend({
  maxMessageSize: devtoolsEvm.BigNumberishNumberSchema
});

// ../../node_modules/.pnpm/@layerzerolabs+lz-evm-sdk-v2@3.0.22/node_modules/@layerzerolabs/lz-evm-sdk-v2/artifacts/contracts/uln/uln302/SendUln302.sol/SendUln302.json
var abi2 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_endpoint",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_treasuryGasLimit",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_treasuryGasForFeeCap",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "DVN_InvalidDVNIdx",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256"
      }
    ],
    name: "DVN_InvalidDVNOptions",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_MessageLib_CannotWithdrawAltToken",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256"
      }
    ],
    name: "LZ_MessageLib_InvalidAmount",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_MessageLib_InvalidExecutor",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256"
      }
    ],
    name: "LZ_MessageLib_InvalidMessageSize",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_MessageLib_NotTreasury",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_MessageLib_OnlyEndpoint",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_MessageLib_TransferFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_MessageLib_ZeroMessageSize",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_AtLeastOneDVN",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "configType",
        type: "uint32"
      }
    ],
    name: "LZ_ULN_InvalidConfigType",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidConfirmations",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidLegacyType1Option",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidLegacyType2Option",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidOptionalDVNCount",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidOptionalDVNThreshold",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidRequiredDVNCount",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "workerId",
        type: "uint8"
      }
    ],
    name: "LZ_ULN_InvalidWorkerId",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256"
      }
    ],
    name: "LZ_ULN_InvalidWorkerOptions",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_Unsorted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      }
    ],
    name: "LZ_ULN_UnsupportedEid",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "optionType",
        type: "uint16"
      }
    ],
    name: "LZ_ULN_UnsupportedOptionType",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      }
    ],
    name: "Transfer_NativeFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "Transfer_ToAddressIsZero",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "requiredDVNs",
        type: "address[]"
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "optionalDVNs",
        type: "address[]"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "fees",
        type: "uint256[]"
      }
    ],
    name: "DVNFeePaid",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "maxMessageSize",
                type: "uint32"
              },
              {
                internalType: "address",
                name: "executor",
                type: "address"
              }
            ],
            internalType: "struct ExecutorConfig",
            name: "config",
            type: "tuple"
          }
        ],
        indexed: false,
        internalType: "struct SetDefaultExecutorConfigParam[]",
        name: "params",
        type: "tuple[]"
      }
    ],
    name: "DefaultExecutorConfigsSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "confirmations",
                type: "uint64"
              },
              {
                internalType: "uint8",
                name: "requiredDVNCount",
                type: "uint8"
              },
              {
                internalType: "uint8",
                name: "optionalDVNCount",
                type: "uint8"
              },
              {
                internalType: "uint8",
                name: "optionalDVNThreshold",
                type: "uint8"
              },
              {
                internalType: "address[]",
                name: "requiredDVNs",
                type: "address[]"
              },
              {
                internalType: "address[]",
                name: "optionalDVNs",
                type: "address[]"
              }
            ],
            internalType: "struct UlnConfig",
            name: "config",
            type: "tuple"
          }
        ],
        indexed: false,
        internalType: "struct SetDefaultUlnConfigParam[]",
        name: "params",
        type: "tuple[]"
      }
    ],
    name: "DefaultUlnConfigsSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oapp",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "maxMessageSize",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "executor",
            type: "address"
          }
        ],
        indexed: false,
        internalType: "struct ExecutorConfig",
        name: "config",
        type: "tuple"
      }
    ],
    name: "ExecutorConfigSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "executor",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "ExecutorFeePaid",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "lzToken",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "LzTokenFeeWithdrawn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "worker",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "NativeFeeWithdrawn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newTreasuryNativeFeeCap",
        type: "uint256"
      }
    ],
    name: "TreasuryNativeFeeCapSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "treasury",
        type: "address"
      }
    ],
    name: "TreasurySet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oapp",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "confirmations",
            type: "uint64"
          },
          {
            internalType: "uint8",
            name: "requiredDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNThreshold",
            type: "uint8"
          },
          {
            internalType: "address[]",
            name: "requiredDVNs",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "optionalDVNs",
            type: "address[]"
          }
        ],
        indexed: false,
        internalType: "struct UlnConfig",
        name: "config",
        type: "tuple"
      }
    ],
    name: "UlnConfigSet",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      }
    ],
    name: "executorConfigs",
    outputs: [
      {
        internalType: "uint32",
        name: "maxMessageSize",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "executor",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "worker",
        type: "address"
      }
    ],
    name: "fees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_remoteEid",
        type: "uint32"
      }
    ],
    name: "getAppUlnConfig",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "confirmations",
            type: "uint64"
          },
          {
            internalType: "uint8",
            name: "requiredDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNThreshold",
            type: "uint8"
          },
          {
            internalType: "address[]",
            name: "requiredDVNs",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "optionalDVNs",
            type: "address[]"
          }
        ],
        internalType: "struct UlnConfig",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_configType",
        type: "uint32"
      }
    ],
    name: "getConfig",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_remoteEid",
        type: "uint32"
      }
    ],
    name: "getExecutorConfig",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "maxMessageSize",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "executor",
            type: "address"
          }
        ],
        internalType: "struct ExecutorConfig",
        name: "rtnConfig",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_remoteEid",
        type: "uint32"
      }
    ],
    name: "getUlnConfig",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "confirmations",
            type: "uint64"
          },
          {
            internalType: "uint8",
            name: "requiredDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNThreshold",
            type: "uint8"
          },
          {
            internalType: "address[]",
            name: "requiredDVNs",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "optionalDVNs",
            type: "address[]"
          }
        ],
        internalType: "struct UlnConfig",
        name: "rtnConfig",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      }
    ],
    name: "isSupportedEid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "messageLibType",
    outputs: [
      {
        internalType: "enum MessageLibType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          },
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "receiver",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "guid",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        internalType: "struct Packet",
        name: "_packet",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      },
      {
        internalType: "bool",
        name: "_payInLzToken",
        type: "bool"
      }
    ],
    name: "quote",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nativeFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "lzTokenFee",
            type: "uint256"
          }
        ],
        internalType: "struct MessagingFee",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          },
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "receiver",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "guid",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        internalType: "struct Packet",
        name: "_packet",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      },
      {
        internalType: "bool",
        name: "_payInLzToken",
        type: "bool"
      }
    ],
    name: "send",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nativeFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "lzTokenFee",
            type: "uint256"
          }
        ],
        internalType: "struct MessagingFee",
        name: "",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "configType",
            type: "uint32"
          },
          {
            internalType: "bytes",
            name: "config",
            type: "bytes"
          }
        ],
        internalType: "struct SetConfigParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "maxMessageSize",
                type: "uint32"
              },
              {
                internalType: "address",
                name: "executor",
                type: "address"
              }
            ],
            internalType: "struct ExecutorConfig",
            name: "config",
            type: "tuple"
          }
        ],
        internalType: "struct SetDefaultExecutorConfigParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setDefaultExecutorConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "confirmations",
                type: "uint64"
              },
              {
                internalType: "uint8",
                name: "requiredDVNCount",
                type: "uint8"
              },
              {
                internalType: "uint8",
                name: "optionalDVNCount",
                type: "uint8"
              },
              {
                internalType: "uint8",
                name: "optionalDVNThreshold",
                type: "uint8"
              },
              {
                internalType: "address[]",
                name: "requiredDVNs",
                type: "address[]"
              },
              {
                internalType: "address[]",
                name: "optionalDVNs",
                type: "address[]"
              }
            ],
            internalType: "struct UlnConfig",
            name: "config",
            type: "tuple"
          }
        ],
        internalType: "struct SetDefaultUlnConfigParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setDefaultUlnConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_treasury",
        type: "address"
      }
    ],
    name: "setTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newTreasuryNativeFeeCap",
        type: "uint256"
      }
    ],
    name: "setTreasuryNativeFeeCap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint64",
        name: "major",
        type: "uint64"
      },
      {
        internalType: "uint8",
        name: "minor",
        type: "uint8"
      },
      {
        internalType: "uint8",
        name: "endpointVersion",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lzToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawLzTokenFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];

// src/uln302/sdk.ts
var Uln302 = class extends devtoolsEvm.OmniSDK {
  constructor(provider, point) {
    super({ eid: point.eid, contract: new contracts.Contract(point.address, abi2).connect(provider) });
  }
  async getUlnConfig(eid, address, type) {
    this.logger.debug(
      `Getting ULN ${type} config for eid ${eid} (${devtools.formatEid(eid)}) and address ${devtoolsEvm.makeZeroAddress(address)}`
    );
    const config = await this.contract.contract.getUlnConfig(devtoolsEvm.makeZeroAddress(address), eid);
    return Uln302UlnConfigSchema.parse({ ...config });
  }
  async getAppUlnConfig(eid, address, type) {
    this.logger.verbose(
      `Getting App ULN ${type} config for eid ${eid} (${devtools.formatEid(eid)}) and address ${devtoolsEvm.makeZeroAddress(address)}`
    );
    if (devtools.isZero(address)) {
      this.logger.warn(
        `Getting App ULN ${type} config for eid ${eid} (${devtools.formatEid(eid)}): Passed in OApp address is zero. This will request the default config.`
      );
    }
    const config = await this.contract.contract.getAppUlnConfig(devtoolsEvm.makeZeroAddress(address), eid);
    return Uln302UlnConfigSchema.parse({ ...config });
  }
  /**
   * @see {@link IUln302.hasAppUlnConfig}
   */
  async hasAppUlnConfig(eid, oapp, config, type) {
    this.logger.verbose(
      `Checking whether ULN ${type} configs for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} match`
    );
    const currentConfig = await this.getAppUlnConfig(eid, oapp, type);
    const currentSerializedConfig = this.serializeUlnConfig(currentConfig);
    const serializedConfig = this.serializeUlnConfig(config);
    this.logger.debug(`Current ULN ${type} config: ${ioDevtools.printJson(currentSerializedConfig)}`);
    this.logger.debug(`Incoming ULN ${type} config: ${ioDevtools.printJson(serializedConfig)}`);
    const areEqual = devtools.isDeepEqual(serializedConfig, currentSerializedConfig);
    return this.logger.verbose(`Checked ULN ${type} configs: ${ioDevtools.printBoolean(areEqual)}`), areEqual;
  }
  async getExecutorConfig(eid, address) {
    this.logger.verbose(
      `Getting Executor config for eid ${eid} (${devtools.formatEid(eid)}) and address ${devtoolsEvm.makeZeroAddress(address)}`
    );
    const config = await this.contract.contract.getExecutorConfig(devtoolsEvm.makeZeroAddress(address), eid);
    return Uln302ExecutorConfigSchema.parse({ ...config });
  }
  async getAppExecutorConfig(eid, address) {
    this.logger.verbose(
      `Getting App Executor config for eid ${eid} (${devtools.formatEid(eid)}) and address ${devtoolsEvm.makeZeroAddress(address)}`
    );
    const config = await this.contract.contract.executorConfigs(devtoolsEvm.makeZeroAddress(address), eid);
    if (devtools.isZero(address)) {
      this.logger.warn(
        `Getting App Executor config for eid ${eid} (${devtools.formatEid(eid)}): Passed in OApp address is zero. This will request the default config.`
      );
    }
    return Uln302ExecutorConfigSchema.parse({ ...config });
  }
  /**
   * @see {@link IUln302.hasAppExecutorConfig}
   */
  async hasAppExecutorConfig(eid, oapp, config) {
    this.logger.debug(`Checking whether Executor configs for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} match`);
    const currentConfig = await this.getAppExecutorConfig(eid, oapp);
    const currentSerializedConfig = this.serializeExecutorConfig(currentConfig);
    const serializedConfig = this.serializeExecutorConfig(config);
    this.logger.debug(`Current Executor config: ${ioDevtools.printJson(currentSerializedConfig)}`);
    this.logger.debug(`Incoming Executor config: ${ioDevtools.printJson(serializedConfig)}`);
    const areEqual = devtools.isDeepEqual(serializedConfig, currentSerializedConfig);
    return this.logger.verbose(`Checked App Executor configs: ${ioDevtools.printBoolean(areEqual)}`), areEqual;
  }
  /**
   * @see {@link IUln302.setDefaultExecutorConfig}
   */
  async setDefaultExecutorConfig(eid, config) {
    const data = this.contract.contract.interface.encodeFunctionData("setDefaultExecutorConfigs", [
      [{ eid, config }]
    ]);
    return this.createTransaction(data);
  }
  decodeExecutorConfig(executorConfigBytes) {
    const [rtnConfig] = this.contract.contract.interface.decodeFunctionResult(
      "getExecutorConfig",
      executorConfigBytes
    );
    return Uln302ExecutorConfigSchema.parse({ ...rtnConfig });
  }
  encodeExecutorConfig(config) {
    const encoded = this.contract.contract.interface.encodeFunctionResult("getExecutorConfig", [config]);
    return assert__default.default(typeof encoded === "string", "Must be a string"), encoded;
  }
  decodeUlnConfig(ulnConfigBytes) {
    const [rtnConfig] = this.contract.contract.interface.decodeFunctionResult("getUlnConfig", ulnConfigBytes);
    return Uln302UlnConfigSchema.parse({ ...rtnConfig });
  }
  encodeUlnConfig(config) {
    const serializedConfig = this.serializeUlnConfig(config);
    const encoded = this.contract.contract.interface.encodeFunctionResult("getUlnConfig", [serializedConfig]);
    return assert__default.default(typeof encoded === "string", "Must be a string"), encoded;
  }
  async setDefaultUlnConfig(eid, config) {
    const serializedConfig = this.serializeUlnConfig(config);
    const data = this.contract.contract.interface.encodeFunctionData("setDefaultUlnConfigs", [
      [
        {
          eid,
          config: serializedConfig
        }
      ]
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting default ULN config for ${devtools.formatEid(eid)}: ${ioDevtools.printJson(serializedConfig)}`
    };
  }
  /**
   * Prepares the ULN config to be sent to the contract
   *
   * This involves adding two properties that are required by the EVM
   * contracts (for optimization purposes) but don't need to be present
   * in our configuration and ensuring correct checksum on the DVN addresses.
   *
   * @param {Uln302UlnUserConfig} config
   * @returns {SerializedUln302UlnConfig}
   */
  serializeUlnConfig({
    confirmations = BigInt(0),
    requiredDVNs,
    optionalDVNs = [],
    optionalDVNThreshold = 0
  }) {
    return {
      confirmations,
      optionalDVNThreshold,
      requiredDVNs: requiredDVNs.map(devtoolsEvm.addChecksum).sort(devtools.compareBytes32Ascending),
      optionalDVNs: optionalDVNs.map(devtoolsEvm.addChecksum).sort(devtools.compareBytes32Ascending),
      requiredDVNCount: requiredDVNs.length,
      optionalDVNCount: optionalDVNs.length
    };
  }
  /**
   * Prepares the Executor config to be sent to the contract
   *
   * @param {Uln302ExecutorConfig} config
   * @returns {SerializedUln302ExecutorConfig}
   */
  serializeExecutorConfig({
    maxMessageSize,
    executor
  }) {
    return {
      maxMessageSize,
      executor: devtoolsEvm.addChecksum(executor)
    };
  }
};
__decorateClass([
  devtools.AsyncRetriable()
], Uln302.prototype, "getUlnConfig", 1);
__decorateClass([
  devtools.AsyncRetriable()
], Uln302.prototype, "getAppUlnConfig", 1);
__decorateClass([
  devtools.AsyncRetriable()
], Uln302.prototype, "getExecutorConfig", 1);
__decorateClass([
  devtools.AsyncRetriable()
], Uln302.prototype, "getAppExecutorConfig", 1);

// src/uln302/factory.ts
var createUln302Factory = (providerFactory) => pMemoize__default.default(async (point) => new Uln302(await providerFactory(point.eid), point));
var ReceiveLibrarySchema = zod.z.tuple([devtools.AddressSchema.transform(devtools.ignoreZero), zod.z.boolean()]);

// ../../node_modules/.pnpm/@layerzerolabs+lz-evm-sdk-v2@3.0.22/node_modules/@layerzerolabs/lz-evm-sdk-v2/artifacts/contracts/EndpointV2.sol/EndpointV2.json
var abi3 = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "LZ_AlreadyRegistered",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ComposeExists",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32"
      }
    ],
    name: "LZ_ComposeNotFound",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_DefaultReceiveLibUnavailable",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_DefaultSendLibUnavailable",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requiredNative",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "suppliedNative",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "requiredLzToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "suppliedLzToken",
        type: "uint256"
      }
    ],
    name: "LZ_InsufficientFee",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_InvalidExpiry",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "nonce",
        type: "uint64"
      }
    ],
    name: "LZ_InvalidNonce",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_InvalidPayloadHash",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_InvalidReceiveLibrary",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_LzTokenUnavailable",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_OnlyNonDefaultLib",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_OnlyReceiveLib",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_OnlyRegisteredLib",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_OnlyRegisteredOrDefaultLib",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_OnlySendLib",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_PathNotInitializable",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_PathNotVerifiable",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32"
      }
    ],
    name: "LZ_PayloadHashNotFound",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_SameValue",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_SendReentrancy",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_Unauthorized",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_UnsupportedEid",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_UnsupportedInterface",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ZeroLzTokenFee",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      }
    ],
    name: "Transfer_NativeFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "Transfer_ToAddressIsZero",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "guid",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "index",
        type: "uint16"
      }
    ],
    name: "ComposeDelivered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "guid",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "index",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes"
      }
    ],
    name: "ComposeSent",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newLib",
        type: "address"
      }
    ],
    name: "DefaultReceiveLibrarySet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldLib",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      }
    ],
    name: "DefaultReceiveLibraryTimeoutSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newLib",
        type: "address"
      }
    ],
    name: "DefaultSendLibrarySet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "delegate",
        type: "address"
      }
    ],
    name: "DelegateSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "srcEid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "sender",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "nonce",
        type: "uint64"
      }
    ],
    name: "InboundNonceSkipped",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newLib",
        type: "address"
      }
    ],
    name: "LibraryRegistered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "guid",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "index",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gas",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "extraData",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "reason",
        type: "bytes"
      }
    ],
    name: "LzComposeAlert",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address"
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        indexed: false,
        internalType: "struct Origin",
        name: "origin",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "guid",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gas",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "extraData",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "reason",
        type: "bytes"
      }
    ],
    name: "LzReceiveAlert",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "LzTokenSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "srcEid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "sender",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "nonce",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "payloadHash",
        type: "bytes32"
      }
    ],
    name: "PacketBurnt",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        indexed: false,
        internalType: "struct Origin",
        name: "origin",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      }
    ],
    name: "PacketDelivered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "srcEid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "sender",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "nonce",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "payloadHash",
        type: "bytes32"
      }
    ],
    name: "PacketNilified",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "encodedPayload",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "options",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "address",
        name: "sendLibrary",
        type: "address"
      }
    ],
    name: "PacketSent",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        indexed: false,
        internalType: "struct Origin",
        name: "origin",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "payloadHash",
        type: "bytes32"
      }
    ],
    name: "PacketVerified",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newLib",
        type: "address"
      }
    ],
    name: "ReceiveLibrarySet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldLib",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timeout",
        type: "uint256"
      }
    ],
    name: "ReceiveLibraryTimeoutSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newLib",
        type: "address"
      }
    ],
    name: "SendLibrarySet",
    type: "event"
  },
  {
    inputs: [],
    name: "EMPTY_PAYLOAD_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "NIL_PAYLOAD_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "blockedLibrary",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_srcEid",
        type: "uint32"
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32"
      },
      {
        internalType: "uint64",
        name: "_nonce",
        type: "uint64"
      },
      {
        internalType: "bytes32",
        name: "_payloadHash",
        type: "bytes32"
      }
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        internalType: "struct Origin",
        name: "_origin",
        type: "tuple"
      },
      {
        internalType: "bytes32",
        name: "_guid",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes"
      }
    ],
    name: "clear",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "guid",
        type: "bytes32"
      },
      {
        internalType: "uint16",
        name: "index",
        type: "uint16"
      }
    ],
    name: "composeQueue",
    outputs: [
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "srcEid",
        type: "uint32"
      }
    ],
    name: "defaultReceiveLibrary",
    outputs: [
      {
        internalType: "address",
        name: "lib",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "srcEid",
        type: "uint32"
      }
    ],
    name: "defaultReceiveLibraryTimeout",
    outputs: [
      {
        internalType: "address",
        name: "lib",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "dstEid",
        type: "uint32"
      }
    ],
    name: "defaultSendLibrary",
    outputs: [
      {
        internalType: "address",
        name: "lib",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oapp",
        type: "address"
      }
    ],
    name: "delegates",
    outputs: [
      {
        internalType: "address",
        name: "delegate",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "eid",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "address",
        name: "_lib",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "uint32",
        name: "_configType",
        type: "uint32"
      }
    ],
    name: "getConfig",
    outputs: [
      {
        internalType: "bytes",
        name: "config",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_srcEid",
        type: "uint32"
      }
    ],
    name: "getReceiveLibrary",
    outputs: [
      {
        internalType: "address",
        name: "lib",
        type: "address"
      },
      {
        internalType: "bool",
        name: "isDefault",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getRegisteredLibraries",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getSendContext",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      }
    ],
    name: "getSendLibrary",
    outputs: [
      {
        internalType: "address",
        name: "lib",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_srcEid",
        type: "uint32"
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32"
      }
    ],
    name: "inboundNonce",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "srcEid",
        type: "uint32"
      },
      {
        internalType: "bytes32",
        name: "sender",
        type: "bytes32"
      },
      {
        internalType: "uint64",
        name: "inboundNonce",
        type: "uint64"
      }
    ],
    name: "inboundPayloadHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "payloadHash",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        internalType: "struct Origin",
        name: "_origin",
        type: "tuple"
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      }
    ],
    name: "initializable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      }
    ],
    name: "isDefaultSendLibrary",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "lib",
        type: "address"
      }
    ],
    name: "isRegisteredLibrary",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "isSendingMessage",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      }
    ],
    name: "isSupportedEid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_srcEid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_actualReceiveLib",
        type: "address"
      }
    ],
    name: "isValidReceiveLibrary",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "srcEid",
        type: "uint32"
      },
      {
        internalType: "bytes32",
        name: "sender",
        type: "bytes32"
      }
    ],
    name: "lazyInboundNonce",
    outputs: [
      {
        internalType: "uint64",
        name: "nonce",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_guid",
        type: "bytes32"
      },
      {
        internalType: "uint16",
        name: "_index",
        type: "uint16"
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes"
      }
    ],
    name: "lzCompose",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_guid",
        type: "bytes32"
      },
      {
        internalType: "uint16",
        name: "_index",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_reason",
        type: "bytes"
      }
    ],
    name: "lzComposeAlert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        internalType: "struct Origin",
        name: "_origin",
        type: "tuple"
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_guid",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes"
      }
    ],
    name: "lzReceive",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        internalType: "struct Origin",
        name: "_origin",
        type: "tuple"
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_guid",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_reason",
        type: "bytes"
      }
    ],
    name: "lzReceiveAlert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "lzToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "nativeToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      },
      {
        internalType: "bytes32",
        name: "_receiver",
        type: "bytes32"
      }
    ],
    name: "nextGuid",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_srcEid",
        type: "uint32"
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32"
      },
      {
        internalType: "uint64",
        name: "_nonce",
        type: "uint64"
      },
      {
        internalType: "bytes32",
        name: "_payloadHash",
        type: "bytes32"
      }
    ],
    name: "nilify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "dstEid",
        type: "uint32"
      },
      {
        internalType: "bytes32",
        name: "receiver",
        type: "bytes32"
      }
    ],
    name: "outboundNonce",
    outputs: [
      {
        internalType: "uint64",
        name: "nonce",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "receiver",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "options",
            type: "bytes"
          },
          {
            internalType: "bool",
            name: "payInLzToken",
            type: "bool"
          }
        ],
        internalType: "struct MessagingParams",
        name: "_params",
        type: "tuple"
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      }
    ],
    name: "quote",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nativeFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "lzTokenFee",
            type: "uint256"
          }
        ],
        internalType: "struct MessagingFee",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "srcEid",
        type: "uint32"
      }
    ],
    name: "receiveLibraryTimeout",
    outputs: [
      {
        internalType: "address",
        name: "lib",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "recoverToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lib",
        type: "address"
      }
    ],
    name: "registerLibrary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "receiver",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "options",
            type: "bytes"
          },
          {
            internalType: "bool",
            name: "payInLzToken",
            type: "bool"
          }
        ],
        internalType: "struct MessagingParams",
        name: "_params",
        type: "tuple"
      },
      {
        internalType: "address",
        name: "_refundAddress",
        type: "address"
      }
    ],
    name: "send",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "guid",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "nativeFee",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "lzTokenFee",
                type: "uint256"
              }
            ],
            internalType: "struct MessagingFee",
            name: "fee",
            type: "tuple"
          }
        ],
        internalType: "struct MessagingReceipt",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_guid",
        type: "bytes32"
      },
      {
        internalType: "uint16",
        name: "_index",
        type: "uint16"
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes"
      }
    ],
    name: "sendCompose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "address",
        name: "_lib",
        type: "address"
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "configType",
            type: "uint32"
          },
          {
            internalType: "bytes",
            name: "config",
            type: "bytes"
          }
        ],
        internalType: "struct SetConfigParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_newLib",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_gracePeriod",
        type: "uint256"
      }
    ],
    name: "setDefaultReceiveLibrary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_lib",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_expiry",
        type: "uint256"
      }
    ],
    name: "setDefaultReceiveLibraryTimeout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_newLib",
        type: "address"
      }
    ],
    name: "setDefaultSendLibrary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_delegate",
        type: "address"
      }
    ],
    name: "setDelegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lzToken",
        type: "address"
      }
    ],
    name: "setLzToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_newLib",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_gracePeriod",
        type: "uint256"
      }
    ],
    name: "setReceiveLibrary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_lib",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_expiry",
        type: "uint256"
      }
    ],
    name: "setReceiveLibraryTimeout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_newLib",
        type: "address"
      }
    ],
    name: "setSendLibrary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_srcEid",
        type: "uint32"
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32"
      },
      {
        internalType: "uint64",
        name: "_nonce",
        type: "uint64"
      }
    ],
    name: "skip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        internalType: "struct Origin",
        name: "_origin",
        type: "tuple"
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      }
    ],
    name: "verifiable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        internalType: "struct Origin",
        name: "_origin",
        type: "tuple"
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_payloadHash",
        type: "bytes32"
      }
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// ../../node_modules/.pnpm/@layerzerolabs+lz-evm-sdk-v2@3.0.22/node_modules/@layerzerolabs/lz-evm-sdk-v2/artifacts/contracts/uln/readlib/ReadLib1002.sol/ReadLib1002.json
var abi4 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_endpoint",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_treasuryGasLimit",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_treasuryGasForFeeCap",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "DVN_InvalidDVNIdx",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256"
      }
    ],
    name: "DVN_InvalidDVNOptions",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_MessageLib_OnlyEndpoint",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_AtLeastOneDVN",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_CannotWithdrawAltToken",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "available",
        type: "uint256"
      }
    ],
    name: "LZ_RL_InvalidAmount",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidCmdHash",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "configType",
        type: "uint32"
      }
    ],
    name: "LZ_RL_InvalidConfigType",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidEid",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidExecutor",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidOptionalDVNCount",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidOptionalDVNThreshold",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidPacketHeader",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidPacketVersion",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidReceiver",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_InvalidRequiredDVNCount",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_NotTreasury",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_Unsorted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      }
    ],
    name: "LZ_RL_UnsupportedEid",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_RL_Verifying",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidLegacyType1Option",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidLegacyType2Option",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "workerId",
        type: "uint8"
      }
    ],
    name: "LZ_ULN_InvalidWorkerId",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256"
      }
    ],
    name: "LZ_ULN_InvalidWorkerOptions",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "optionType",
        type: "uint16"
      }
    ],
    name: "LZ_ULN_UnsupportedOptionType",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      }
    ],
    name: "Transfer_NativeFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "Transfer_ToAddressIsZero",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "requiredDVNs",
        type: "address[]"
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "optionalDVNs",
        type: "address[]"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "fees",
        type: "uint256[]"
      }
    ],
    name: "DVNFeePaid",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            components: [
              {
                internalType: "address",
                name: "executor",
                type: "address"
              },
              {
                internalType: "uint8",
                name: "requiredDVNCount",
                type: "uint8"
              },
              {
                internalType: "uint8",
                name: "optionalDVNCount",
                type: "uint8"
              },
              {
                internalType: "uint8",
                name: "optionalDVNThreshold",
                type: "uint8"
              },
              {
                internalType: "address[]",
                name: "requiredDVNs",
                type: "address[]"
              },
              {
                internalType: "address[]",
                name: "optionalDVNs",
                type: "address[]"
              }
            ],
            internalType: "struct ReadLibConfig",
            name: "config",
            type: "tuple"
          }
        ],
        indexed: false,
        internalType: "struct SetDefaultReadLibConfigParam[]",
        name: "params",
        type: "tuple[]"
      }
    ],
    name: "DefaultReadLibConfigsSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "executor",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "ExecutorFeePaid",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "lzToken",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "LzTokenFeeWithdrawn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "worker",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "NativeFeeWithdrawn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "dvn",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "header",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "cmdHash",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "payloadHash",
        type: "bytes32"
      }
    ],
    name: "PayloadVerified",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oapp",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        components: [
          {
            internalType: "address",
            name: "executor",
            type: "address"
          },
          {
            internalType: "uint8",
            name: "requiredDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNThreshold",
            type: "uint8"
          },
          {
            internalType: "address[]",
            name: "requiredDVNs",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "optionalDVNs",
            type: "address[]"
          }
        ],
        indexed: false,
        internalType: "struct ReadLibConfig",
        name: "config",
        type: "tuple"
      }
    ],
    name: "ReadLibConfigSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newTreasuryNativeFeeCap",
        type: "uint256"
      }
    ],
    name: "TreasuryNativeFeeCapSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "treasury",
        type: "address"
      }
    ],
    name: "TreasurySet",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "eid",
        type: "uint32"
      },
      {
        internalType: "uint64",
        name: "nonce",
        type: "uint64"
      }
    ],
    name: "cmdHashLookup",
    outputs: [
      {
        internalType: "bytes32",
        name: "cmdHash",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_packetHeader",
        type: "bytes"
      },
      {
        internalType: "bytes32",
        name: "_cmdHash",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_payloadHash",
        type: "bytes32"
      }
    ],
    name: "commitVerification",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "worker",
        type: "address"
      }
    ],
    name: "fees",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_remoteEid",
        type: "uint32"
      }
    ],
    name: "getAppReadLibConfig",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "executor",
            type: "address"
          },
          {
            internalType: "uint8",
            name: "requiredDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNThreshold",
            type: "uint8"
          },
          {
            internalType: "address[]",
            name: "requiredDVNs",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "optionalDVNs",
            type: "address[]"
          }
        ],
        internalType: "struct ReadLibConfig",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_configType",
        type: "uint32"
      }
    ],
    name: "getConfig",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "_remoteEid",
        type: "uint32"
      }
    ],
    name: "getReadLibConfig",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "executor",
            type: "address"
          },
          {
            internalType: "uint8",
            name: "requiredDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNThreshold",
            type: "uint8"
          },
          {
            internalType: "address[]",
            name: "requiredDVNs",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "optionalDVNs",
            type: "address[]"
          }
        ],
        internalType: "struct ReadLibConfig",
        name: "rtnConfig",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getTreasuryAndNativeFeeCap",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "headerHash",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "cmdHash",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "dvn",
        type: "address"
      }
    ],
    name: "hashLookup",
    outputs: [
      {
        internalType: "bytes32",
        name: "payloadHash",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      }
    ],
    name: "isSupportedEid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "messageLibType",
    outputs: [
      {
        internalType: "enum MessageLibType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          },
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "receiver",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "guid",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        internalType: "struct Packet",
        name: "_packet",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      },
      {
        internalType: "bool",
        name: "_payInLzToken",
        type: "bool"
      }
    ],
    name: "quote",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nativeFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "lzTokenFee",
            type: "uint256"
          }
        ],
        internalType: "struct MessagingFee",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          },
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "receiver",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "guid",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          }
        ],
        internalType: "struct Packet",
        name: "_packet",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      },
      {
        internalType: "bool",
        name: "_payInLzToken",
        type: "bool"
      }
    ],
    name: "send",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nativeFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "lzTokenFee",
            type: "uint256"
          }
        ],
        internalType: "struct MessagingFee",
        name: "",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            internalType: "uint32",
            name: "configType",
            type: "uint32"
          },
          {
            internalType: "bytes",
            name: "config",
            type: "bytes"
          }
        ],
        internalType: "struct SetConfigParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            components: [
              {
                internalType: "address",
                name: "executor",
                type: "address"
              },
              {
                internalType: "uint8",
                name: "requiredDVNCount",
                type: "uint8"
              },
              {
                internalType: "uint8",
                name: "optionalDVNCount",
                type: "uint8"
              },
              {
                internalType: "uint8",
                name: "optionalDVNThreshold",
                type: "uint8"
              },
              {
                internalType: "address[]",
                name: "requiredDVNs",
                type: "address[]"
              },
              {
                internalType: "address[]",
                name: "optionalDVNs",
                type: "address[]"
              }
            ],
            internalType: "struct ReadLibConfig",
            name: "config",
            type: "tuple"
          }
        ],
        internalType: "struct SetDefaultReadLibConfigParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setDefaultReadLibConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_treasury",
        type: "address"
      }
    ],
    name: "setTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newTreasuryNativeFeeCap",
        type: "uint256"
      }
    ],
    name: "setTreasuryNativeFeeCap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "executor",
            type: "address"
          },
          {
            internalType: "uint8",
            name: "requiredDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNCount",
            type: "uint8"
          },
          {
            internalType: "uint8",
            name: "optionalDVNThreshold",
            type: "uint8"
          },
          {
            internalType: "address[]",
            name: "requiredDVNs",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "optionalDVNs",
            type: "address[]"
          }
        ],
        internalType: "struct ReadLibConfig",
        name: "_config",
        type: "tuple"
      },
      {
        internalType: "bytes32",
        name: "_headerHash",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_cmdHash",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_payloadHash",
        type: "bytes32"
      }
    ],
    name: "verifiable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_packetHeader",
        type: "bytes"
      },
      {
        internalType: "bytes32",
        name: "_cmdHash",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_payloadHash",
        type: "bytes32"
      }
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint64",
        name: "major",
        type: "uint64"
      },
      {
        internalType: "uint8",
        name: "minor",
        type: "uint8"
      },
      {
        internalType: "uint8",
        name: "endpointVersion",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lzToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawLzTokenFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];

// src/ulnRead/sdk.ts
var UlnRead = class extends devtoolsEvm.OmniSDK {
  constructor(provider, point) {
    super({ eid: point.eid, contract: new contracts.Contract(point.address, abi4).connect(provider) });
  }
  async getUlnConfig(channelId, address) {
    this.logger.debug(`Getting ULN read config for eid ${channelId} and address ${devtoolsEvm.makeZeroAddress(address)}`);
    const config = await this.contract.contract.getReadLibConfig(devtoolsEvm.makeZeroAddress(address), channelId);
    return protocolDevtools.UlnReadUlnConfigSchema.parse({ ...config });
  }
  async getAppUlnConfig(channelId, address) {
    this.logger.verbose(
      `Getting App ULN read config for channelId ${channelId} and address ${devtoolsEvm.makeZeroAddress(address)}`
    );
    if (devtools.isZero(address)) {
      this.logger.warn(
        `Getting App ULN read config for channelId ${channelId} : Passed in OApp address is zero. This will request the default config.`
      );
    }
    const config = await this.contract.contract.getAppReadLibConfig(devtoolsEvm.makeZeroAddress(address), channelId);
    return protocolDevtools.UlnReadUlnConfigSchema.parse({ ...config });
  }
  /**
   * @see {@link IUlnRead.hasAppUlnConfig}
   */
  async hasAppUlnConfig(channelId, oapp, config) {
    this.logger.verbose(`Checking whether ULN read configs for channelId ${channelId} and OApp ${oapp} match`);
    const currentConfig = await this.getAppUlnConfig(channelId, oapp);
    const currentSerializedConfig = this.serializeUlnConfig(currentConfig);
    const serializedConfig = this.serializeUlnConfig(config);
    this.logger.debug(`Current ULN read config: ${ioDevtools.printJson(currentSerializedConfig)}`);
    this.logger.debug(`Incoming ULN read config: ${ioDevtools.printJson(serializedConfig)}`);
    const areEqual = devtools.isDeepEqual(serializedConfig, currentSerializedConfig);
    return this.logger.verbose(`Checked ULN read configs: ${ioDevtools.printBoolean(areEqual)}`), areEqual;
  }
  decodeUlnConfig(ulnConfigBytes) {
    const [rtnConfig] = this.contract.contract.interface.decodeFunctionResult("getReadLibConfig", ulnConfigBytes);
    return protocolDevtools.UlnReadUlnConfigSchema.parse({ ...rtnConfig });
  }
  encodeUlnConfig(config) {
    const serializedConfig = this.serializeUlnConfig(config);
    const encoded = this.contract.contract.interface.encodeFunctionResult("getReadLibConfig", [serializedConfig]);
    return assert__default.default(typeof encoded === "string", "Must be a string"), encoded;
  }
  async setDefaultUlnConfig(channelId, config) {
    const serializedConfig = this.serializeUlnConfig(config);
    const data = this.contract.contract.interface.encodeFunctionData("setDefaultReadLibConfigs", [
      [
        {
          eid: channelId,
          config: serializedConfig
        }
      ]
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting default ULN config for ${channelId}: ${ioDevtools.printJson(serializedConfig)}`
    };
  }
  /**
   * Prepares the ULN config to be sent to the contract
   *
   * This involves adding two properties that are required by the EVM
   * contracts (for optimization purposes) but don't need to be present
   * in our configuration and ensuring correct checksum on the DVN addresses.
   *
   * @param {UlnReadUlnUserConfig} config
   * @returns {SerializedUlnReadUlnConfig}
   */
  serializeUlnConfig({
    requiredDVNs,
    optionalDVNs = [],
    optionalDVNThreshold = 0,
    executor = devtoolsEvm.makeZeroAddress()
  }) {
    return {
      executor,
      requiredDVNCount: requiredDVNs.length,
      optionalDVNCount: optionalDVNs.length,
      optionalDVNThreshold,
      requiredDVNs: requiredDVNs.map(devtoolsEvm.addChecksum).sort(devtools.compareBytes32Ascending),
      optionalDVNs: optionalDVNs.map(devtoolsEvm.addChecksum).sort(devtools.compareBytes32Ascending)
    };
  }
};
__decorateClass([
  devtools.AsyncRetriable()
], UlnRead.prototype, "getUlnConfig", 1);
__decorateClass([
  devtools.AsyncRetriable()
], UlnRead.prototype, "getAppUlnConfig", 1);

// src/ulnRead/factory.ts
var createUlnReadFactory = (providerFactory) => pMemoize__default.default(async (point) => new UlnRead(await providerFactory(point.eid), point));

// src/endpointv2/sdk.ts
var CONFIG_TYPE_EXECUTOR = 1;
var CONFIG_TYPE_ULN = 2;
var CONFIG_TYPE_READ_LIB_CONFIG = 1;
var EndpointV2 = class extends devtoolsEvm.OmniSDK {
  constructor(provider, point) {
    super({ eid: point.eid, contract: new contracts.Contract(point.address, abi3).connect(provider) });
  }
  async getDelegate(oapp) {
    this.logger.debug(`Getting delegate for OApp ${oapp}`);
    return devtools.ignoreZero(await this.contract.contract.delegates(oapp));
  }
  async isDelegate(oapp, delegate) {
    this.logger.debug(`Checking whether ${delegate} is a delegate for OApp ${oapp}`);
    return devtools.areBytes32Equal(await this.getDelegate(oapp), delegate);
  }
  async getUln302SDK(address) {
    this.logger.debug(`Getting Uln302 SDK for address ${address}`);
    assert__default.default(
      !devtools.isZero(address),
      `Uln302 cannot be instantiated: Uln302 address cannot be a zero value for EndpointV2 ${devtools.formatOmniPoint(
        this.point
      )}`
    );
    return new Uln302(this.contract.contract.provider, { eid: this.point.eid, address });
  }
  async getUlnReadSDK(address) {
    this.logger.debug(`Getting UlnRead SDK for address ${address}`);
    assert__default.default(
      !devtools.isZero(address),
      `UlnRead cannot be instantiated: UlnRead address cannot be a zero value for EndpointV2 ${devtools.formatOmniPoint(
        this.point
      )}`
    );
    return new UlnRead(this.contract.contract.provider, { eid: this.point.eid, address });
  }
  async getDefaultReceiveLibrary(eid) {
    this.logger.debug(`Getting default receive library for eid ${eid} (${devtools.formatEid(eid)})`);
    return devtools.ignoreZero(await this.contract.contract.defaultReceiveLibrary(eid));
  }
  async getSendLibrary(sender, dstEid) {
    this.logger.debug(`Getting send library for eid ${dstEid} (${devtools.formatEid(dstEid)}) and address ${sender}`);
    try {
      return devtools.ignoreZero(await this.contract.contract.getSendLibrary(sender, dstEid));
    } catch (error) {
      const parsedError = await this.parseError(error);
      if (parsedError.reason === "LZ_DefaultSendLibUnavailable") {
        this.logger.warn(`Send library not set and default not available for eid ${devtools.formatEid(dstEid)}`);
        return void 0;
      }
      throw error;
    }
  }
  async getReceiveLibrary(receiver, srcEid) {
    this.logger.debug(`Getting receive library for eid ${srcEid} (${devtools.formatEid(srcEid)}) and address ${receiver}`);
    try {
      return ReceiveLibrarySchema.parse(await this.contract.contract.getReceiveLibrary(receiver, srcEid));
    } catch (error) {
      const parsedError = await this.parseError(error);
      if (parsedError.reason === "LZ_DefaultReceiveLibUnavailable") {
        this.logger.warn(`Receive library not set and default not available for eid ${devtools.formatEid(srcEid)}`);
        return [void 0, true];
      }
      throw error;
    }
  }
  async setDefaultReceiveLibrary(eid, uln, gracePeriod = BigInt(0)) {
    this.logger.debug(
      `Setting default receive library for eid ${eid} (${devtools.formatEid(eid)}) and ULN ${uln} with grace period of ${gracePeriod}`
    );
    const data = this.contract.contract.interface.encodeFunctionData("setDefaultReceiveLibrary", [
      eid,
      devtoolsEvm.makeZeroAddress(uln),
      gracePeriod
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting default receive library for ${devtools.formatEid(eid)} to ${devtoolsEvm.makeZeroAddress(uln)}`
    };
  }
  async getDefaultSendLibrary(eid) {
    this.logger.debug(`Getting default send library for eid ${eid} (${devtools.formatEid(eid)})`);
    return devtools.ignoreZero(await this.contract.contract.defaultSendLibrary(eid));
  }
  async isDefaultSendLibrary(sender, dstEid) {
    this.logger.debug(
      `Checking default send library for eid ${dstEid} (${devtools.formatEid(dstEid)}) and address ${sender}`
    );
    if (devtools.isZero(sender)) {
      this.logger.warn(`Checking default send library received a zero address (${sender}) for eid ${dstEid}`);
    }
    return await this.contract.contract.isDefaultSendLibrary(sender, dstEid);
  }
  async setDefaultSendLibrary(eid, uln) {
    this.logger.debug(`Setting default send library for eid ${eid} (${devtools.formatEid(eid)}) and ULN ${uln}`);
    const data = this.contract.contract.interface.encodeFunctionData("setDefaultSendLibrary", [
      eid,
      devtoolsEvm.makeZeroAddress(uln)
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting default send library for ${devtools.formatEid(eid)} to ${uln}`
    };
  }
  async setSendLibrary(oapp, eid, uln) {
    this.logger.debug(`Setting send library for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} to ULN ${uln}`);
    const data = this.contract.contract.interface.encodeFunctionData("setSendLibrary", [oapp, eid, uln]);
    return {
      ...this.createTransaction(data),
      description: `Setting send library for ${devtools.formatEid(eid)} to ${uln}`
    };
  }
  async setReceiveLibrary(oapp, eid, uln, gracePeriod) {
    this.logger.debug(
      `Setting receive library for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} to ULN ${uln} with a grace period of ${gracePeriod}`
    );
    const data = this.contract.contract.interface.encodeFunctionData("setReceiveLibrary", [
      oapp,
      eid,
      uln,
      gracePeriod
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting receive library for ${devtools.formatEid(eid)} to ${uln} with grace period ${gracePeriod}`
    };
  }
  async getReceiveLibraryTimeout(receiver, srcEid) {
    this.logger.debug(
      `Getting receive library timeout for eid ${srcEid} (${devtools.formatEid(srcEid)}) and address ${receiver}`
    );
    const timeout = await this.contract.contract.receiveLibraryTimeout(receiver, srcEid);
    return protocolDevtools.TimeoutSchema.parse({ ...timeout });
  }
  async getDefaultReceiveLibraryTimeout(eid) {
    this.logger.debug(`Getting default receive library timeout for eid ${eid} (${devtools.formatEid(eid)})`);
    const timeout = await this.contract.contract.defaultReceiveLibraryTimeout(eid);
    return protocolDevtools.TimeoutSchema.parse({ ...timeout });
  }
  async setReceiveLibraryTimeout(oapp, eid, uln, expiry) {
    this.logger.debug(
      `Setting receive library timeout for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} to ULN ${devtoolsEvm.makeZeroAddress(uln)} with expiration period ${expiry}`
    );
    const data = this.contract.contract.interface.encodeFunctionData("setReceiveLibraryTimeout", [
      oapp,
      eid,
      uln,
      expiry
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting receive library timeout for ${devtools.formatEid(
        eid
      )} to ${uln} with expiration period ${expiry}`
    };
  }
  async setConfig(oapp, uln, setConfigParam) {
    this.logger.debug(`Setting config for OApp ${oapp} to ULN ${uln} with config ${ioDevtools.printJson(setConfigParam)}`);
    const data = this.contract.contract.interface.encodeFunctionData("setConfig", [oapp, uln, setConfigParam]);
    return [
      {
        ...this.createTransaction(data),
        description: `Setting config for ULN ${uln} to ${ioDevtools.printJson(setConfigParam)}`
      }
    ];
  }
  async setUlnConfig(oapp, uln, setUlnConfig) {
    this.logger.debug(`Setting ULN config for OApp ${oapp} to ULN ${uln} with config ${ioDevtools.printJson(setUlnConfig)}`);
    const setUlnConfigParams = await this.getUlnConfigParams(uln, setUlnConfig);
    return await this.setConfig(oapp, uln, setUlnConfigParams);
  }
  async setUlnReadConfig(oapp, uln, setUlnConfig) {
    this.logger.debug(`Setting ULN config for OApp ${oapp} to ULN ${uln} with config ${ioDevtools.printJson(setUlnConfig)}`);
    const setUlnConfigParams = await this.getUlnReadConfigParams(uln, setUlnConfig);
    return await this.setConfig(oapp, uln, setUlnConfigParams);
  }
  async setExecutorConfig(oapp, uln, setExecutorConfig) {
    this.logger.debug(
      `Setting executor config for OApp ${oapp} to ULN ${uln} with config ${ioDevtools.printJson(setExecutorConfig)}`
    );
    const setExecutorConfigParams = await this.getExecutorConfigParams(uln, setExecutorConfig);
    return await this.setConfig(oapp, uln, setExecutorConfigParams);
  }
  async getExecutorConfig(oapp, uln, eid) {
    this.logger.debug(`Getting executor config for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} and ULN ${uln}`);
    const ulnSdk = await this.getUln302SDK(uln);
    return await ulnSdk.getExecutorConfig(eid, oapp);
  }
  async getAppExecutorConfig(oapp, uln, eid) {
    this.logger.debug(
      `Getting executor app config for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} and ULN ${uln}`
    );
    const ulnSdk = await this.getUln302SDK(uln);
    return await ulnSdk.getAppExecutorConfig(eid, oapp);
  }
  /**
   * @see {@link IEndpointV2.hasAppExecutorConfig}
   */
  async hasAppExecutorConfig(oapp, uln, eid, config) {
    const ulnSdk = await this.getUln302SDK(uln);
    return ulnSdk.hasAppExecutorConfig(eid, oapp, config);
  }
  /**
   * @see {@link IEndpointV2.getUlnConfig}
   */
  async getUlnConfig(oapp, uln, eid, type) {
    this.logger.debug(
      `Getting ULN ${type} config for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} and ULN ${uln}`
    );
    const ulnSdk = await this.getUln302SDK(uln);
    return await ulnSdk.getUlnConfig(eid, oapp, type);
  }
  /**
   * @see {@link IEndpointV2.getAppUlnConfig}
   */
  async getAppUlnConfig(oapp, uln, eid, type) {
    this.logger.debug(
      `Getting App ULN ${type} config for eid ${eid} (${devtools.formatEid(eid)}) and OApp ${oapp} and ULN ${uln}`
    );
    const ulnSdk = await this.getUln302SDK(uln);
    return await ulnSdk.getAppUlnConfig(eid, oapp, type);
  }
  /**
   * @see {@link IEndpointV2.getAppUlnReadConfig}
   */
  async getAppUlnReadConfig(oapp, uln, channelId) {
    this.logger.debug(`Getting App ULN read config for eid ${channelId} and OApp ${oapp} and ULN ${uln}`);
    const ulnSdk = await this.getUlnReadSDK(uln);
    return await ulnSdk.getAppUlnConfig(channelId, oapp);
  }
  /**
   * @see {@link IEndpointV2.hasAppUlnConfig}
   */
  async hasAppUlnConfig(oapp, uln, eid, config, type) {
    const ulnSdk = await this.getUln302SDK(uln);
    return ulnSdk.hasAppUlnConfig(eid, oapp, config, type);
  }
  /**
   * @see {@link IEndpointV2.hasAppUlnReadConfig}
   */
  async hasAppUlnReadConfig(oapp, uln, channelId, config) {
    const ulnSdk = await this.getUlnReadSDK(uln);
    return ulnSdk.hasAppUlnConfig(channelId, oapp, config);
  }
  isRegisteredLibrary(uln) {
    return this.contract.contract.isRegisteredLibrary(uln);
  }
  async registerLibrary(uln) {
    const data = this.contract.contract.interface.encodeFunctionData("registerLibrary", [uln]);
    return {
      ...this.createTransaction(data),
      description: `Registering library ${uln}`
    };
  }
  async quote(params, sender) {
    const { nativeFee, lzTokenFee } = await this.contract.contract.quote(params, sender);
    return {
      nativeFee: BigInt(nativeFee),
      lzTokenFee: BigInt(lzTokenFee)
    };
  }
  async getUlnConfigParams(uln, setUlnConfig) {
    const ulnSdk = await this.getUln302SDK(uln);
    return setUlnConfig.map(({ eid, ulnConfig }) => ({
      eid,
      configType: CONFIG_TYPE_ULN,
      config: ulnSdk.encodeUlnConfig(ulnConfig)
    }));
  }
  async getUlnReadConfigParams(uln, setUlnConfig) {
    const ulnSdk = await this.getUlnReadSDK(uln);
    return setUlnConfig.map(({ channelId, ulnConfig }) => ({
      eid: channelId,
      configType: CONFIG_TYPE_READ_LIB_CONFIG,
      config: ulnSdk.encodeUlnConfig(ulnConfig)
    }));
  }
  async getExecutorConfigParams(uln, setExecutorConfig) {
    const ulnSdk = await this.getUln302SDK(uln);
    return setExecutorConfig.map(({ eid, executorConfig }) => ({
      eid,
      configType: CONFIG_TYPE_EXECUTOR,
      config: ulnSdk.encodeExecutorConfig(executorConfig)
    }));
  }
};
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "getDelegate", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "getDefaultReceiveLibrary", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "getSendLibrary", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "getReceiveLibrary", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "getDefaultSendLibrary", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "isDefaultSendLibrary", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "getReceiveLibraryTimeout", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "getDefaultReceiveLibraryTimeout", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "isRegisteredLibrary", 1);
__decorateClass([
  devtools.AsyncRetriable()
], EndpointV2.prototype, "quote", 1);

// src/endpointv2/factory.ts
var createEndpointV2Factory = (providerFactory) => pMemoize__default.default(async (point) => new EndpointV2(await providerFactory(point.eid), point));
var ExecutorDstConfigPre2_1_27Schema = protocolDevtools.ExecutorDstConfigPre2_1_27Schema.extend({
  baseGas: devtoolsEvm.BigNumberishBigIntSchema,
  multiplierBps: devtoolsEvm.BigNumberishBigIntSchema,
  floorMarginUSD: devtoolsEvm.BigNumberishBigIntSchema,
  nativeCap: devtoolsEvm.BigNumberishBigIntSchema
});
var ExecutorDstConfigPost2_1_27Schema = protocolDevtools.ExecutorDstConfigPost2_1_27Schema.extend({
  lzComposeBaseGas: devtoolsEvm.BigNumberishBigIntSchema,
  lzReceiveBaseGas: devtoolsEvm.BigNumberishBigIntSchema,
  multiplierBps: devtoolsEvm.BigNumberishBigIntSchema,
  floorMarginUSD: devtoolsEvm.BigNumberishBigIntSchema,
  nativeCap: devtoolsEvm.BigNumberishBigIntSchema
});
var ExecutorDstConfigSchema = zod.z.union([
  ExecutorDstConfigPre2_1_27Schema,
  ExecutorDstConfigPost2_1_27Schema
]);

// ../../node_modules/.pnpm/@layerzerolabs+lz-evm-sdk-v2@3.0.22/node_modules/@layerzerolabs/lz-evm-sdk-v2/artifacts/contracts/Executor.sol/Executor.json
var abi5 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      }
    ],
    name: "Transfer_NativeFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "Transfer_ToAddressIsZero",
    type: "error"
  },
  {
    inputs: [],
    name: "Worker_NotAllowed",
    type: "error"
  },
  {
    inputs: [],
    name: "Worker_OnlyMessageLib",
    type: "error"
  },
  {
    inputs: [],
    name: "Worker_RoleRenouncingDisabled",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "lzReceiveBaseGas",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "lzComposeBaseGas",
            type: "uint64"
          },
          {
            internalType: "uint16",
            name: "multiplierBps",
            type: "uint16"
          },
          {
            internalType: "uint128",
            name: "floorMarginUSD",
            type: "uint128"
          },
          {
            internalType: "uint128",
            name: "nativeCap",
            type: "uint128"
          }
        ],
        indexed: false,
        internalType: "struct IExecutor.DstConfigParam[]",
        name: "params",
        type: "tuple[]"
      }
    ],
    name: "DstConfigSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        indexed: false,
        internalType: "struct Origin",
        name: "origin",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "dstEid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "address",
        name: "oapp",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        indexed: false,
        internalType: "struct IExecutor.NativeDropParams[]",
        name: "params",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "bool[]",
        name: "success",
        type: "bool[]"
      }
    ],
    name: "NativeDropApplied",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "previousAdminRole",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "newAdminRole",
        type: "bytes32"
      }
    ],
    name: "RoleAdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleGranted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleRevoked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint16",
        name: "multiplierBps",
        type: "uint16"
      }
    ],
    name: "SetDefaultMultiplierBps",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "priceFeed",
        type: "address"
      }
    ],
    name: "SetPriceFeed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "dstEid",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint8[]",
        name: "optionTypes",
        type: "uint8[]"
      }
    ],
    name: "SetSupportedOptionTypes",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "workerLib",
        type: "address"
      }
    ],
    name: "SetWorkerLib",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "lib",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "allowlistSize",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_calldataSize",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      }
    ],
    name: "assignJob",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      }
    ],
    name: "assignJob",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_guid",
        type: "bytes32"
      },
      {
        internalType: "uint16",
        name: "_index",
        type: "uint16"
      },
      {
        internalType: "bytes",
        name: "_message",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256"
      }
    ],
    name: "compose302",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "defaultMultiplierBps",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "dstEid",
        type: "uint32"
      }
    ],
    name: "dstConfig",
    outputs: [
      {
        internalType: "uint64",
        name: "lzReceiveBaseGas",
        type: "uint64"
      },
      {
        internalType: "uint16",
        name: "multiplierBps",
        type: "uint16"
      },
      {
        internalType: "uint128",
        name: "floorMarginUSD",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "nativeCap",
        type: "uint128"
      },
      {
        internalType: "uint64",
        name: "lzComposeBaseGas",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "endpoint",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_packet",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256"
      }
    ],
    name: "execute301",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "srcEid",
                type: "uint32"
              },
              {
                internalType: "bytes32",
                name: "sender",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64"
              }
            ],
            internalType: "struct Origin",
            name: "origin",
            type: "tuple"
          },
          {
            internalType: "bytes32",
            name: "guid",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256"
          }
        ],
        internalType: "struct IExecutor.ExecutionParams",
        name: "_executionParams",
        type: "tuple"
      }
    ],
    name: "execute302",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_calldataSize",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      }
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_options",
        type: "bytes"
      }
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      }
    ],
    name: "getRoleAdmin",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      }
    ],
    name: "getSupportedOptionTypes",
    outputs: [
      {
        internalType: "uint8[]",
        name: "",
        type: "uint8[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      }
    ],
    name: "hasAcl",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "hasRole",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_endpoint",
        type: "address"
      },
      {
        internalType: "address",
        name: "_receiveUln301",
        type: "address"
      },
      {
        internalType: "address[]",
        name: "_messageLibs",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address"
      },
      {
        internalType: "address",
        name: "_roleAdmin",
        type: "address"
      },
      {
        internalType: "address[]",
        name: "_admins",
        type: "address[]"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "localEidV2",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        internalType: "struct Origin",
        name: "_origin",
        type: "tuple"
      },
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_oapp",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        internalType: "struct IExecutor.NativeDropParams[]",
        name: "_nativeDropParams",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_nativeDropGasLimit",
        type: "uint256"
      }
    ],
    name: "nativeDrop",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "srcEid",
            type: "uint32"
          },
          {
            internalType: "bytes32",
            name: "sender",
            type: "bytes32"
          },
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64"
          }
        ],
        internalType: "struct Origin",
        name: "_origin",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        internalType: "struct IExecutor.NativeDropParams[]",
        name: "_nativeDropParams",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_nativeDropGasLimit",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_packet",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256"
      }
    ],
    name: "nativeDropAndExecute301",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        internalType: "struct IExecutor.NativeDropParams[]",
        name: "_nativeDropParams",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "_nativeDropGasLimit",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "srcEid",
                type: "uint32"
              },
              {
                internalType: "bytes32",
                name: "sender",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64"
              }
            ],
            internalType: "struct Origin",
            name: "origin",
            type: "tuple"
          },
          {
            internalType: "bytes32",
            name: "guid",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256"
          }
        ],
        internalType: "struct IExecutor.ExecutionParams",
        name: "_executionParams",
        type: "tuple"
      }
    ],
    name: "nativeDropAndExecute302",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiveUln301",
        type: "address"
      }
    ],
    name: "onUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "receiveUln301",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_multiplierBps",
        type: "uint16"
      }
    ],
    name: "setDefaultMultiplierBps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "uint64",
            name: "lzReceiveBaseGas",
            type: "uint64"
          },
          {
            internalType: "uint64",
            name: "lzComposeBaseGas",
            type: "uint64"
          },
          {
            internalType: "uint16",
            name: "multiplierBps",
            type: "uint16"
          },
          {
            internalType: "uint128",
            name: "floorMarginUSD",
            type: "uint128"
          },
          {
            internalType: "uint128",
            name: "nativeCap",
            type: "uint128"
          }
        ],
        internalType: "struct IExecutor.DstConfigParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setDstConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_paused",
        type: "bool"
      }
    ],
    name: "setPaused",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address"
      }
    ],
    name: "setPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_eid",
        type: "uint32"
      },
      {
        internalType: "uint8[]",
        name: "_optionTypes",
        type: "uint8[]"
      }
    ],
    name: "setSupportedOptionTypes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_workerFeeLib",
        type: "address"
      }
    ],
    name: "setWorkerFeeLib",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lib",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "workerFeeLib",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var Executor = class extends devtoolsEvm.OmniSDK {
  constructor(provider, point) {
    super({ eid: point.eid, contract: new contracts.Contract(point.address, abi5).connect(provider) });
  }
  async getDstConfig(eid) {
    const config = await this.contract.contract.dstConfig(eid);
    return ExecutorDstConfigSchema.parse({ ...config });
  }
  async setDstConfig(eid, value) {
    const data = this.contract.contract.interface.encodeFunctionData("setDstConfig", [
      [this.serializeExecutorConfig(eid, value)]
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting dstConfig for ${devtools.formatEid(eid)}: ${ioDevtools.printJson(value)}`
    };
  }
  serializeExecutorConfig(eid, value) {
    if (typeof value.baseGas === "bigint") {
      return {
        dstEid: eid,
        baseGas: value.baseGas,
        multiplierBps: value.multiplierBps,
        floorMarginUSD: value.floorMarginUSD,
        nativeCap: value.nativeCap
      };
    }
    return {
      dstEid: eid,
      lzComposeBaseGas: value.lzComposeBaseGas,
      lzReceiveBaseGas: value.lzReceiveBaseGas,
      multiplierBps: value.multiplierBps,
      floorMarginUSD: value.floorMarginUSD,
      nativeCap: value.nativeCap
    };
  }
};

// src/executor/factory.ts
var createExecutorFactory = (providerFactory) => pMemoize__default.default(async (point) => new Executor(await providerFactory(point.eid), point));
var PriceDataSchema = protocolDevtools.PriceDataSchema.extend({
  priceRatio: devtoolsEvm.BigNumberishBigIntSchema,
  gasPriceInUnit: devtoolsEvm.BigNumberishBigIntSchema,
  gasPerByte: devtoolsEvm.BigNumberishBigIntSchema
});

// ../../node_modules/.pnpm/@layerzerolabs+lz-evm-sdk-v2@3.0.22/node_modules/@layerzerolabs/lz-evm-sdk-v2/artifacts/contracts/PriceFeed.sol/PriceFeed.json
var abi6 = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "provided",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "required",
        type: "uint256"
      }
    ],
    name: "LZ_PriceFeed_InsufficientFee",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "l2Eid",
        type: "uint32"
      }
    ],
    name: "LZ_PriceFeed_NotAnOPStack",
    type: "error"
  },
  {
    inputs: [],
    name: "LZ_PriceFeed_OnlyPriceUpdater",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256"
      }
    ],
    name: "Transfer_NativeFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "Transfer_ToAddressIsZero",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [],
    name: "ARBITRUM_COMPRESSION_PERCENT",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "arbitrumPriceExt",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "gasPerL2Tx",
            type: "uint64"
          },
          {
            internalType: "uint32",
            name: "gasPerL1CallDataByte",
            type: "uint32"
          }
        ],
        internalType: "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    name: "eidToModelType",
    outputs: [
      {
        internalType: "enum ModelType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "endpoint",
    outputs: [
      {
        internalType: "contract ILayerZeroEndpointV2",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_dstEid",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "_callDataSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256"
      }
    ],
    name: "estimateFeeByChain",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      },
      {
        internalType: "uint128",
        name: "priceRatio",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      },
      {
        internalType: "uint256",
        name: "_callDataSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256"
      }
    ],
    name: "estimateFeeByEid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      },
      {
        internalType: "uint256",
        name: "_callDataSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256"
      }
    ],
    name: "estimateFeeOnSend",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_dstEid",
        type: "uint32"
      }
    ],
    name: "getPrice",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "priceRatio",
            type: "uint128"
          },
          {
            internalType: "uint64",
            name: "gasPriceInUnit",
            type: "uint64"
          },
          {
            internalType: "uint32",
            name: "gasPerByte",
            type: "uint32"
          }
        ],
        internalType: "struct ILayerZeroPriceFeed.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_dstEid",
        type: "uint16"
      }
    ],
    name: "getPrice",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "priceRatio",
            type: "uint128"
          },
          {
            internalType: "uint64",
            name: "gasPriceInUnit",
            type: "uint64"
          },
          {
            internalType: "uint32",
            name: "gasPerByte",
            type: "uint32"
          }
        ],
        internalType: "struct ILayerZeroPriceFeed.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getPriceRatioDenominator",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceUpdater",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "nativeTokenPriceUSD",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "updater",
        type: "address"
      }
    ],
    name: "priceUpdater",
    outputs: [
      {
        internalType: "bool",
        name: "active",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_compressionPercent",
        type: "uint128"
      }
    ],
    name: "setArbitrumCompressionPercent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32"
          },
          {
            internalType: "enum ModelType",
            name: "modelType",
            type: "uint8"
          }
        ],
        internalType: "struct SetEidToModelTypeParam[]",
        name: "_params",
        type: "tuple[]"
      }
    ],
    name: "setEidToModelType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_endpoint",
        type: "address"
      }
    ],
    name: "setEndpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_nativeTokenPriceUSD",
        type: "uint128"
      }
    ],
    name: "setNativeTokenPriceUSD",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "priceRatio",
                type: "uint128"
              },
              {
                internalType: "uint64",
                name: "gasPriceInUnit",
                type: "uint64"
              },
              {
                internalType: "uint32",
                name: "gasPerByte",
                type: "uint32"
              }
            ],
            internalType: "struct ILayerZeroPriceFeed.Price",
            name: "price",
            type: "tuple"
          }
        ],
        internalType: "struct ILayerZeroPriceFeed.UpdatePrice[]",
        name: "_price",
        type: "tuple[]"
      }
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "eid",
            type: "uint32"
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "priceRatio",
                type: "uint128"
              },
              {
                internalType: "uint64",
                name: "gasPriceInUnit",
                type: "uint64"
              },
              {
                internalType: "uint32",
                name: "gasPerByte",
                type: "uint32"
              }
            ],
            internalType: "struct ILayerZeroPriceFeed.Price",
            name: "price",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "gasPerL2Tx",
                type: "uint64"
              },
              {
                internalType: "uint32",
                name: "gasPerL1CallDataByte",
                type: "uint32"
              }
            ],
            internalType: "struct ILayerZeroPriceFeed.ArbitrumPriceExt",
            name: "extend",
            type: "tuple"
          }
        ],
        internalType: "struct ILayerZeroPriceFeed.UpdatePriceExt",
        name: "_update",
        type: "tuple"
      }
    ],
    name: "setPriceForArbitrum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_denominator",
        type: "uint128"
      }
    ],
    name: "setPriceRatioDenominator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address"
      },
      {
        internalType: "bool",
        name: "_active",
        type: "bool"
      }
    ],
    name: "setPriceUpdater",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdrawFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var PriceFeed = class extends devtoolsEvm.OmniSDK {
  constructor(provider, point) {
    super({ eid: point.eid, contract: new contracts.Contract(point.address, abi6).connect(provider) });
  }
  async getPrice(eid) {
    const config = await this.contract.contract["getPrice(uint32)"](eid);
    return PriceDataSchema.parse({ ...config });
  }
  async setPrice(eid, priceData) {
    const data = this.contract.contract.interface.encodeFunctionData("setPrice", [
      [
        {
          eid,
          price: priceData
        }
      ]
    ]);
    return {
      ...this.createTransaction(data),
      description: `Setting price for ${devtools.formatEid(eid)}: ${ioDevtools.printJson(priceData)}`
    };
  }
};

// src/priceFeed/factory.ts
var createPriceFeedFactory = (providerFactory) => pMemoize__default.default(async (point) => new PriceFeed(await providerFactory(point.eid), point));

exports.DVN = DVN;
exports.DVNDstConfigSchema = DVNDstConfigSchema;
exports.EndpointV2 = EndpointV2;
exports.Executor = Executor;
exports.ExecutorDstConfigPost2_1_27Schema = ExecutorDstConfigPost2_1_27Schema;
exports.ExecutorDstConfigPre2_1_27Schema = ExecutorDstConfigPre2_1_27Schema;
exports.ExecutorDstConfigSchema = ExecutorDstConfigSchema;
exports.PriceDataSchema = PriceDataSchema;
exports.PriceFeed = PriceFeed;
exports.Uln302 = Uln302;
exports.UlnRead = UlnRead;
exports.createDVNFactory = createDVNFactory;
exports.createEndpointV2Factory = createEndpointV2Factory;
exports.createExecutorFactory = createExecutorFactory;
exports.createPriceFeedFactory = createPriceFeedFactory;
exports.createUln302Factory = createUln302Factory;
exports.createUlnReadFactory = createUlnReadFactory;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map