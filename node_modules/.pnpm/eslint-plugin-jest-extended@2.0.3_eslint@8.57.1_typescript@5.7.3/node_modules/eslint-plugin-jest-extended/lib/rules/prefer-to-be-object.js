"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("@typescript-eslint/utils");
var _utils2 = require("./utils");
var _default = exports.default = (0, _utils2.createRule)({
  name: __filename,
  meta: {
    docs: {
      category: 'Stylistic Issues',
      description: 'Suggest using `toBeObject()`',
      recommended: false
    },
    messages: {
      preferToBeObject: 'Prefer using `toBeObject()` to test if a value is an Object.'
    },
    fixable: 'code',
    type: 'suggestion',
    schema: []
  },
  defaultOptions: [],
  create(context) {
    return {
      CallExpression(node) {
        const jestFnCall = (0, _utils2.parseJestFnCall)(node, context);
        if ((jestFnCall === null || jestFnCall === void 0 ? void 0 : jestFnCall.type) !== 'expect') {
          return;
        }
        if ((0, _utils2.isParsedInstanceOfMatcherCall)(jestFnCall, 'Object')) {
          context.report({
            node: jestFnCall.matcher,
            messageId: 'preferToBeObject',
            fix: fixer => [fixer.replaceTextRange([jestFnCall.matcher.range[0], jestFnCall.matcher.range[1] + '(Object)'.length], 'toBeObject()')]
          });
          return;
        }
        const {
          parent: expect
        } = jestFnCall.head.node;
        if ((expect === null || expect === void 0 ? void 0 : expect.type) !== _utils.AST_NODE_TYPES.CallExpression) {
          return;
        }
        const [expectArg] = expect.arguments;
        if (!expectArg || !(0, _utils2.isBooleanEqualityMatcher)(jestFnCall) || !(0, _utils2.isInstanceOfBinaryExpression)(expectArg, 'Object')) {
          return;
        }
        context.report({
          node: jestFnCall.matcher,
          messageId: 'preferToBeObject',
          fix(fixer) {
            var _jestFnCall$args;
            const fixes = [fixer.replaceText(jestFnCall.matcher, 'toBeObject'), fixer.removeRange([expectArg.left.range[1], expectArg.range[1]])];
            let invertCondition = (0, _utils2.getAccessorValue)(jestFnCall.matcher) === 'toBeFalse';
            if ((_jestFnCall$args = jestFnCall.args) !== null && _jestFnCall$args !== void 0 && _jestFnCall$args.length) {
              const [matcherArg] = jestFnCall.args;
              fixes.push(fixer.remove(matcherArg));

              // toBeFalse can't have arguments, so this won't be true beforehand
              invertCondition = matcherArg.type === _utils.AST_NODE_TYPES.Literal && (0, _utils2.followTypeAssertionChain)(matcherArg).value === false;
            }
            if (invertCondition) {
              const notModifier = jestFnCall.modifiers.find(nod => (0, _utils2.getAccessorValue)(nod) === 'not');
              fixes.push(notModifier ? fixer.removeRange([notModifier.range[0] - 1, notModifier.range[1]]) : fixer.insertTextBefore(jestFnCall.matcher, 'not.'));
            }
            return fixes;
          }
        });
      }
    };
  }
});