{
  "address": "0xc2868Ab0Af30fb32e9ecB4F82E7d27cDFC6FE46c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nonceContract",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_localChainId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lib",
          "type": "address"
        }
      ],
      "name": "AddInboundProofLibraryForChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userApplication",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newConfig",
          "type": "bytes"
        }
      ],
      "name": "AppConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "proofType",
          "type": "uint16"
        }
      ],
      "name": "EnableSupportedOutboundProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "lookupHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockData",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        }
      ],
      "name": "HashReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidDst",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "Packet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "PacketReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "adapterParams",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        }
      ],
      "name": "RelayerParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "SetChainAddressSize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "proofType",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "adapterParams",
          "type": "bytes"
        }
      ],
      "name": "SetDefaultAdapterParamsForChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "inboundProofLib",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "inboundBlockConfirm",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "outboundBlockConfirm",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "SetDefaultConfigForChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "SetLayerZeroToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uln",
          "type": "bytes32"
        }
      ],
      "name": "SetRemoteUln",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawNative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawZRO",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_ORACLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_OUTBOUND_PROOF_TYPE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_RELAYER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "accruedNativeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_library",
          "type": "address"
        }
      ],
      "name": "addInboundProofLibraryForChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "appConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "inboundProofLibraryVersion",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "inboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "outboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainAddressSizeMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "defaultAdapterParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "defaultAppConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "inboundProofLibraryVersion",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "inboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "outboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_proofType",
          "type": "uint16"
        }
      ],
      "name": "enableSupportedOutboundProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInZRO",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        }
      ],
      "name": "getAppConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "inboundProofLibraryVersion",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "inboundBlockConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "outboundProofType",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "outboundBlockConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct ILayerZeroUltraLightNodeV2.ApplicationConfiguration",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "getOutboundNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "inboundProofLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "layerZeroToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "maxInboundProofLibrary",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nativeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonceContract",
      "outputs": [
        {
          "internalType": "contract NonceContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setChainAddressSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_proofType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "setDefaultAdapterParamsForChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_inboundProofLibraryVersion",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_inboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_outboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setDefaultConfigForChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layerZeroToken",
          "type": "address"
        }
      ],
      "name": "setLayerZeroToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_remoteUln",
          "type": "bytes32"
        }
      ],
      "name": "setRemoteUln",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "supportedOutboundProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "contract ILayerZeroTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryZROFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "ulnLookup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_lookupHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_confirmations",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockData",
          "type": "bytes32"
        }
      ],
      "name": "updateHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_lookupHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_blockData",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        }
      ],
      "name": "validateTransactionProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawZRO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bd303b7d7a6e3e3bff10abbc31e8da4d085a3787148b89c0641a0d2e8697fbf",
  "receipt": {
    "to": null,
    "from": "0x9F403140Bc0574D7d36eA472b82DAa1Bbd4eF327",
    "contractAddress": "0xc2868Ab0Af30fb32e9ecB4F82E7d27cDFC6FE46c",
    "transactionIndex": 43,
    "gasUsed": "4544245",
    "logsBloom": "0x
    "blockHash": "0x0000000003a48b579b164a0af6f37dbb59ae49a37a0b4f6a2acec956cc2b84f0",
    "transactionHash": "0x4bd303b7d7a6e3e3bff10abbc31e8da4d085a3787148b89c0641a0d2e8697fbf",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 61115223,
        "transactionHash": "0x4bd303b7d7a6e3e3bff10abbc31e8da4d085a3787148b89c0641a0d2e8697fbf",
        "address": "0xc2868Ab0Af30fb32e9ecB4F82E7d27cDFC6FE46c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009f403140bc0574d7d36ea472b82daa1bbd4ef327"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x0000000003a48b579b164a0af6f37dbb59ae49a37a0b4f6a2acec956cc2b84f0"
      }
    ],
    "blockNumber": 61115223,
    "cumulativeGasUsed": "4799405",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3f274752b420D1e28CB5516a2b30a1fabBdab0cF",
    "0xb00962f7f4e655Ded746f6eb9D0B20a09A884dd9",
    420
  ],
  "numDeployments": 1,
  "solcInputHash": "622b844661474b8045121f0af3f3ddc5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.d1802f25\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nonceContract\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_localChainId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"AddInboundProofLibraryForChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userApplication\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newConfig\",\"type\":\"bytes\"}],\"name\":\"AppConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proofType\",\"type\":\"uint16\"}],\"name\":\"EnableSupportedOutboundProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lookupHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockData\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"}],\"name\":\"HashReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidDst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"Packet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"PacketReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"}],\"name\":\"RelayerParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"SetChainAddressSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"proofType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"name\":\"SetDefaultAdapterParamsForChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"inboundProofLib\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirm\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"outboundBlockConfirm\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetDefaultConfigForChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"SetLayerZeroToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uln\",\"type\":\"bytes32\"}],\"name\":\"SetRemoteUln\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawZRO\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_ORACLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_OUTBOUND_PROOF_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_RELAYER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"accruedNativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_library\",\"type\":\"address\"}],\"name\":\"addInboundProofLibraryForChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"appConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"inboundProofLibraryVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"outboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainAddressSizeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"defaultAdapterParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"defaultAppConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"inboundProofLibraryVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"outboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_proofType\",\"type\":\"uint16\"}],\"name\":\"enableSupportedOutboundProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInZRO\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"}],\"name\":\"getAppConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"inboundProofLibraryVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"outboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct ILayerZeroUltraLightNodeV2.ApplicationConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"getOutboundNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"inboundProofLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerZeroToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"maxInboundProofLibrary\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nativeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonceContract\",\"outputs\":[{\"internalType\":\"contract NonceContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setChainAddressSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_proofType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"setDefaultAdapterParamsForChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_inboundProofLibraryVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_inboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_outboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setDefaultConfigForChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layerZeroToken\",\"type\":\"address\"}],\"name\":\"setLayerZeroToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_remoteUln\",\"type\":\"bytes32\"}],\"name\":\"setRemoteUln\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"supportedOutboundProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"contract ILayerZeroTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryZROFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"ulnLookup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_lookupHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_confirmations\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockData\",\"type\":\"bytes32\"}],\"name\":\"updateHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lookupHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_blockData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"}],\"name\":\"validateTransactionProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawZRO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UltraLightNodeV2.sol\":\"UltraLightNodeV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/NonceContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\ncontract NonceContract {\\n    ILayerZeroEndpoint public immutable endpoint;\\n    // outboundNonce = [dstChainId][remoteAddress + localAddress]\\n    mapping(uint16 => mapping(bytes => uint64)) public outboundNonce;\\n\\n    constructor(address _endpoint) {\\n        endpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function increment(uint16 _chainId, address _ua, bytes calldata _path) external returns (uint64) {\\n        require(\\n            endpoint.getSendLibraryAddress(_ua) == msg.sender,\\n            \\\"NonceContract: msg.sender is not valid sendlibrary\\\"\\n        );\\n        return ++outboundNonce[_chainId][_path];\\n    }\\n}\\n\",\"keccak256\":\"0x5f99165219fc2d46d48e943ec072b0f55f01398afe167d61cd671d1440ff53c3\",\"license\":\"BUSL-1.1\"},\"contracts/UltraLightNodeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroValidationLibrary.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroTreasury.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n// v2\\nimport \\\"./interfaces/ILayerZeroMessagingLibraryV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroOracleV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUltraLightNodeV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroRelayerV2.sol\\\";\\nimport \\\"./NonceContract.sol\\\";\\n\\ncontract UltraLightNodeV2 is ILayerZeroMessagingLibraryV2, ILayerZeroUltraLightNodeV2, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n\\n    // Application config\\n    uint public constant CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION = 1;\\n    uint public constant CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS = 2;\\n    uint public constant CONFIG_TYPE_RELAYER = 3;\\n    uint public constant CONFIG_TYPE_OUTBOUND_PROOF_TYPE = 4;\\n    uint public constant CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS = 5;\\n    uint public constant CONFIG_TYPE_ORACLE = 6;\\n\\n    // Token and Contracts\\n    IERC20 public layerZeroToken;\\n    ILayerZeroTreasury public treasuryContract;\\n\\n    mapping(address => uint) public nativeFees;\\n    uint public treasuryZROFees;\\n\\n    // User Application\\n    mapping(address => mapping(uint16 => ApplicationConfiguration)) public appConfig; // app address => chainId => config\\n    mapping(uint16 => ApplicationConfiguration) public defaultAppConfig; // default UA settings if no version specified\\n    mapping(uint16 => mapping(uint16 => bytes)) public defaultAdapterParams;\\n\\n    // Validation\\n    mapping(uint16 => mapping(uint16 => address)) public inboundProofLibrary; // chainId => library Id => inboundProofLibrary contract\\n    mapping(uint16 => uint16) public maxInboundProofLibrary; // chainId => inboundProofLibrary\\n    mapping(uint16 => mapping(uint16 => bool)) public supportedOutboundProof; // chainId => outboundProofType => enabled\\n    mapping(uint16 => uint) public chainAddressSizeMap;\\n    mapping(address => mapping(uint16 => mapping(bytes32 => mapping(bytes32 => uint)))) public hashLookup; //[oracle][srcChainId][blockhash][datahash] -> confirmation\\n    mapping(uint16 => bytes32) public ulnLookup; // remote ulns\\n\\n    ILayerZeroEndpoint public immutable endpoint;\\n    uint16 public immutable localChainId;\\n    NonceContract public immutable nonceContract;\\n\\n    constructor(address _endpoint, address _nonceContract, uint16 _localChainId) {\\n        require(_endpoint != address(0x0), \\\"LayerZero: endpoint cannot be zero address\\\");\\n        require(_nonceContract != address(0x0), \\\"LayerZero: nonceContract cannot be zero address\\\");\\n        ILayerZeroEndpoint lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n        localChainId = _localChainId;\\n        endpoint = lzEndpoint;\\n        nonceContract = NonceContract(_nonceContract);\\n    }\\n\\n    // only the endpoint can call SEND() and setConfig()\\n    modifier onlyEndpoint() {\\n        require(address(endpoint) == msg.sender, \\\"LayerZero: only endpoint\\\");\\n        _;\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // PROTOCOL\\n    function validateTransactionProof(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _lookupHash,\\n        bytes32 _blockData,\\n        bytes calldata _transactionProof\\n    ) external override {\\n        // retrieve UA's configuration using the _dstAddress from arguments.\\n        ApplicationConfiguration memory uaConfig = _getAppConfig(_srcChainId, _dstAddress);\\n\\n        // assert that the caller == UA's relayer\\n        require(uaConfig.relayer == msg.sender, \\\"LayerZero: invalid relayer\\\");\\n\\n        LayerZeroPacket.Packet memory _packet;\\n        uint remoteAddressSize = chainAddressSizeMap[_srcChainId];\\n        require(remoteAddressSize != 0, \\\"LayerZero: incorrect remote address size\\\");\\n        {\\n            // assert that the data submitted by UA's oracle have no fewer confirmations than UA's configuration\\n            uint storedConfirmations = hashLookup[uaConfig.oracle][_srcChainId][_lookupHash][_blockData];\\n            require(\\n                storedConfirmations > 0 && storedConfirmations >= uaConfig.inboundBlockConfirmations,\\n                \\\"LayerZero: not enough block confirmations\\\"\\n            );\\n\\n            // decode\\n            address inboundProofLib = inboundProofLibrary[_srcChainId][uaConfig.inboundProofLibraryVersion];\\n            _packet = ILayerZeroValidationLibrary(inboundProofLib).validateProof(\\n                _blockData,\\n                _transactionProof,\\n                remoteAddressSize\\n            );\\n        }\\n\\n        // packet content assertion\\n        require(\\n            ulnLookup[_srcChainId] == _packet.ulnAddress && _packet.ulnAddress != bytes32(0),\\n            \\\"LayerZero: invalid _packet.ulnAddress\\\"\\n        );\\n        require(_packet.srcChainId == _srcChainId, \\\"LayerZero: invalid srcChain Id\\\");\\n        // failsafe because the remoteAddress size being passed into validateProof trims the address this should not hit\\n        require(_packet.srcAddress.length == remoteAddressSize, \\\"LayerZero: invalid srcAddress size\\\");\\n        require(_packet.dstChainId == localChainId, \\\"LayerZero: invalid dstChain Id\\\");\\n        require(_packet.dstAddress == _dstAddress, \\\"LayerZero: invalid dstAddress\\\");\\n\\n        // if the dst is not a contract, then emit and return early. This will break inbound nonces, but this particular\\n        // path is already broken and wont ever be able to deliver anyways\\n        if (!_isContract(_dstAddress)) {\\n            emit InvalidDst(\\n                _packet.srcChainId,\\n                _packet.srcAddress,\\n                _packet.dstAddress,\\n                _packet.nonce,\\n                keccak256(_packet.payload)\\n            );\\n            return;\\n        }\\n\\n        bytes memory pathData = abi.encodePacked(_packet.srcAddress, _packet.dstAddress);\\n        emit PacketReceived(\\n            _packet.srcChainId,\\n            _packet.srcAddress,\\n            _packet.dstAddress,\\n            _packet.nonce,\\n            keccak256(_packet.payload)\\n        );\\n        endpoint.receivePayload(_srcChainId, pathData, _dstAddress, _packet.nonce, _gasLimit, _packet.payload);\\n    }\\n\\n    function send(\\n        address _ua,\\n        uint64,\\n        uint16 _dstChainId,\\n        bytes calldata _path,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable override onlyEndpoint {\\n        address ua = _ua;\\n        uint16 dstChainId = _dstChainId;\\n        require(ulnLookup[dstChainId] != bytes32(0), \\\"LayerZero: dstChainId does not exist\\\");\\n\\n        bytes memory dstAddress;\\n        uint64 nonce;\\n        // code block for solving 'Stack Too Deep'\\n        {\\n            uint chainAddressSize = chainAddressSizeMap[dstChainId];\\n            // path = remoteAddress + localAddress\\n            require(\\n                chainAddressSize != 0 && _path.length == 20 + chainAddressSize,\\n                \\\"LayerZero: incorrect remote address size\\\"\\n            );\\n            address srcInPath;\\n            bytes memory path = _path; // copy to memory\\n            assembly {\\n                srcInPath := mload(add(add(path, 20), chainAddressSize)) // chainAddressSize + 20\\n            }\\n            require(ua == srcInPath, \\\"LayerZero: wrong path data\\\");\\n            dstAddress = _path[0:chainAddressSize];\\n            nonce = nonceContract.increment(dstChainId, ua, path);\\n        }\\n\\n        bytes memory payload = _payload;\\n        ApplicationConfiguration memory uaConfig = _getAppConfig(dstChainId, ua);\\n\\n        // compute all the fees\\n        uint relayerFee = _handleRelayer(dstChainId, uaConfig, ua, payload.length, _adapterParams);\\n        uint oracleFee = _handleOracle(dstChainId, uaConfig, ua);\\n        uint nativeProtocolFee = _handleProtocolFee(relayerFee, oracleFee, ua, _zroPaymentAddress);\\n\\n        // total native fee, does not include ZRO protocol fee\\n        uint totalNativeFee = relayerFee.add(oracleFee).add(nativeProtocolFee);\\n\\n        // assert the user has attached enough native token for this address\\n        require(totalNativeFee <= msg.value, \\\"LayerZero: not enough native for fees\\\");\\n        // refund if they send too much\\n        uint amount = msg.value.sub(totalNativeFee);\\n        if (amount > 0) {\\n            (bool success, ) = _refundAddress.call{value: amount}(\\\"\\\");\\n            require(success, \\\"LayerZero: failed to refund\\\");\\n        }\\n\\n        // emit the data packet\\n        bytes memory encodedPayload = abi.encodePacked(nonce, localChainId, ua, dstChainId, dstAddress, payload);\\n        emit Packet(encodedPayload);\\n    }\\n\\n    function _handleRelayer(\\n        uint16 _dstChainId,\\n        ApplicationConfiguration memory _uaConfig,\\n        address _ua,\\n        uint _payloadSize,\\n        bytes memory _adapterParams\\n    ) internal returns (uint relayerFee) {\\n        if (_adapterParams.length == 0) {\\n            _adapterParams = defaultAdapterParams[_dstChainId][_uaConfig.outboundProofType];\\n        }\\n        address relayerAddress = _uaConfig.relayer;\\n        ILayerZeroRelayerV2 relayer = ILayerZeroRelayerV2(relayerAddress);\\n        relayerFee = relayer.assignJob(_dstChainId, _uaConfig.outboundProofType, _ua, _payloadSize, _adapterParams);\\n\\n        _creditNativeFee(relayerAddress, relayerFee);\\n\\n        // emit the param events\\n        emit RelayerParams(_adapterParams, _uaConfig.outboundProofType);\\n    }\\n\\n    function _handleOracle(\\n        uint16 _dstChainId,\\n        ApplicationConfiguration memory _uaConfig,\\n        address _ua\\n    ) internal returns (uint oracleFee) {\\n        address oracleAddress = _uaConfig.oracle;\\n        oracleFee = ILayerZeroOracleV2(oracleAddress).assignJob(\\n            _dstChainId,\\n            _uaConfig.outboundProofType,\\n            _uaConfig.outboundBlockConfirmations,\\n            _ua\\n        );\\n\\n        _creditNativeFee(oracleAddress, oracleFee);\\n    }\\n\\n    function _handleProtocolFee(\\n        uint _relayerFee,\\n        uint _oracleFee,\\n        address _ua,\\n        address _zroPaymentAddress\\n    ) internal returns (uint protocolNativeFee) {\\n        // if no ZRO token or not specifying a payment address, pay in native token\\n        bool payInNative = _zroPaymentAddress == address(0x0) || address(layerZeroToken) == address(0x0);\\n        uint protocolFee = treasuryContract.getFees(!payInNative, _relayerFee, _oracleFee);\\n\\n        if (protocolFee > 0) {\\n            if (payInNative) {\\n                address treasuryAddress = address(treasuryContract);\\n                _creditNativeFee(treasuryAddress, protocolFee);\\n                protocolNativeFee = protocolFee;\\n            } else {\\n                // zro payment address must equal the ua or the tx.origin otherwise the transaction reverts\\n                require(\\n                    _zroPaymentAddress == _ua || _zroPaymentAddress == tx.origin,\\n                    \\\"LayerZero: must be paid by sender or origin\\\"\\n                );\\n\\n                // transfer the LayerZero token to this contract from the payee\\n                layerZeroToken.safeTransferFrom(_zroPaymentAddress, address(this), protocolFee);\\n\\n                treasuryZROFees = treasuryZROFees.add(protocolFee);\\n            }\\n        }\\n    }\\n\\n    function _creditNativeFee(address _receiver, uint _amount) internal {\\n        nativeFees[_receiver] = nativeFees[_receiver].add(_amount);\\n    }\\n\\n    // Can be called by any address to update a block header\\n    // can only upload new block data or the same block data with more confirmations\\n    function updateHash(\\n        uint16 _srcChainId,\\n        bytes32 _lookupHash,\\n        uint _confirmations,\\n        bytes32 _blockData\\n    ) external override {\\n        uint storedConfirmations = hashLookup[msg.sender][_srcChainId][_lookupHash][_blockData];\\n\\n        // if it has a record, requires a larger confirmation.\\n        require(\\n            storedConfirmations < _confirmations,\\n            \\\"LayerZero: oracle data can only update if it has more confirmations\\\"\\n        );\\n\\n        // set the new information into storage\\n        hashLookup[msg.sender][_srcChainId][_lookupHash][_blockData] = _confirmations;\\n\\n        emit HashReceived(_srcChainId, msg.sender, _lookupHash, _blockData, _confirmations);\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // Other Library Interfaces\\n\\n    // default to DEFAULT setting if ZERO value\\n    function getAppConfig(\\n        uint16 _remoteChainId,\\n        address _ua\\n    ) external view override returns (ApplicationConfiguration memory) {\\n        return _getAppConfig(_remoteChainId, _ua);\\n    }\\n\\n    function _getAppConfig(uint16 _remoteChainId, address _ua) internal view returns (ApplicationConfiguration memory) {\\n        ApplicationConfiguration memory config = appConfig[_ua][_remoteChainId];\\n        ApplicationConfiguration storage defaultConfig = defaultAppConfig[_remoteChainId];\\n\\n        if (config.inboundProofLibraryVersion == 0) {\\n            config.inboundProofLibraryVersion = defaultConfig.inboundProofLibraryVersion;\\n        }\\n\\n        if (config.inboundBlockConfirmations == 0) {\\n            config.inboundBlockConfirmations = defaultConfig.inboundBlockConfirmations;\\n        }\\n\\n        if (config.relayer == address(0x0)) {\\n            config.relayer = defaultConfig.relayer;\\n        }\\n\\n        if (config.outboundProofType == 0) {\\n            config.outboundProofType = defaultConfig.outboundProofType;\\n        }\\n\\n        if (config.outboundBlockConfirmations == 0) {\\n            config.outboundBlockConfirmations = defaultConfig.outboundBlockConfirmations;\\n        }\\n\\n        if (config.oracle == address(0x0)) {\\n            config.oracle = defaultConfig.oracle;\\n        }\\n\\n        return config;\\n    }\\n\\n    function setConfig(\\n        uint16 _remoteChainId,\\n        address _ua,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyEndpoint {\\n        ApplicationConfiguration storage uaConfig = appConfig[_ua][_remoteChainId];\\n        if (_configType == CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION) {\\n            uint16 inboundProofLibraryVersion = abi.decode(_config, (uint16));\\n            require(\\n                inboundProofLibraryVersion <= maxInboundProofLibrary[_remoteChainId],\\n                \\\"LayerZero: invalid inbound proof library version\\\"\\n            );\\n            uaConfig.inboundProofLibraryVersion = inboundProofLibraryVersion;\\n        } else if (_configType == CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS) {\\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\\n            uaConfig.inboundBlockConfirmations = blockConfirmations;\\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\\n            address relayer = abi.decode(_config, (address));\\n            uaConfig.relayer = relayer;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_PROOF_TYPE) {\\n            uint16 outboundProofType = abi.decode(_config, (uint16));\\n            require(\\n                supportedOutboundProof[_remoteChainId][outboundProofType] || outboundProofType == 0,\\n                \\\"LayerZero: invalid outbound proof type\\\"\\n            );\\n            uaConfig.outboundProofType = outboundProofType;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS) {\\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\\n            uaConfig.outboundBlockConfirmations = blockConfirmations;\\n        } else if (_configType == CONFIG_TYPE_ORACLE) {\\n            address oracle = abi.decode(_config, (address));\\n            uaConfig.oracle = oracle;\\n        } else {\\n            revert(\\\"LayerZero: Invalid config type\\\");\\n        }\\n\\n        emit AppConfigUpdated(_ua, _configType, _config);\\n    }\\n\\n    function getConfig(\\n        uint16 _remoteChainId,\\n        address _ua,\\n        uint _configType\\n    ) external view override returns (bytes memory) {\\n        ApplicationConfiguration storage uaConfig = appConfig[_ua][_remoteChainId];\\n\\n        if (_configType == CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION) {\\n            if (uaConfig.inboundProofLibraryVersion == 0) {\\n                return abi.encode(defaultAppConfig[_remoteChainId].inboundProofLibraryVersion);\\n            }\\n            return abi.encode(uaConfig.inboundProofLibraryVersion);\\n        } else if (_configType == CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS) {\\n            if (uaConfig.inboundBlockConfirmations == 0) {\\n                return abi.encode(defaultAppConfig[_remoteChainId].inboundBlockConfirmations);\\n            }\\n            return abi.encode(uaConfig.inboundBlockConfirmations);\\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\\n            if (uaConfig.relayer == address(0x0)) {\\n                return abi.encode(defaultAppConfig[_remoteChainId].relayer);\\n            }\\n            return abi.encode(uaConfig.relayer);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_PROOF_TYPE) {\\n            if (uaConfig.outboundProofType == 0) {\\n                return abi.encode(defaultAppConfig[_remoteChainId].outboundProofType);\\n            }\\n            return abi.encode(uaConfig.outboundProofType);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS) {\\n            if (uaConfig.outboundBlockConfirmations == 0) {\\n                return abi.encode(defaultAppConfig[_remoteChainId].outboundBlockConfirmations);\\n            }\\n            return abi.encode(uaConfig.outboundBlockConfirmations);\\n        } else if (_configType == CONFIG_TYPE_ORACLE) {\\n            if (uaConfig.oracle == address(0x0)) {\\n                return abi.encode(defaultAppConfig[_remoteChainId].oracle);\\n            }\\n            return abi.encode(uaConfig.oracle);\\n        } else {\\n            revert(\\\"LayerZero: Invalid config type\\\");\\n        }\\n    }\\n\\n    // returns the native fee the UA pays to cover fees\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _ua,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParams\\n    ) external view override returns (uint nativeFee, uint zroFee) {\\n        ApplicationConfiguration memory uaConfig = _getAppConfig(_dstChainId, _ua);\\n\\n        // Relayer Fee\\n        bytes memory adapterParams;\\n        if (_adapterParams.length > 0) {\\n            adapterParams = _adapterParams;\\n        } else {\\n            adapterParams = defaultAdapterParams[_dstChainId][uaConfig.outboundProofType];\\n        }\\n        uint relayerFee = ILayerZeroRelayerV2(uaConfig.relayer).getFee(\\n            _dstChainId,\\n            uaConfig.outboundProofType,\\n            _ua,\\n            _payload.length,\\n            adapterParams\\n        );\\n\\n        // Oracle Fee\\n        address ua = _ua; // stack too deep\\n        uint oracleFee = ILayerZeroOracleV2(uaConfig.oracle).getFee(\\n            _dstChainId,\\n            uaConfig.outboundProofType,\\n            uaConfig.outboundBlockConfirmations,\\n            ua\\n        );\\n\\n        // LayerZero Fee\\n        uint protocolFee = treasuryContract.getFees(_payInZRO, relayerFee, oracleFee);\\n        _payInZRO ? zroFee = protocolFee : nativeFee = protocolFee;\\n\\n        // return the sum of fees\\n        nativeFee = nativeFee.add(relayerFee).add(oracleFee);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Claim Fees\\n\\n    // universal withdraw ZRO token function\\n    function withdrawZRO(address _to, uint _amount) external override nonReentrant {\\n        require(msg.sender == address(treasuryContract), \\\"LayerZero: only treasury\\\");\\n        treasuryZROFees = treasuryZROFees.sub(_amount);\\n        layerZeroToken.safeTransfer(_to, _amount);\\n        emit WithdrawZRO(msg.sender, _to, _amount);\\n    }\\n\\n    // universal withdraw native token function.\\n    // the source contract should perform all the authentication control\\n    function withdrawNative(address payable _to, uint _amount) external override nonReentrant {\\n        require(_to != address(0x0), \\\"LayerZero: _to cannot be zero address\\\");\\n        nativeFees[msg.sender] = nativeFees[msg.sender].sub(_amount);\\n\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"LayerZero: withdraw failed\\\");\\n        emit WithdrawNative(msg.sender, _to, _amount);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Owner calls, configuration only.\\n    function setLayerZeroToken(address _layerZeroToken) external onlyOwner {\\n        require(_layerZeroToken != address(0x0), \\\"LayerZero: _layerZeroToken cannot be zero address\\\");\\n        layerZeroToken = IERC20(_layerZeroToken);\\n        emit SetLayerZeroToken(_layerZeroToken);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0x0), \\\"LayerZero: treasury cannot be zero address\\\");\\n        treasuryContract = ILayerZeroTreasury(_treasury);\\n        emit SetTreasury(_treasury);\\n    }\\n\\n    function addInboundProofLibraryForChain(uint16 _chainId, address _library) external onlyOwner {\\n        require(_library != address(0x0), \\\"LayerZero: library cannot be zero address\\\");\\n        uint16 libId = maxInboundProofLibrary[_chainId];\\n        require(libId < 65535, \\\"LayerZero: can not add new library\\\");\\n        maxInboundProofLibrary[_chainId] = ++libId;\\n        inboundProofLibrary[_chainId][libId] = _library;\\n        emit AddInboundProofLibraryForChain(_chainId, _library);\\n    }\\n\\n    function enableSupportedOutboundProof(uint16 _chainId, uint16 _proofType) external onlyOwner {\\n        supportedOutboundProof[_chainId][_proofType] = true;\\n        emit EnableSupportedOutboundProof(_chainId, _proofType);\\n    }\\n\\n    function setDefaultConfigForChainId(\\n        uint16 _chainId,\\n        uint16 _inboundProofLibraryVersion,\\n        uint64 _inboundBlockConfirmations,\\n        address _relayer,\\n        uint16 _outboundProofType,\\n        uint64 _outboundBlockConfirmations,\\n        address _oracle\\n    ) external onlyOwner {\\n        require(\\n            _inboundProofLibraryVersion <= maxInboundProofLibrary[_chainId] && _inboundProofLibraryVersion > 0,\\n            \\\"LayerZero: invalid inbound proof library version\\\"\\n        );\\n        require(_inboundBlockConfirmations > 0, \\\"LayerZero: invalid inbound block confirmation\\\");\\n        require(_relayer != address(0x0), \\\"LayerZero: invalid relayer address\\\");\\n        require(supportedOutboundProof[_chainId][_outboundProofType], \\\"LayerZero: invalid outbound proof type\\\");\\n        require(_outboundBlockConfirmations > 0, \\\"LayerZero: invalid outbound block confirmation\\\");\\n        require(_oracle != address(0x0), \\\"LayerZero: invalid oracle address\\\");\\n        defaultAppConfig[_chainId] = ApplicationConfiguration(\\n            _inboundProofLibraryVersion,\\n            _inboundBlockConfirmations,\\n            _relayer,\\n            _outboundProofType,\\n            _outboundBlockConfirmations,\\n            _oracle\\n        );\\n        emit SetDefaultConfigForChainId(\\n            _chainId,\\n            _inboundProofLibraryVersion,\\n            _inboundBlockConfirmations,\\n            _relayer,\\n            _outboundProofType,\\n            _outboundBlockConfirmations,\\n            _oracle\\n        );\\n    }\\n\\n    function setDefaultAdapterParamsForChainId(\\n        uint16 _chainId,\\n        uint16 _proofType,\\n        bytes calldata _adapterParams\\n    ) external onlyOwner {\\n        defaultAdapterParams[_chainId][_proofType] = _adapterParams;\\n        emit SetDefaultAdapterParamsForChainId(_chainId, _proofType, _adapterParams);\\n    }\\n\\n    function setRemoteUln(uint16 _remoteChainId, bytes32 _remoteUln) external onlyOwner {\\n        require(ulnLookup[_remoteChainId] == bytes32(0), \\\"LayerZero: remote uln already set\\\");\\n        ulnLookup[_remoteChainId] = _remoteUln;\\n        emit SetRemoteUln(_remoteChainId, _remoteUln);\\n    }\\n\\n    function setChainAddressSize(uint16 _chainId, uint _size) external onlyOwner {\\n        require(chainAddressSizeMap[_chainId] == 0, \\\"LayerZero: remote chain address size already set\\\");\\n        chainAddressSizeMap[_chainId] = _size;\\n        emit SetChainAddressSize(_chainId, _size);\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // view functions\\n\\n    function accruedNativeFee(address _address) external view override returns (uint) {\\n        return nativeFees[_address];\\n    }\\n\\n    function getOutboundNonce(uint16 _chainId, bytes calldata _path) external view override returns (uint64) {\\n        return nonceContract.outboundNonce(_chainId, _path);\\n    }\\n\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd15572b97a1254c383ffb398ca7cd7387afdb79a58cbc8d9e62d39af7095076a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xb6a446c0b622566f8c2e2ae4c32208bcc3f815c5f5657a27fa48d583e31f7b7d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroMessagingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroMessagingLibrary {\\n    // send(), messages will be inflight.\\n    function send(\\n        address _userApplication,\\n        uint64 _lastNonce,\\n        uint16 _chainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // estimate native fee at the send side\\n    function estimateFees(\\n        uint16 _chainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    //---------------------------------------------------------------------------\\n    // setConfig / getConfig are User Application (UA) functions to specify Oracle, Relayer, blockConfirmations, libraryVersion\\n    function setConfig(uint16 _chainId, address _userApplication, uint _configType, bytes calldata _config) external;\\n\\n    function getConfig(\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x7fb6d715e58bdad860e194c7b34cc3539fa27df54dbb18d1b41e4da08c064418\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroMessagingLibraryV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"./ILayerZeroMessagingLibrary.sol\\\";\\n\\ninterface ILayerZeroMessagingLibraryV2 is ILayerZeroMessagingLibrary {\\n    function getOutboundNonce(uint16 _chainId, bytes calldata _path) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd09ee2e217df11d53037c02aa6b5364fc460eb722f840bd19d331780f26093f9\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroOracleV2 {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _outboundBlockConfirmation - block confirmation delay before relaying blocks\\n    // @param _userApplication - the source sending contract address\\n    function assignJob(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        uint64 _outboundBlockConfirmation,\\n        address _userApplication\\n    ) external returns (uint price);\\n\\n    // @notice query the oracle price for relaying block information to the destination chain\\n    // @param _dstChainId the destination endpoint identifier\\n    // @param _outboundProofType the proof type identifier to specify the data to be relayed\\n    // @param _outboundBlockConfirmation - block confirmation delay before relaying blocks\\n    // @param _userApplication - the source sending contract address\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        uint64 _outboundBlockConfirmation,\\n        address _userApplication\\n    ) external view returns (uint price);\\n\\n    // @notice withdraw the accrued fee in ultra light node\\n    // @param _to - the fee receiver\\n    // @param _amount - the withdrawal amount\\n    function withdrawFee(address payable _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0x0ca8e769fd037557f74a48c6a20e7488f9814fdac96f63b0e696e8ddff8e68b9\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xd1617e455d90d41556bba636bc440627d301ec481de16ff04fbd520333c3c6f3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroRelayerV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroRelayerV2 {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external returns (uint price);\\n\\n    // @notice query the relayer price for relaying the payload and its proof to the destination chain\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint price);\\n\\n    // @notice withdraw the accrued fee in ultra light node\\n    // @param _to - the fee receiver\\n    // @param _amount - the withdrawal amount\\n    function withdrawFee(address payable _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0x107681e3ab53b6b34780fe6c540e4ad2d149f94fdfe3e7b16e1101dc92ae914e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroTreasury {\\n    function getFees(bool payInZro, uint relayerFee, uint oracleFee) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf30814340363b85498937030f671adb282435ca16d350ce2210d28b75901a1e4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroUltraLightNodeV2 {\\n    // Relayer functions\\n    function validateTransactionProof(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _lookupHash,\\n        bytes32 _blockData,\\n        bytes calldata _transactionProof\\n    ) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function getAppConfig(\\n        uint16 _remoteChainId,\\n        address _userApplicationAddress\\n    ) external view returns (ApplicationConfiguration memory);\\n\\n    function accruedNativeFee(address _address) external view returns (uint);\\n\\n    struct ApplicationConfiguration {\\n        uint16 inboundProofLibraryVersion;\\n        uint64 inboundBlockConfirmations;\\n        address relayer;\\n        uint16 outboundProofType;\\n        uint64 outboundBlockConfirmations;\\n        address oracle;\\n    }\\n\\n    event HashReceived(\\n        uint16 indexed srcChainId,\\n        address indexed oracle,\\n        bytes32 lookupHash,\\n        bytes32 blockData,\\n        uint confirmations\\n    );\\n    event RelayerParams(bytes adapterParams, uint16 outboundProofType);\\n    event Packet(bytes payload);\\n    event InvalidDst(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event PacketReceived(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);\\n    event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);\\n    event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);\\n    event SetChainAddressSize(uint16 indexed chainId, uint size);\\n    event SetDefaultConfigForChainId(\\n        uint16 indexed chainId,\\n        uint16 inboundProofLib,\\n        uint64 inboundBlockConfirm,\\n        address relayer,\\n        uint16 outboundProofType,\\n        uint64 outboundBlockConfirm,\\n        address oracle\\n    );\\n    event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);\\n    event SetLayerZeroToken(address indexed tokenAddress);\\n    event SetRemoteUln(uint16 indexed chainId, bytes32 uln);\\n    event SetTreasury(address indexed treasuryAddress);\\n    event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);\\n    event WithdrawNative(address indexed msgSender, address indexed to, uint amount);\\n}\\n\",\"keccak256\":\"0xf1f36bbbc40d03b96affa151affb47da75a1b69dc79f4b311841a072d12fdd22\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroValidationLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../proof/utility/LayerZeroPacket.sol\\\";\\n\\ninterface ILayerZeroValidationLibrary {\\n    function validateProof(\\n        bytes32 blockData,\\n        bytes calldata _data,\\n        uint _remoteAddressSize\\n    ) external returns (LayerZeroPacket.Packet memory packet);\\n}\\n\",\"keccak256\":\"0x0621a318689774296b47c95d8738d0c4e1bc63efe62e524cb3ea36ef1a9da487\",\"license\":\"BUSL-1.1\"},\"contracts/proof/utility/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// https://github.com/ensdomains/buffer\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.a co\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param rawData The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeRawBytes(\\n        buffer memory buf,\\n        uint off,\\n        bytes memory rawData,\\n        uint offData,\\n        uint len\\n    ) internal pure returns (buffer memory) {\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(rawData, offData)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n\\n        return buf;\\n    }\\n\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint a, uint b) private pure returns (uint) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb6ba1e85708e05e0f2181136650463faca122318dd16aa6cbaa4f88e48d908\",\"license\":\"BUSL-1.1\"},\"contracts/proof/utility/LayerZeroPacket.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary LayerZeroPacket {\\n    using Buffer for Buffer.buffer;\\n    using SafeMath for uint;\\n\\n    struct Packet {\\n        uint16 srcChainId;\\n        uint16 dstChainId;\\n        uint64 nonce;\\n        address dstAddress;\\n        bytes srcAddress;\\n        bytes32 ulnAddress;\\n        bytes payload;\\n    }\\n\\n    function getPacket(\\n        bytes memory data,\\n        uint16 srcChain,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        uint16 dstChainId;\\n        address dstAddress;\\n        uint size;\\n        uint64 nonce;\\n\\n        // The log consists of the destination chain id and then a bytes payload\\n        //      0--------------------------------------------31\\n        // 0   |  total bytes size\\n        // 32  |  destination chain id\\n        // 64  |  bytes offset\\n        // 96  |  bytes array size\\n        // 128 |  payload\\n        assembly {\\n            dstChainId := mload(add(data, 32))\\n            size := mload(add(data, 96)) /// size of the byte array\\n            nonce := mload(add(data, 104)) // offset to convert to uint64  128  is index -24\\n            dstAddress := mload(add(data, sub(add(128, sizeOfSrcAddress), 4))) // offset to convert to address 12 -8\\n        }\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 136, sizeOfSrcAddress); // 128 + 8\\n\\n        uint payloadSize = size.sub(28).sub(sizeOfSrcAddress);\\n        Buffer.buffer memory payloadBuffer;\\n        payloadBuffer.init(payloadSize);\\n        payloadBuffer.writeRawBytes(0, data, sizeOfSrcAddress.add(156), payloadSize); // 148 + 8\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChainId,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n\\n    function getPacketV2(\\n        bytes memory data,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        // packet def: abi.encodePacked(nonce, srcChain, srcAddress, dstChain, dstAddress, payload);\\n        // data def: abi.encode(packet) = offset(32) + length(32) + packet\\n        //              if from EVM\\n        // 0 - 31       0 - 31          |  total bytes size\\n        // 32 - 63      32 - 63         |  location\\n        // 64 - 95      64 - 95         |  size of the packet\\n        // 96 - 103     96 - 103        |  nonce\\n        // 104 - 105    104 - 105       |  srcChainId\\n        // 106 - P      106 - 125       |  srcAddress, where P = 106 + sizeOfSrcAddress - 1,\\n        // P+1 - P+2    126 - 127       |  dstChainId\\n        // P+3 - P+22   128 - 147       |  dstAddress\\n        // P+23 - END   148 - END       |  payload\\n\\n        // decode the packet\\n        uint256 realSize;\\n        uint64 nonce;\\n        uint16 srcChain;\\n        uint16 dstChain;\\n        address dstAddress;\\n        assembly {\\n            realSize := mload(add(data, 64))\\n            nonce := mload(add(data, 72)) // 104 - 32\\n            srcChain := mload(add(data, 74)) // 106 - 32\\n            dstChain := mload(add(data, add(76, sizeOfSrcAddress))) // P + 3 - 32 = 105 + size + 3 - 32 = 76 + size\\n            dstAddress := mload(add(data, add(96, sizeOfSrcAddress))) // P + 23 - 32 = 105 + size + 23 - 32 = 96 + size\\n        }\\n\\n        require(srcChain != 0, \\\"LayerZeroPacket: invalid packet\\\");\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 106, sizeOfSrcAddress);\\n\\n        uint nonPayloadSize = sizeOfSrcAddress.add(32); // 2 + 2 + 8 + 20, 32 + 20 = 52 if sizeOfSrcAddress == 20\\n        uint payloadSize = realSize.sub(nonPayloadSize);\\n        Buffer.buffer memory payloadBuffer;\\n        payloadBuffer.init(payloadSize);\\n        payloadBuffer.writeRawBytes(0, data, nonPayloadSize.add(96), payloadSize);\\n\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChain,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n\\n    function getPacketV3(\\n        bytes memory data,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        // data def: abi.encodePacked(nonce, srcChain, srcAddress, dstChain, dstAddress, payload);\\n        //              if from EVM\\n        // 0 - 31       0 - 31          |  total bytes size\\n        // 32 - 39      32 - 39         |  nonce\\n        // 40 - 41      40 - 41         |  srcChainId\\n        // 42 - P       42 - 61         |  srcAddress, where P = 41 + sizeOfSrcAddress,\\n        // P+1 - P+2    62 - 63         |  dstChainId\\n        // P+3 - P+22   64 - 83         |  dstAddress\\n        // P+23 - END   84 - END        |  payload\\n\\n        // decode the packet\\n        uint256 realSize = data.length;\\n        uint nonPayloadSize = sizeOfSrcAddress.add(32); // 2 + 2 + 8 + 20, 32 + 20 = 52 if sizeOfSrcAddress == 20\\n        require(realSize >= nonPayloadSize, \\\"LayerZeroPacket: invalid packet\\\");\\n        uint payloadSize = realSize - nonPayloadSize;\\n\\n        uint64 nonce;\\n        uint16 srcChain;\\n        uint16 dstChain;\\n        address dstAddress;\\n        assembly {\\n            nonce := mload(add(data, 8)) // 40 - 32\\n            srcChain := mload(add(data, 10)) // 42 - 32\\n            dstChain := mload(add(data, add(12, sizeOfSrcAddress))) // P + 3 - 32 = 41 + size + 3 - 32 = 12 + size\\n            dstAddress := mload(add(data, add(32, sizeOfSrcAddress))) // P + 23 - 32 = 41 + size + 23 - 32 = 32 + size\\n        }\\n\\n        require(srcChain != 0, \\\"LayerZeroPacket: invalid packet\\\");\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 42, sizeOfSrcAddress);\\n\\n        Buffer.buffer memory payloadBuffer;\\n        if (payloadSize > 0) {\\n            payloadBuffer.init(payloadSize);\\n            payloadBuffer.writeRawBytes(0, data, nonPayloadSize.add(32), payloadSize);\\n        }\\n\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChain,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf96248293a8bb6e9a3908ac7eb78dfb794bb197a5743d377905fe771911d2192\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50d380156200001f57600080fd5b50d280156200002d57600080fd5b5060405162005a7e38038062005a7e833981016040819052620000509162000167565b60016000908155620000616200013a565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038316620000e15760405162461bcd60e51b8152600401620000d890620001b9565b60405180910390fd5b6001600160a01b0382166200010a5760405162461bcd60e51b8152600401620000d89062000203565b60f01b6001600160f01b03191660a052606091821b6001600160601b0319908116608052911b1660c05262000252565b3390565b80516000906001600160a81b038116811462000158578182fd5b6001600160a01b031692915050565b6000806000606084860312156200017c578283fd5b62000187846200013e565b925062000197602085016200013e565b9150604084015161ffff81168114620001ae578182fd5b809150509250925092565b6020808252602a908201527f4c617965725a65726f3a20656e64706f696e742063616e6e6f74206265207a65604082015269726f206164647265737360b01b606082015260800190565b6020808252602f908201527f4c617965725a65726f3a206e6f6e6365436f6e74726163742063616e6e6f742060408201526e6265207a65726f206164647265737360881b606082015260800190565b60805160601c60a05160f01c60c05160601c6157d3620002ab60003980610cab52806114a35280612ad65250806116ad5280611bae528061284d5250806112fc5280611bd252806129da528061306a52506157d36000f3fe6080604052600436106102e75760003560e01c80638317814a11610184578063d543c774116100d6578063ed28580a1161008a578063f47a5feb11610064578063f47a5feb14610c06578063f58589a214610c35578063f8e1734c14610c6f576102e7565b8063ed28580a14610b58578063f0f4426014610b92578063f2fde38b14610bcc576102e7565b8063ddfdef5a116100bb578063ddfdef5a14610aaa578063ea216c2114610ae4578063eb0d4c3114610b1e576102e7565b8063d543c77414610a29578063db00719b14610a70576102e7565b8063959f594311610138578063b77d22ad11610112578063b77d22ad14610979578063b8e7e3e0146109a8578063b9a99bed146109e2576102e7565b8063959f5943146108be578063987fa2d5146108f8578063a466222214610932576102e7565b806387078f9f1161016957806387078f9f146108265780638da5cb5b14610860578063904d3b8d1461088f576102e7565b80638317814a146107b25780638525b711146107ec576102e7565b806352d2871f1161023d5780636a14ac82116101f1578063759c5b3b116101cb578063759c5b3b1461070f5780638140666e146107495780638207f79d14610778576102e7565b80636a14ac821461066c578063704316e5146106a6578063715018a6146106e0576102e7565b80635b056da5116102225780635b056da5146105c75780635e280f111461060357806369412bfa14610632576102e7565b806352d2871f1461055357806352d3b5001461058d576102e7565b80632cfacb061161029f57806340a7bb101161027957806340a7bb10146104c957806349148c37146105115780634d3a0f7c14610540576102e7565b80632cfacb06146104125780632f8134641461044e57806331bd24301461049a576102e7565b806307b9ca7c116102d057806307b9ca7c1461036d57806318da00111461039c5780632a819bbf146103cb576102e7565b806302bd9743146102ec57806307b18bde14610331575b600080fd5b3480156102f857600080fd5b50d3801561030557600080fd5b50d2801561031257600080fd5b5061031b610ca9565b6040516103289190614992565b60405180910390f35b34801561033d57600080fd5b50d3801561034a57600080fd5b50d2801561035757600080fd5b5061036b6103663660046140bb565b610ccd565b005b34801561037957600080fd5b50d3801561038657600080fd5b50d2801561039357600080fd5b5061031b610e57565b3480156103a857600080fd5b50d380156103b557600080fd5b50d280156103c257600080fd5b5061031b610e66565b3480156103d757600080fd5b50d380156103e457600080fd5b50d280156103f157600080fd5b50610405610400366004614663565b610e75565b6040516103289190614a27565b34801561041e57600080fd5b50d3801561042b57600080fd5b50d2801561043857600080fd5b50610441610f37565b60405161032891906149c9565b34801561045a57600080fd5b50d3801561046757600080fd5b50d2801561047457600080fd5b5061048861048336600461435c565b610f3c565b6040516103289695949392919061561d565b3480156104a657600080fd5b50d380156104b357600080fd5b50d280156104c057600080fd5b50610441610fc0565b3480156104d557600080fd5b50d380156104e257600080fd5b50d280156104ef57600080fd5b506105036104fe3660046143b9565b610fc5565b604051610328929190615666565b34801561051d57600080fd5b50d3801561052a57600080fd5b50d2801561053757600080fd5b506104416112f5565b61036b61054e366004614190565b6112fa565b34801561055f57600080fd5b50d3801561056c57600080fd5b50d2801561057957600080fd5b5061040561058836600461446d565b611746565b34801561059957600080fd5b50d380156105a657600080fd5b50d280156105b357600080fd5b5061036b6105c236600461408f565b611ab0565b3480156105d357600080fd5b50d380156105e057600080fd5b50d280156105ed57600080fd5b506105f6611bac565b60405161032891906154e8565b34801561060f57600080fd5b50d3801561061c57600080fd5b50d2801561062957600080fd5b5061031b611bd0565b34801561063e57600080fd5b50d3801561064b57600080fd5b50d2801561065857600080fd5b5061044161066736600461408f565b611bf4565b34801561067857600080fd5b50d3801561068557600080fd5b50d2801561069257600080fd5b5061036b6106a13660046146f3565b611c13565b3480156106b257600080fd5b50d380156106bf57600080fd5b50d280156106cc57600080fd5b5061036b6106db3660046145d6565b611f75565b3480156106ec57600080fd5b50d380156106f957600080fd5b50d2801561070657600080fd5b5061036b61203a565b34801561071b57600080fd5b50d3801561072857600080fd5b50d2801561073557600080fd5b50610441610744366004614130565b612110565b34801561075557600080fd5b50d3801561076257600080fd5b50d2801561076f57600080fd5b5061044161213c565b34801561078457600080fd5b50d3801561079157600080fd5b50d2801561079e57600080fd5b5061036b6107ad366004614378565b612141565b3480156107be57600080fd5b50d380156107cb57600080fd5b50d280156107d857600080fd5b5061036b6107e7366004614690565b6122da565b3480156107f857600080fd5b50d3801561080557600080fd5b50d2801561081257600080fd5b5061036b61082136600461417e565b6123c3565b34801561083257600080fd5b50d3801561083f57600080fd5b50d2801561084c57600080fd5b5061036b61085b3660046145ab565b6124c5565b34801561086c57600080fd5b50d3801561087957600080fd5b50d2801561088657600080fd5b5061031b6125bc565b34801561089b57600080fd5b50d380156108a857600080fd5b50d280156108b557600080fd5b506104416125cb565b3480156108ca57600080fd5b50d380156108d757600080fd5b50d280156108e457600080fd5b506104416108f336600461435c565b6125d0565b34801561090457600080fd5b50d3801561091157600080fd5b50d2801561091e57600080fd5b5061036b61092d3660046144b7565b6125e2565b34801561093e57600080fd5b50d3801561094b57600080fd5b50d2801561095857600080fd5b5061096c610967366004614378565b612a76565b604051610328919061547c565b34801561098557600080fd5b50d3801561099257600080fd5b50d2801561099f57600080fd5b50610441612a88565b3480156109b457600080fd5b50d380156109c157600080fd5b50d280156109ce57600080fd5b506105f66109dd36600461435c565b612a8d565b3480156109ee57600080fd5b50d380156109fb57600080fd5b50d28015610a0857600080fd5b50610a1c610a17366004614610565b612aa3565b6040516103289190615674565b348015610a3557600080fd5b50d38015610a4257600080fd5b50d28015610a4f57600080fd5b50610a63610a5e366004614663565b612b67565b60405161032891906149a6565b348015610a7c57600080fd5b50d38015610a8957600080fd5b50d28015610a9657600080fd5b5061031b610aa5366004614663565b612b87565b348015610ab657600080fd5b50d38015610ac357600080fd5b50d28015610ad057600080fd5b50610488610adf3660046140ef565b612bad565b348015610af057600080fd5b50d38015610afd57600080fd5b50d28015610b0a57600080fd5b50610441610b1936600461435c565b612c3c565b348015610b2a57600080fd5b50d38015610b3757600080fd5b50d28015610b4457600080fd5b5061036b610b53366004614663565b612c4e565b348015610b6457600080fd5b50d38015610b7157600080fd5b50d28015610b7e57600080fd5b5061036b610b8d3660046145ab565b612d3c565b348015610b9e57600080fd5b50d38015610bab57600080fd5b50d28015610bb857600080fd5b5061036b610bc736600461408f565b612e27565b348015610bd857600080fd5b50d38015610be557600080fd5b50d28015610bf257600080fd5b5061036b610c0136600461408f565b612f23565b348015610c1257600080fd5b50d38015610c1f57600080fd5b50d28015610c2c57600080fd5b50610441613050565b348015610c4157600080fd5b50d38015610c4e57600080fd5b50d28015610c5b57600080fd5b50610441610c6a36600461408f565b613056565b348015610c7b57600080fd5b50d38015610c8857600080fd5b50d28015610c9557600080fd5b5061036b610ca4366004614531565b613068565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415610d25576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556001600160a01b038216610d595760405162461bcd60e51b8152600401610d5090614c4b565b60405180910390fd5b33600090815260046020526040902054610d7390826133cf565b336000908152600460205260408082209290925590516001600160a01b038416908390610d9f906148c7565b60006040518083038185875af1925050503d8060008114610ddc576040519150601f19603f3d011682016040523d82523d6000602084013e610de1565b606091505b5050905080610e025760405162461bcd60e51b8152600401610d5090614bb7565b826001600160a01b0316336001600160a01b03167f3bfd26201736b5cb14a562ab3cfc2bef76901726e3a78483d6288af47131e1d984604051610e4591906149c9565b60405180910390a35050600160005550565b6002546001600160a01b031681565b6003546001600160a01b031681565b60086020908152600092835260408084208252918352918190208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f810185900485028201850190935282815292909190830182828015610f2f5780601f10610f0457610100808354040283529160200191610f2f565b820191906000526020600020905b815481529060010190602001808311610f1257829003601f168201915b505050505081565b600381565b6007602052600090815260409020805460019091015461ffff8083169267ffffffffffffffff6201000082048116936001600160a01b036a010000000000000000000084048116947e010000000000000000000000000000000000000000000000000000000000009094049093169291811691680100000000000000009091041686565b600681565b6000806000610fd48a8a61342c565b90506060841561101d5785858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293506110ec92505050565b61ffff808c166000908152600860209081526040808320606087015190941683529281529082902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600186161502019093169290920491820184900484028101840190945280845290918301828280156110e45780601f106110b9576101008083540402835291602001916110e4565b820191906000526020600020905b8154815290600101906020018083116110c757829003601f168201915b505050505090505b600082604001516001600160a01b031663c03f15298d85606001518e8e8e9050876040518663ffffffff1660e01b815260040161112d9594939291906155ab565b60206040518083038186803b15801561114557600080fd5b505afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d919061479b565b905060008b905060008460a001516001600160a01b0316635553fb8e8f87606001518860800151866040518563ffffffff1660e01b81526004016111c494939291906155e7565b60206040518083038186803b1580156111dc57600080fd5b505afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611214919061479b565b6003546040517f5cbbbd750000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0390911690635cbbbd7590611267908e90889087906004016149b1565b60206040518083038186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b7919061479b565b90508a6112c757809750876112cc565b809650865b506112e1826112db8a876135f7565b906135f7565b975050505050505097509795505050505050565b600281565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146113425760405162461bcd60e51b8152600401610d5090615274565b61ffff89166000908152600e60205260409020548b908a906113765760405162461bcd60e51b8152600401610d5090614aec565b61ffff81166000908152600c602052604081205460609190801580159061139f5750601481018c145b6113bb5760405162461bcd60e51b8152600401610d5090615308565b6000808e8e8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505083810160140151925090506001600160a01b038781169083161461142a5760405162461bcd60e51b8152600401610d5090614f55565b8e8e600090859261143d939291906156ad565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f6fe7b673000000000000000000000000000000000000000000000000000000008152929750506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636fe7b67391506114dd9089908b9086906004016154f7565b602060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f91906147cf565b935050505060008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093945061157b925087915088905061342c565b905060006115c386838986518d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061365192505050565b905060006115d287848a61382b565b905060006115e283838b8f6138e5565b905060006115f4826112db86866135f7565b9050348111156116165760405162461bcd60e51b8152600401610d5090614bee565b600061162234836133cf565b905080156116a85760008f6001600160a01b031682604051611643906148c7565b60006040518083038185875af1925050503d8060008114611680576040519150601f19603f3d011682016040523d82523d6000602084013e611685565b606091505b50509050806116a65760405162461bcd60e51b8152600401610d5090614d62565b505b6000887f00000000000000000000000000000000000000000000000000000000000000008d8d8d8c6040516020016116e5969594939291906148ca565b60405160208183030381529060405290507fe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82816040516117259190614a27565b60405180910390a15050505050505050505050505050505050505050505050565b6001600160a01b038216600090815260066020908152604080832061ffff87168452909152902060609060018314156117da57805461ffff166117c45761ffff8086166000908152600760209081526040918290205491516117ad939290921691016154e8565b604051602081830303815290604052915050611aa9565b80546040516117ad9161ffff16906020016154e8565b600283141561185057805462010000900467ffffffffffffffff1661182e5761ffff85166000908152600760209081526040918290205491516117ad9262010000900467ffffffffffffffff169101615674565b80546040516117ad9162010000900467ffffffffffffffff1690602001615674565b60038314156118db5780546a010000000000000000000090046001600160a01b03166118b25761ffff85166000908152600760209081526040918290205491516117ad926a010000000000000000000090046001600160a01b03169101614992565b80546040516117ad916a010000000000000000000090046001600160a01b031690602001614992565b60048314156119945780547e01000000000000000000000000000000000000000000000000000000000000900461ffff1661195c5761ffff8086166000908152600760209081526040918290205491516117ad937e0100000000000000000000000000000000000000000000000000000000000090930490921691016154e8565b80546040516117ad917e01000000000000000000000000000000000000000000000000000000000000900461ffff16906020016154e8565b6005831415611a0157600181015467ffffffffffffffff166119e25761ffff85166000908152600760209081526040918290206001015491516117ad9267ffffffffffffffff169101615674565b60018101546040516117ad9167ffffffffffffffff1690602001615674565b6006831415611a8f5760018101546801000000000000000090046001600160a01b0316611a655761ffff85166000908152600760209081526040918290206001015491516117ad926801000000000000000090046001600160a01b03169101614992565b60018101546040516117ad916801000000000000000090046001600160a01b031690602001614992565b60405162461bcd60e51b8152600401610d5090614b80565b505b9392505050565b611ab8613a4f565b6001600160a01b0316611ac96125bc565b6001600160a01b031614611b24576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611b4a5760405162461bcd60e51b8152600401610d5090614ca8565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f33d644987381deff4408951d55afa136f124e22a7810b163b2aaa3ebef770f6490600090a250565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600460205260409020545b919050565b611c1b613a4f565b6001600160a01b0316611c2c6125bc565b6001600160a01b031614611c87576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8088166000908152600a6020526040902054811690871611801590611cb3575060008661ffff16115b611ccf5760405162461bcd60e51b8152600401610d50906150a3565b60008567ffffffffffffffff1611611cf95760405162461bcd60e51b8152600401610d50906153c2565b6001600160a01b038416611d1f5760405162461bcd60e51b8152600401610d5090614d05565b61ffff8088166000908152600b602090815260408083209387168352929052205460ff16611d5f5760405162461bcd60e51b8152600401610d5090614a8f565b60008267ffffffffffffffff1611611d895760405162461bcd60e51b8152600401610d50906152ab565b6001600160a01b038116611daf5760405162461bcd60e51b8152600401610d5090614e2d565b6040518060c001604052808761ffff1681526020018667ffffffffffffffff168152602001856001600160a01b031681526020018461ffff1681526020018367ffffffffffffffff168152602001826001600160a01b0316815250600760008961ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001600a6101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600001601e6101000a81548161ffff021916908361ffff16021790555060808201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160010160086101000a8154816001600160a01b0302191690836001600160a01b031602179055509050508661ffff167f5a76432853a0871c4e780def7f3ffc7912339b53f022ac31127fe5ff84a36fa1878787878787604051611f649695949392919061561d565b60405180910390a250505050505050565b336000908152600d6020908152604080832061ffff8816845282528083208684528252808320848452909152902054828110611fc35760405162461bcd60e51b8152600401610d5090614fe9565b336000818152600d6020908152604080832061ffff8a1680855290835281842089855283528184208785529092529182902086905590517f74bbc026808dcba59692d6a8bb20596849ca718e10e2432c6cdf48af865bc5d99061202b908890879089906149d2565b60405180910390a35050505050565b612042613a4f565b6001600160a01b03166120536125bc565b6001600160a01b0316146120ae576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600d60209081526000948552604080862082529385528385208152918452828420909152825290205481565b600481565b612149613a4f565b6001600160a01b031661215a6125bc565b6001600160a01b0316146121b5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166121db5760405162461bcd60e51b8152600401610d5090614f8c565b61ffff8083166000908152600a602052604090205481169081106122115760405162461bcd60e51b8152600401610d5090615217565b61ffff8381166000818152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660019790970195861696871790556009825280832095835294905283902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861617905591519091907f802d55279d51813cb7a9a98e8fd2d7bec5346cb830901c11b85d1650cb857e9a906122cd908590614992565b60405180910390a2505050565b6122e2613a4f565b6001600160a01b03166122f36125bc565b6001600160a01b03161461234e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8085166000908152600860209081526040808320938716835292905220612379908383613e47565b508261ffff168461ffff167f4a5695eee2a74d548d5f5c485a3de99ace99e3b664c8e30a90f49be6ebb5493284846040516123b5929190614a13565b60405180910390a350505050565b6002600054141561241b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556003546001600160a01b0316331461244a5760405162461bcd60e51b8152600401610d5090614b49565b60055461245790826133cf565b600555600254612471906001600160a01b03168383613a53565b816001600160a01b0316336001600160a01b03167f3a20c8c3cd1848485ae8261a52398bb9b26f195b717306b3cf7f058e62c095d5836040516124b491906149c9565b60405180910390a350506001600055565b6124cd613a4f565b6001600160a01b03166124de6125bc565b6001600160a01b031614612539576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff82166000908152600c60205260409020541561256a5760405162461bcd60e51b8152600401610d5090615365565b61ffff82166000818152600c602052604090819020839055517f0611bb2107e385b79ec826fff8ecc1c1248a7aae3c875c96668f8cfbf1734220906125b09084906149c9565b60405180910390a25050565b6001546001600160a01b031690565b600581565b600c6020526000908152604090205481565b60006125ee888861342c565b60408101519091506001600160a01b0316331461261d5760405162461bcd60e51b8152600401610d5090614f1e565b612625613ef1565b61ffff89166000908152600c6020526040902054806126565760405162461bcd60e51b8152600401610d5090615308565b60a08301516001600160a01b03166000908152600d6020908152604080832061ffff8e16845282528083208a8452825280832089845290915290205480158015906126af5750836020015167ffffffffffffffff168110155b6126cb5760405162461bcd60e51b8152600401610d509061541f565b61ffff808c166000908152600960209081526040808320885190941683529290528190205490517fb71e0f710000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690819063b71e0f719061273d908b908b908b9089906004016149e8565b600060405180830381600087803b15801561275757600080fd5b505af115801561276b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526127b19190810190614280565b60a081015161ffff8e166000908152600e60205260409020549195501491505080156127e0575060a082015115155b6127fc5760405162461bcd60e51b8152600401610d5090614e8a565b8961ffff16826000015161ffff16146128275760405162461bcd60e51b8152600401610d5090614ee7565b808260800151511461284b5760405162461bcd60e51b8152600401610d5090615100565b7f000000000000000000000000000000000000000000000000000000000000000061ffff16826020015161ffff16146128965760405162461bcd60e51b8152600401610d509061506c565b886001600160a01b031682606001516001600160a01b0316146128cb5760405162461bcd60e51b8152600401610d5090614df6565b6128d489613ad8565b6129455781606001516001600160a01b0316826000015161ffff167fa2786598bd84ae4a299103996359e6cb4333404583256079dfc279386baf5832846080015185604001518660c001518051906020012060405161293593929190614a60565b60405180910390a3505050612a6d565b60008260800151836060015160405160200161296292919061487d565b604051602081830303815290604052905082606001516001600160a01b0316836000015161ffff167f2bd2d8a84b748439fd50d79a49502b4eb5faa25b864da6a9ab5c150704be9a4d856080015186604001518760c00151805190602001206040516129d093929190614a60565b60405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2fa48138c838d87604001518e8960c001516040518763ffffffff1660e01b8152600401612a369695949392919061554a565b600060405180830381600087803b158015612a5057600080fd5b505af1158015612a64573d6000803e3d6000fd5b50505050505050505b50505050505050565b612a7e613f2f565b611aa9838361342c565b600181565b600a6020526000908152604090205461ffff1681565b6040517fc533338f0000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c533338f90612b0f9087908790879060040161552c565b60206040518083038186803b158015612b2757600080fd5b505afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f91906147cf565b949350505050565b600b60209081526000928352604080842090915290825290205460ff1681565b60096020908152600092835260408084209091529082529020546001600160a01b031681565b60066020908152600092835260408084209091529082529020805460019091015461ffff8083169267ffffffffffffffff6201000082048116936001600160a01b036a010000000000000000000084048116947e010000000000000000000000000000000000000000000000000000000000009094049093169291811691680100000000000000009091041686565b600e6020526000908152604090205481565b612c56613a4f565b6001600160a01b0316612c676125bc565b6001600160a01b031614612cc2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8083166000818152600b60209081526040808320948616835293905282902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590517fec23bee6f88cfecebb09d6aaaed66f0ce110debc1f61117c8270a7116597df9a906125b09084906154e8565b612d44613a4f565b6001600160a01b0316612d556125bc565b6001600160a01b031614612db0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff82166000908152600e602052604090205415612de15760405162461bcd60e51b8152600401610d50906151ba565b61ffff82166000818152600e602052604090819020839055517f0dad975e1d2fbe771c95cdcc7be9a1e61181de7173abe0a32b8f8f83140873e5906125b09084906149c9565b612e2f613a4f565b6001600160a01b0316612e406125bc565b6001600160a01b031614612e9b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612ec15760405162461bcd60e51b8152600401610d509061515d565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390600090a250565b612f2b613a4f565b6001600160a01b0316612f3c6125bc565b6001600160a01b031614612f97576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612fdc5760405162461bcd60e51b815260040180806020018281038252602681526020018061574e6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60055481565b60046020526000908152604090205481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146130b05760405162461bcd60e51b8152600401610d5090615274565b6001600160a01b038416600090815260066020908152604080832061ffff891684529091529020600184141561315d5760006130ee8385018561435c565b61ffff8089166000908152600a6020526040902054919250908116908216111561312a5760405162461bcd60e51b8152600401610d50906150a3565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff91909116178155613383565b60028414156131b4576000613174838501856147b3565b825467ffffffffffffffff90911662010000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffff90911617825550613383565b60038414156132125760006131cb8385018561408f565b82546001600160a01b039091166a0100000000000000000000027fffff0000000000000000000000000000000000000000ffffffffffffffffffff90911617825550613383565b60048414156132cc5760006132298385018561435c565b61ffff8089166000908152600b602090815260408083209385168352929052205490915060ff168061325d575061ffff8116155b6132795760405162461bcd60e51b8152600401610d5090614a8f565b815461ffff9091167e01000000000000000000000000000000000000000000000000000000000000027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909116178155613383565b60058414156133245760006132e3838501856147b3565b6001830180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9290921691909117905550613383565b6006841415611a8f57600061333b8385018561408f565b6001830180546001600160a01b0390921668010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff909216919091179055505b83856001600160a01b03167ffc01bf86212a14151d51d1be5c2ac64d67d5ec823dfc6f53298d7ce3f3d3d25285856040516133bf929190614a13565b60405180910390a3505050505050565b600082821115613426576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b613434613f2f565b6001600160a01b03808316600090815260066020908152604080832061ffff808916808652918452828520835160c0810185528154808416825267ffffffffffffffff6201000082048116838901526a010000000000000000000082048a16838801527e010000000000000000000000000000000000000000000000000000000000009091048416606083015260019092015491821660808201526801000000000000000090910490961660a08701529084526007909252909120825190911661350157805461ffff1682525b602082015167ffffffffffffffff1661352c57805462010000900467ffffffffffffffff1660208301525b60408201516001600160a01b031661355d5780546a010000000000000000000090046001600160a01b031660408301525b606082015161ffff166135985780547e01000000000000000000000000000000000000000000000000000000000000900461ffff1660608301525b608082015167ffffffffffffffff166135c057600181015467ffffffffffffffff1660808301525b60a08201516001600160a01b0316611aa757600101546801000000000000000090046001600160a01b031660a08201529392505050565b600082820183811015611aa9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081516000141561372c5761ffff808716600090815260086020908152604080832060608a015190941683529281529082902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600186161502019093169290920491820184900484028101840190945280845290918301828280156137245780601f106136f957610100808354040283529160200191613724565b820191906000526020600020905b81548152906001019060200180831161370757829003601f168201915b505050505091505b604080860151606087015191517f5886ea65000000000000000000000000000000000000000000000000000000008152909182916001600160a01b03831691635886ea6591613785918c918b908b908b906004016155ab565b602060405180830381600087803b15801561379f57600080fd5b505af11580156137b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d7919061479b565b92506137e38284613ade565b7fb0c632f55f1e1b3b2c3d82f41ee4716bb4c00f0f5d84cdafc141581bb8757a4f848860600151604051613818929190614a3a565b60405180910390a1505095945050505050565b60a0820151606083015160808401516040517fc5e193cd000000000000000000000000000000000000000000000000000000008152600093926001600160a01b0384169263c5e193cd92613887928a92909189906004016155e7565b602060405180830381600087803b1580156138a157600080fd5b505af11580156138b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d9919061479b565b9150611aa78183613ade565b6000806001600160a01b038316158061390757506002546001600160a01b0316155b6003546040517f5cbbbd750000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0390911690635cbbbd759061395b908515908b908b906004016149b1565b60206040518083038186803b15801561397357600080fd5b505afa158015613987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ab919061479b565b90508015613a455781156139d8576003546001600160a01b03166139cf8183613ade565b81935050613a45565b846001600160a01b0316846001600160a01b03161480613a0057506001600160a01b03841632145b613a1c5760405162461bcd60e51b8152600401610d5090614d99565b600254613a34906001600160a01b0316853084613b21565b600554613a4190826135f7565b6005555b5050949350505050565b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613ad3908490613baf565b505050565b3b151590565b6001600160a01b038216600090815260046020526040902054613b0190826135f7565b6001600160a01b0390921660009081526004602052604090209190915550565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613ba9908590613baf565b50505050565b6000613c04826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c609092919063ffffffff16565b805190915015613ad357808060200190516020811015613c2357600080fd5b5051613ad35760405162461bcd60e51b815260040180806020018281038252602a815260200180615774602a913960400191505060405180910390fd5b6060612b5f848460008585613c7485613ad8565b613cc5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613d2157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613ce4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d83576040519150601f19603f3d011682016040523d82523d6000602084013e613d88565b606091505b5091509150613d98828286613da3565b979650505050505050565b60608315613db2575081611aa9565b825115613dc25782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613e0c578181015183820152602001613df4565b50505050905090810190601f168015613e395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282613e7d5760008555613ee1565b82601f10613eb4578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555613ee1565b82800160010185558215613ee1579182015b82811115613ee1578235825591602001919060010190613ec6565b50613eed929150613f64565b5090565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820181905260a082019290925260c081019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b5b80821115613eed5760008155600101613f65565b60008135613f8681615701565b6001600160a01b031692915050565b60008151613f8681615701565b60008083601f840112613fb3578182fd5b50813567ffffffffffffffff811115613fca578182fd5b602083019150836020828501011115613fe257600080fd5b9250929050565b600082601f830112613ff9578081fd5b815167ffffffffffffffff81111561400d57fe5b61403e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601615689565b818152846020838601011115614052578283fd5b612b5f8260208301602087016156d5565b8035611c0e81615727565b8051611c0e81615727565b8035611c0e81615737565b8051611c0e81615737565b6000602082840312156140a0578081fd5b81356140ab81615701565b6001600160a01b03169392505050565b600080604083850312156140cd578081fd5b82356140d881615701565b6001600160a01b0316946020939093013593505050565b60008060408385031215614101578182fd5b823561410c81615701565b6001600160a01b03169150602083013561412581615727565b809150509250929050565b60008060008060808587031215614145578182fd5b843561415081615701565b6001600160a01b03169350602085013561416981615727565b93969395505050506040820135916060013590565b600080604083850312156140cd578182fd5b60008060008060008060008060008060006101008c8e0312156141b1578687fd5b6141ba8c613f79565b9a506141c860208d01614079565b99506141d660408d01614063565b985067ffffffffffffffff8060608e013511156141f1578788fd5b6142018e60608f01358f01613fa2565b909950975060808d0135811015614216578687fd5b6142268e60808f01358f01613fa2565b909750955061423760a08e01613f79565b945061424560c08e01613f79565b93508060e08e01351115614257578283fd5b506142688d60e08e01358e01613fa2565b81935080925050509295989b509295989b9093969950565b600060208284031215614291578081fd5b815167ffffffffffffffff808211156142a8578283fd5b9083019060e082860312156142bb578283fd5b6142c560e0615689565b6142ce8361406e565b81526142dc6020840161406e565b60208201526142ed60408401614084565b60408201526142fe60608401613f95565b6060820152608083015182811115614314578485fd5b61432087828601613fe9565b60808301525060a083015160a082015260c083015182811115614341578485fd5b61434d87828601613fe9565b60c08301525095945050505050565b60006020828403121561436d578081fd5b8135611aa981615727565b6000806040838503121561438a578182fd5b823561439581615727565b915060208301356143a581615701565b6001600160a01b0381169150509250929050565b600080600080600080600060a0888a0312156143d3578081fd5b87356143de81615727565b965060208801356143ee81615701565b6001600160a01b03169550604088013567ffffffffffffffff80821115614413578283fd5b61441f8b838c01613fa2565b909750955060608a013591508115158214614438578283fd5b9093506080890135908082111561444d578283fd5b5061445a8a828b01613fa2565b989b979a50959850939692959293505050565b600080600060608486031215614481578081fd5b833561448c81615727565b9250602084013561449c81615701565b6001600160a01b038116925050604084013590509250925092565b600080600080600080600060c0888a0312156144d1578081fd5b87356144dc81615727565b965060208801356144ec81615701565b6001600160a01b0316955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115614525578182fd5b61445a8a828b01613fa2565b600080600080600060808688031215614548578283fd5b853561455381615727565b9450602086013561456381615701565b6001600160a01b0316935060408601359250606086013567ffffffffffffffff81111561458e578182fd5b61459a88828901613fa2565b969995985093965092949392505050565b600080604083850312156145bd578182fd5b82356145c881615727565b946020939093013593505050565b600080600080608085870312156145eb578182fd5b84356145f681615727565b966020860135965060408601359560600135945092505050565b600080600060408486031215614624578081fd5b833561462f81615727565b9250602084013567ffffffffffffffff81111561464a578182fd5b61465686828701613fa2565b9497909650939450505050565b60008060408385031215614675578182fd5b823561468081615727565b9150602083013561412581615727565b600080600080606085870312156146a5578182fd5b84356146b081615727565b935060208501356146c081615727565b9250604085013567ffffffffffffffff8111156146db578283fd5b6146e787828801613fa2565b95989497509550505050565b600080600080600080600060e0888a03121561470d578081fd5b873561471881615727565b9650602088013561472881615727565b9550604088013561473881615737565b9450606088013561474881615701565b6001600160a01b03908116945060808901359061476482615727565b90935060a08901359061477682615737565b90925060c08901359061478882615701565b8082169250505092959891949750929550565b6000602082840312156147ac578081fd5b5051919050565b6000602082840312156147c4578081fd5b8135611aa981615737565b6000602082840312156147e0578081fd5b8151611aa981615737565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000815180845261484b8160208601602086016156d5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000835161488f8184602088016156d5565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b90565b60007fffffffffffffffff0000000000000000000000000000000000000000000000008860c01b1682527fffff000000000000000000000000000000000000000000000000000000000000808860f01b1660088401527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008760601b16600a840152808660f01b16601e84015250835161496a8160208501602088016156d5565b808301905083516149828160208401602088016156d5565b0160200198975050505050505050565b6001600160a01b0391909116815260200190565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b600085825260606020830152614a026060830185876147eb565b905082604083015295945050505050565b600060208252612b5f6020830184866147eb565b600060208252611aa96020830184614833565b600060408252614a4d6040830185614833565b905061ffff831660208301529392505050565b600060608252614a736060830186614833565b67ffffffffffffffff9490941660208301525060400152919050565b60208082526026908201527f4c617965725a65726f3a20696e76616c6964206f7574626f756e642070726f6f60408201527f6620747970650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f4c617965725a65726f3a20647374436861696e496420646f6573206e6f74206560408201527f7869737400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f4c617965725a65726f3a206f6e6c792074726561737572790000000000000000604082015260600190565b6020808252601e908201527f4c617965725a65726f3a20496e76616c696420636f6e66696720747970650000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a207769746864726177206661696c6564000000000000604082015260600190565b60208082526025908201527f4c617965725a65726f3a206e6f7420656e6f756768206e617469766520666f7260408201527f2066656573000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f4c617965725a65726f3a205f746f2063616e6e6f74206265207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f4c617965725a65726f3a205f6c617965725a65726f546f6b656e2063616e6e6f60408201527f74206265207a65726f2061646472657373000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a20696e76616c69642072656c6179657220616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4c617965725a65726f3a206661696c656420746f20726566756e640000000000604082015260600190565b6020808252602b908201527f4c617965725a65726f3a206d75737420626520706169642062792073656e646560408201527f72206f72206f726967696e000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f4c617965725a65726f3a20696e76616c69642064737441646472657373000000604082015260600190565b60208082526021908201527f4c617965725a65726f3a20696e76616c6964206f7261636c652061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f4c617965725a65726f3a20696e76616c6964205f7061636b65742e756c6e416460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f4c617965725a65726f3a20696e76616c696420737263436861696e2049640000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a20696e76616c69642072656c61796572000000000000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a2077726f6e6720706174682064617461000000000000604082015260600190565b60208082526029908201527f4c617965725a65726f3a206c6962726172792063616e6e6f74206265207a657260408201527f6f20616464726573730000000000000000000000000000000000000000000000606082015260800190565b60208082526043908201527f4c617965725a65726f3a206f7261636c6520646174612063616e206f6e6c792060408201527f75706461746520696620697420686173206d6f726520636f6e6669726d61746960608201527f6f6e730000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252601e908201527f4c617965725a65726f3a20696e76616c696420647374436861696e2049640000604082015260600190565b60208082526030908201527f4c617965725a65726f3a20696e76616c696420696e626f756e642070726f6f6660408201527f206c6962726172792076657273696f6e00000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a20696e76616c6964207372634164647265737320736960408201527f7a65000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f4c617965725a65726f3a2074726561737572792063616e6e6f74206265207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4c617965725a65726f3a2072656d6f746520756c6e20616c726561647920736560408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a2063616e206e6f7420616464206e6577206c6962726160408201527f7279000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f4c617965725a65726f3a206f6e6c7920656e64706f696e740000000000000000604082015260600190565b6020808252602e908201527f4c617965725a65726f3a20696e76616c6964206f7574626f756e6420626c6f6360408201527f6b20636f6e6669726d6174696f6e000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4c617965725a65726f3a20696e636f72726563742072656d6f7465206164647260408201527f6573732073697a65000000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4c617965725a65726f3a2072656d6f746520636861696e20616464726573732060408201527f73697a6520616c72656164792073657400000000000000000000000000000000606082015260800190565b6020808252602d908201527f4c617965725a65726f3a20696e76616c696420696e626f756e6420626c6f636b60408201527f20636f6e6669726d6174696f6e00000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4c617965725a65726f3a206e6f7420656e6f75676820626c6f636b20636f6e6660408201527f69726d6174696f6e730000000000000000000000000000000000000000000000606082015260800190565b600060c08201905061ffff808451168352602084015167ffffffffffffffff8082166020860152604086015191506001600160a01b0380831660408701528360608801511660608701528160808801511660808701528060a08801511660a08701525050505092915050565b61ffff91909116815260200190565b600061ffff851682526001600160a01b0384166020830152606060408301526155236060830184614833565b95945050505050565b600061ffff85168252604060208301526155236040830184866147eb565b600061ffff8816825260c0602083015261556760c0830188614833565b6001600160a01b038716604084015267ffffffffffffffff8616606084015284608084015282810360a084015261559e8185614833565b9998505050505050505050565b600061ffff80881683528087166020840152506001600160a01b038516604083015283606083015260a06080830152613d9860a0830184614833565b61ffff948516815292909316602083015267ffffffffffffffff1660408201526001600160a01b03909116606082015260800190565b61ffff968716815267ffffffffffffffff95861660208201526001600160a01b03948516604082015292909516606083015290921660808301529190911660a082015260c00190565b918252602082015260400190565b67ffffffffffffffff91909116815260200190565b60405181810167ffffffffffffffff811182821017156156a557fe5b604052919050565b600080858511156156bc578182fd5b838611156156c8578182fd5b5050820193919092039150565b60005b838110156156f05781810151838201526020016156d8565b83811115613ba95750506000910152565b74ffffffffffffffffffffffffffffffffffffffffff8116811461572457600080fd5b50565b61ffff8116811461572457600080fd5b67ffffffffffffffff8116811461572457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122054aec73c99973aee9894297c3c705deb10ab19e90e99ce66c6114175d7862f2a64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102e75760003560e01c80638317814a11610184578063d543c774116100d6578063ed28580a1161008a578063f47a5feb11610064578063f47a5feb14610c06578063f58589a214610c35578063f8e1734c14610c6f576102e7565b8063ed28580a14610b58578063f0f4426014610b92578063f2fde38b14610bcc576102e7565b8063ddfdef5a116100bb578063ddfdef5a14610aaa578063ea216c2114610ae4578063eb0d4c3114610b1e576102e7565b8063d543c77414610a29578063db00719b14610a70576102e7565b8063959f594311610138578063b77d22ad11610112578063b77d22ad14610979578063b8e7e3e0146109a8578063b9a99bed146109e2576102e7565b8063959f5943146108be578063987fa2d5146108f8578063a466222214610932576102e7565b806387078f9f1161016957806387078f9f146108265780638da5cb5b14610860578063904d3b8d1461088f576102e7565b80638317814a146107b25780638525b711146107ec576102e7565b806352d2871f1161023d5780636a14ac82116101f1578063759c5b3b116101cb578063759c5b3b1461070f5780638140666e146107495780638207f79d14610778576102e7565b80636a14ac821461066c578063704316e5146106a6578063715018a6146106e0576102e7565b80635b056da5116102225780635b056da5146105c75780635e280f111461060357806369412bfa14610632576102e7565b806352d2871f1461055357806352d3b5001461058d576102e7565b80632cfacb061161029f57806340a7bb101161027957806340a7bb10146104c957806349148c37146105115780634d3a0f7c14610540576102e7565b80632cfacb06146104125780632f8134641461044e57806331bd24301461049a576102e7565b806307b9ca7c116102d057806307b9ca7c1461036d57806318da00111461039c5780632a819bbf146103cb576102e7565b806302bd9743146102ec57806307b18bde14610331575b600080fd5b3480156102f857600080fd5b50d3801561030557600080fd5b50d2801561031257600080fd5b5061031b610ca9565b6040516103289190614992565b60405180910390f35b34801561033d57600080fd5b50d3801561034a57600080fd5b50d2801561035757600080fd5b5061036b6103663660046140bb565b610ccd565b005b34801561037957600080fd5b50d3801561038657600080fd5b50d2801561039357600080fd5b5061031b610e57565b3480156103a857600080fd5b50d380156103b557600080fd5b50d280156103c257600080fd5b5061031b610e66565b3480156103d757600080fd5b50d380156103e457600080fd5b50d280156103f157600080fd5b50610405610400366004614663565b610e75565b6040516103289190614a27565b34801561041e57600080fd5b50d3801561042b57600080fd5b50d2801561043857600080fd5b50610441610f37565b60405161032891906149c9565b34801561045a57600080fd5b50d3801561046757600080fd5b50d2801561047457600080fd5b5061048861048336600461435c565b610f3c565b6040516103289695949392919061561d565b3480156104a657600080fd5b50d380156104b357600080fd5b50d280156104c057600080fd5b50610441610fc0565b3480156104d557600080fd5b50d380156104e257600080fd5b50d280156104ef57600080fd5b506105036104fe3660046143b9565b610fc5565b604051610328929190615666565b34801561051d57600080fd5b50d3801561052a57600080fd5b50d2801561053757600080fd5b506104416112f5565b61036b61054e366004614190565b6112fa565b34801561055f57600080fd5b50d3801561056c57600080fd5b50d2801561057957600080fd5b5061040561058836600461446d565b611746565b34801561059957600080fd5b50d380156105a657600080fd5b50d280156105b357600080fd5b5061036b6105c236600461408f565b611ab0565b3480156105d357600080fd5b50d380156105e057600080fd5b50d280156105ed57600080fd5b506105f6611bac565b60405161032891906154e8565b34801561060f57600080fd5b50d3801561061c57600080fd5b50d2801561062957600080fd5b5061031b611bd0565b34801561063e57600080fd5b50d3801561064b57600080fd5b50d2801561065857600080fd5b5061044161066736600461408f565b611bf4565b34801561067857600080fd5b50d3801561068557600080fd5b50d2801561069257600080fd5b5061036b6106a13660046146f3565b611c13565b3480156106b257600080fd5b50d380156106bf57600080fd5b50d280156106cc57600080fd5b5061036b6106db3660046145d6565b611f75565b3480156106ec57600080fd5b50d380156106f957600080fd5b50d2801561070657600080fd5b5061036b61203a565b34801561071b57600080fd5b50d3801561072857600080fd5b50d2801561073557600080fd5b50610441610744366004614130565b612110565b34801561075557600080fd5b50d3801561076257600080fd5b50d2801561076f57600080fd5b5061044161213c565b34801561078457600080fd5b50d3801561079157600080fd5b50d2801561079e57600080fd5b5061036b6107ad366004614378565b612141565b3480156107be57600080fd5b50d380156107cb57600080fd5b50d280156107d857600080fd5b5061036b6107e7366004614690565b6122da565b3480156107f857600080fd5b50d3801561080557600080fd5b50d2801561081257600080fd5b5061036b61082136600461417e565b6123c3565b34801561083257600080fd5b50d3801561083f57600080fd5b50d2801561084c57600080fd5b5061036b61085b3660046145ab565b6124c5565b34801561086c57600080fd5b50d3801561087957600080fd5b50d2801561088657600080fd5b5061031b6125bc565b34801561089b57600080fd5b50d380156108a857600080fd5b50d280156108b557600080fd5b506104416125cb565b3480156108ca57600080fd5b50d380156108d757600080fd5b50d280156108e457600080fd5b506104416108f336600461435c565b6125d0565b34801561090457600080fd5b50d3801561091157600080fd5b50d2801561091e57600080fd5b5061036b61092d3660046144b7565b6125e2565b34801561093e57600080fd5b50d3801561094b57600080fd5b50d2801561095857600080fd5b5061096c610967366004614378565b612a76565b604051610328919061547c565b34801561098557600080fd5b50d3801561099257600080fd5b50d2801561099f57600080fd5b50610441612a88565b3480156109b457600080fd5b50d380156109c157600080fd5b50d280156109ce57600080fd5b506105f66109dd36600461435c565b612a8d565b3480156109ee57600080fd5b50d380156109fb57600080fd5b50d28015610a0857600080fd5b50610a1c610a17366004614610565b612aa3565b6040516103289190615674565b348015610a3557600080fd5b50d38015610a4257600080fd5b50d28015610a4f57600080fd5b50610a63610a5e366004614663565b612b67565b60405161032891906149a6565b348015610a7c57600080fd5b50d38015610a8957600080fd5b50d28015610a9657600080fd5b5061031b610aa5366004614663565b612b87565b348015610ab657600080fd5b50d38015610ac357600080fd5b50d28015610ad057600080fd5b50610488610adf3660046140ef565b612bad565b348015610af057600080fd5b50d38015610afd57600080fd5b50d28015610b0a57600080fd5b50610441610b1936600461435c565b612c3c565b348015610b2a57600080fd5b50d38015610b3757600080fd5b50d28015610b4457600080fd5b5061036b610b53366004614663565b612c4e565b348015610b6457600080fd5b50d38015610b7157600080fd5b50d28015610b7e57600080fd5b5061036b610b8d3660046145ab565b612d3c565b348015610b9e57600080fd5b50d38015610bab57600080fd5b50d28015610bb857600080fd5b5061036b610bc736600461408f565b612e27565b348015610bd857600080fd5b50d38015610be557600080fd5b50d28015610bf257600080fd5b5061036b610c0136600461408f565b612f23565b348015610c1257600080fd5b50d38015610c1f57600080fd5b50d28015610c2c57600080fd5b50610441613050565b348015610c4157600080fd5b50d38015610c4e57600080fd5b50d28015610c5b57600080fd5b50610441610c6a36600461408f565b613056565b348015610c7b57600080fd5b50d38015610c8857600080fd5b50d28015610c9557600080fd5b5061036b610ca4366004614531565b613068565b7f000000000000000000000000000000000000000000000000000000000000000081565b60026000541415610d25576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556001600160a01b038216610d595760405162461bcd60e51b8152600401610d5090614c4b565b60405180910390fd5b33600090815260046020526040902054610d7390826133cf565b336000908152600460205260408082209290925590516001600160a01b038416908390610d9f906148c7565b60006040518083038185875af1925050503d8060008114610ddc576040519150601f19603f3d011682016040523d82523d6000602084013e610de1565b606091505b5050905080610e025760405162461bcd60e51b8152600401610d5090614bb7565b826001600160a01b0316336001600160a01b03167f3bfd26201736b5cb14a562ab3cfc2bef76901726e3a78483d6288af47131e1d984604051610e4591906149c9565b60405180910390a35050600160005550565b6002546001600160a01b031681565b6003546001600160a01b031681565b60086020908152600092835260408084208252918352918190208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f810185900485028201850190935282815292909190830182828015610f2f5780601f10610f0457610100808354040283529160200191610f2f565b820191906000526020600020905b815481529060010190602001808311610f1257829003601f168201915b505050505081565b600381565b6007602052600090815260409020805460019091015461ffff8083169267ffffffffffffffff6201000082048116936001600160a01b036a010000000000000000000084048116947e010000000000000000000000000000000000000000000000000000000000009094049093169291811691680100000000000000009091041686565b600681565b6000806000610fd48a8a61342c565b90506060841561101d5785858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293506110ec92505050565b61ffff808c166000908152600860209081526040808320606087015190941683529281529082902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600186161502019093169290920491820184900484028101840190945280845290918301828280156110e45780601f106110b9576101008083540402835291602001916110e4565b820191906000526020600020905b8154815290600101906020018083116110c757829003601f168201915b505050505090505b600082604001516001600160a01b031663c03f15298d85606001518e8e8e9050876040518663ffffffff1660e01b815260040161112d9594939291906155ab565b60206040518083038186803b15801561114557600080fd5b505afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d919061479b565b905060008b905060008460a001516001600160a01b0316635553fb8e8f87606001518860800151866040518563ffffffff1660e01b81526004016111c494939291906155e7565b60206040518083038186803b1580156111dc57600080fd5b505afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611214919061479b565b6003546040517f5cbbbd750000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0390911690635cbbbd7590611267908e90889087906004016149b1565b60206040518083038186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b7919061479b565b90508a6112c757809750876112cc565b809650865b506112e1826112db8a876135f7565b906135f7565b975050505050505097509795505050505050565b600281565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146113425760405162461bcd60e51b8152600401610d5090615274565b61ffff89166000908152600e60205260409020548b908a906113765760405162461bcd60e51b8152600401610d5090614aec565b61ffff81166000908152600c602052604081205460609190801580159061139f5750601481018c145b6113bb5760405162461bcd60e51b8152600401610d5090615308565b6000808e8e8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505083810160140151925090506001600160a01b038781169083161461142a5760405162461bcd60e51b8152600401610d5090614f55565b8e8e600090859261143d939291906156ad565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517f6fe7b673000000000000000000000000000000000000000000000000000000008152929750506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636fe7b67391506114dd9089908b9086906004016154f7565b602060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f91906147cf565b935050505060008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093945061157b925087915088905061342c565b905060006115c386838986518d8d8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061365192505050565b905060006115d287848a61382b565b905060006115e283838b8f6138e5565b905060006115f4826112db86866135f7565b9050348111156116165760405162461bcd60e51b8152600401610d5090614bee565b600061162234836133cf565b905080156116a85760008f6001600160a01b031682604051611643906148c7565b60006040518083038185875af1925050503d8060008114611680576040519150601f19603f3d011682016040523d82523d6000602084013e611685565b606091505b50509050806116a65760405162461bcd60e51b8152600401610d5090614d62565b505b6000887f00000000000000000000000000000000000000000000000000000000000000008d8d8d8c6040516020016116e5969594939291906148ca565b60405160208183030381529060405290507fe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82816040516117259190614a27565b60405180910390a15050505050505050505050505050505050505050505050565b6001600160a01b038216600090815260066020908152604080832061ffff87168452909152902060609060018314156117da57805461ffff166117c45761ffff8086166000908152600760209081526040918290205491516117ad939290921691016154e8565b604051602081830303815290604052915050611aa9565b80546040516117ad9161ffff16906020016154e8565b600283141561185057805462010000900467ffffffffffffffff1661182e5761ffff85166000908152600760209081526040918290205491516117ad9262010000900467ffffffffffffffff169101615674565b80546040516117ad9162010000900467ffffffffffffffff1690602001615674565b60038314156118db5780546a010000000000000000000090046001600160a01b03166118b25761ffff85166000908152600760209081526040918290205491516117ad926a010000000000000000000090046001600160a01b03169101614992565b80546040516117ad916a010000000000000000000090046001600160a01b031690602001614992565b60048314156119945780547e01000000000000000000000000000000000000000000000000000000000000900461ffff1661195c5761ffff8086166000908152600760209081526040918290205491516117ad937e0100000000000000000000000000000000000000000000000000000000000090930490921691016154e8565b80546040516117ad917e01000000000000000000000000000000000000000000000000000000000000900461ffff16906020016154e8565b6005831415611a0157600181015467ffffffffffffffff166119e25761ffff85166000908152600760209081526040918290206001015491516117ad9267ffffffffffffffff169101615674565b60018101546040516117ad9167ffffffffffffffff1690602001615674565b6006831415611a8f5760018101546801000000000000000090046001600160a01b0316611a655761ffff85166000908152600760209081526040918290206001015491516117ad926801000000000000000090046001600160a01b03169101614992565b60018101546040516117ad916801000000000000000090046001600160a01b031690602001614992565b60405162461bcd60e51b8152600401610d5090614b80565b505b9392505050565b611ab8613a4f565b6001600160a01b0316611ac96125bc565b6001600160a01b031614611b24576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611b4a5760405162461bcd60e51b8152600401610d5090614ca8565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f33d644987381deff4408951d55afa136f124e22a7810b163b2aaa3ebef770f6490600090a250565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600460205260409020545b919050565b611c1b613a4f565b6001600160a01b0316611c2c6125bc565b6001600160a01b031614611c87576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8088166000908152600a6020526040902054811690871611801590611cb3575060008661ffff16115b611ccf5760405162461bcd60e51b8152600401610d50906150a3565b60008567ffffffffffffffff1611611cf95760405162461bcd60e51b8152600401610d50906153c2565b6001600160a01b038416611d1f5760405162461bcd60e51b8152600401610d5090614d05565b61ffff8088166000908152600b602090815260408083209387168352929052205460ff16611d5f5760405162461bcd60e51b8152600401610d5090614a8f565b60008267ffffffffffffffff1611611d895760405162461bcd60e51b8152600401610d50906152ab565b6001600160a01b038116611daf5760405162461bcd60e51b8152600401610d5090614e2d565b6040518060c001604052808761ffff1681526020018667ffffffffffffffff168152602001856001600160a01b031681526020018461ffff1681526020018367ffffffffffffffff168152602001826001600160a01b0316815250600760008961ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001600a6101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600001601e6101000a81548161ffff021916908361ffff16021790555060808201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160010160086101000a8154816001600160a01b0302191690836001600160a01b031602179055509050508661ffff167f5a76432853a0871c4e780def7f3ffc7912339b53f022ac31127fe5ff84a36fa1878787878787604051611f649695949392919061561d565b60405180910390a250505050505050565b336000908152600d6020908152604080832061ffff8816845282528083208684528252808320848452909152902054828110611fc35760405162461bcd60e51b8152600401610d5090614fe9565b336000818152600d6020908152604080832061ffff8a1680855290835281842089855283528184208785529092529182902086905590517f74bbc026808dcba59692d6a8bb20596849ca718e10e2432c6cdf48af865bc5d99061202b908890879089906149d2565b60405180910390a35050505050565b612042613a4f565b6001600160a01b03166120536125bc565b6001600160a01b0316146120ae576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600d60209081526000948552604080862082529385528385208152918452828420909152825290205481565b600481565b612149613a4f565b6001600160a01b031661215a6125bc565b6001600160a01b0316146121b5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166121db5760405162461bcd60e51b8152600401610d5090614f8c565b61ffff8083166000908152600a602052604090205481169081106122115760405162461bcd60e51b8152600401610d5090615217565b61ffff8381166000818152600a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660019790970195861696871790556009825280832095835294905283902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861617905591519091907f802d55279d51813cb7a9a98e8fd2d7bec5346cb830901c11b85d1650cb857e9a906122cd908590614992565b60405180910390a2505050565b6122e2613a4f565b6001600160a01b03166122f36125bc565b6001600160a01b03161461234e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8085166000908152600860209081526040808320938716835292905220612379908383613e47565b508261ffff168461ffff167f4a5695eee2a74d548d5f5c485a3de99ace99e3b664c8e30a90f49be6ebb5493284846040516123b5929190614a13565b60405180910390a350505050565b6002600054141561241b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556003546001600160a01b0316331461244a5760405162461bcd60e51b8152600401610d5090614b49565b60055461245790826133cf565b600555600254612471906001600160a01b03168383613a53565b816001600160a01b0316336001600160a01b03167f3a20c8c3cd1848485ae8261a52398bb9b26f195b717306b3cf7f058e62c095d5836040516124b491906149c9565b60405180910390a350506001600055565b6124cd613a4f565b6001600160a01b03166124de6125bc565b6001600160a01b031614612539576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff82166000908152600c60205260409020541561256a5760405162461bcd60e51b8152600401610d5090615365565b61ffff82166000818152600c602052604090819020839055517f0611bb2107e385b79ec826fff8ecc1c1248a7aae3c875c96668f8cfbf1734220906125b09084906149c9565b60405180910390a25050565b6001546001600160a01b031690565b600581565b600c6020526000908152604090205481565b60006125ee888861342c565b60408101519091506001600160a01b0316331461261d5760405162461bcd60e51b8152600401610d5090614f1e565b612625613ef1565b61ffff89166000908152600c6020526040902054806126565760405162461bcd60e51b8152600401610d5090615308565b60a08301516001600160a01b03166000908152600d6020908152604080832061ffff8e16845282528083208a8452825280832089845290915290205480158015906126af5750836020015167ffffffffffffffff168110155b6126cb5760405162461bcd60e51b8152600401610d509061541f565b61ffff808c166000908152600960209081526040808320885190941683529290528190205490517fb71e0f710000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690819063b71e0f719061273d908b908b908b9089906004016149e8565b600060405180830381600087803b15801561275757600080fd5b505af115801561276b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526127b19190810190614280565b60a081015161ffff8e166000908152600e60205260409020549195501491505080156127e0575060a082015115155b6127fc5760405162461bcd60e51b8152600401610d5090614e8a565b8961ffff16826000015161ffff16146128275760405162461bcd60e51b8152600401610d5090614ee7565b808260800151511461284b5760405162461bcd60e51b8152600401610d5090615100565b7f000000000000000000000000000000000000000000000000000000000000000061ffff16826020015161ffff16146128965760405162461bcd60e51b8152600401610d509061506c565b886001600160a01b031682606001516001600160a01b0316146128cb5760405162461bcd60e51b8152600401610d5090614df6565b6128d489613ad8565b6129455781606001516001600160a01b0316826000015161ffff167fa2786598bd84ae4a299103996359e6cb4333404583256079dfc279386baf5832846080015185604001518660c001518051906020012060405161293593929190614a60565b60405180910390a3505050612a6d565b60008260800151836060015160405160200161296292919061487d565b604051602081830303815290604052905082606001516001600160a01b0316836000015161ffff167f2bd2d8a84b748439fd50d79a49502b4eb5faa25b864da6a9ab5c150704be9a4d856080015186604001518760c00151805190602001206040516129d093929190614a60565b60405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2fa48138c838d87604001518e8960c001516040518763ffffffff1660e01b8152600401612a369695949392919061554a565b600060405180830381600087803b158015612a5057600080fd5b505af1158015612a64573d6000803e3d6000fd5b50505050505050505b50505050505050565b612a7e613f2f565b611aa9838361342c565b600181565b600a6020526000908152604090205461ffff1681565b6040517fc533338f0000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c533338f90612b0f9087908790879060040161552c565b60206040518083038186803b158015612b2757600080fd5b505afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f91906147cf565b949350505050565b600b60209081526000928352604080842090915290825290205460ff1681565b60096020908152600092835260408084209091529082529020546001600160a01b031681565b60066020908152600092835260408084209091529082529020805460019091015461ffff8083169267ffffffffffffffff6201000082048116936001600160a01b036a010000000000000000000084048116947e010000000000000000000000000000000000000000000000000000000000009094049093169291811691680100000000000000009091041686565b600e6020526000908152604090205481565b612c56613a4f565b6001600160a01b0316612c676125bc565b6001600160a01b031614612cc2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8083166000818152600b60209081526040808320948616835293905282902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590517fec23bee6f88cfecebb09d6aaaed66f0ce110debc1f61117c8270a7116597df9a906125b09084906154e8565b612d44613a4f565b6001600160a01b0316612d556125bc565b6001600160a01b031614612db0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff82166000908152600e602052604090205415612de15760405162461bcd60e51b8152600401610d50906151ba565b61ffff82166000818152600e602052604090819020839055517f0dad975e1d2fbe771c95cdcc7be9a1e61181de7173abe0a32b8f8f83140873e5906125b09084906149c9565b612e2f613a4f565b6001600160a01b0316612e406125bc565b6001600160a01b031614612e9b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612ec15760405162461bcd60e51b8152600401610d509061515d565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390600090a250565b612f2b613a4f565b6001600160a01b0316612f3c6125bc565b6001600160a01b031614612f97576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612fdc5760405162461bcd60e51b815260040180806020018281038252602681526020018061574e6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60055481565b60046020526000908152604090205481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146130b05760405162461bcd60e51b8152600401610d5090615274565b6001600160a01b038416600090815260066020908152604080832061ffff891684529091529020600184141561315d5760006130ee8385018561435c565b61ffff8089166000908152600a6020526040902054919250908116908216111561312a5760405162461bcd60e51b8152600401610d50906150a3565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff91909116178155613383565b60028414156131b4576000613174838501856147b3565b825467ffffffffffffffff90911662010000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffff90911617825550613383565b60038414156132125760006131cb8385018561408f565b82546001600160a01b039091166a0100000000000000000000027fffff0000000000000000000000000000000000000000ffffffffffffffffffff90911617825550613383565b60048414156132cc5760006132298385018561435c565b61ffff8089166000908152600b602090815260408083209385168352929052205490915060ff168061325d575061ffff8116155b6132795760405162461bcd60e51b8152600401610d5090614a8f565b815461ffff9091167e01000000000000000000000000000000000000000000000000000000000000027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909116178155613383565b60058414156133245760006132e3838501856147b3565b6001830180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9290921691909117905550613383565b6006841415611a8f57600061333b8385018561408f565b6001830180546001600160a01b0390921668010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff909216919091179055505b83856001600160a01b03167ffc01bf86212a14151d51d1be5c2ac64d67d5ec823dfc6f53298d7ce3f3d3d25285856040516133bf929190614a13565b60405180910390a3505050505050565b600082821115613426576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b613434613f2f565b6001600160a01b03808316600090815260066020908152604080832061ffff808916808652918452828520835160c0810185528154808416825267ffffffffffffffff6201000082048116838901526a010000000000000000000082048a16838801527e010000000000000000000000000000000000000000000000000000000000009091048416606083015260019092015491821660808201526801000000000000000090910490961660a08701529084526007909252909120825190911661350157805461ffff1682525b602082015167ffffffffffffffff1661352c57805462010000900467ffffffffffffffff1660208301525b60408201516001600160a01b031661355d5780546a010000000000000000000090046001600160a01b031660408301525b606082015161ffff166135985780547e01000000000000000000000000000000000000000000000000000000000000900461ffff1660608301525b608082015167ffffffffffffffff166135c057600181015467ffffffffffffffff1660808301525b60a08201516001600160a01b0316611aa757600101546801000000000000000090046001600160a01b031660a08201529392505050565b600082820183811015611aa9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081516000141561372c5761ffff808716600090815260086020908152604080832060608a015190941683529281529082902080548351601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610100600186161502019093169290920491820184900484028101840190945280845290918301828280156137245780601f106136f957610100808354040283529160200191613724565b820191906000526020600020905b81548152906001019060200180831161370757829003601f168201915b505050505091505b604080860151606087015191517f5886ea65000000000000000000000000000000000000000000000000000000008152909182916001600160a01b03831691635886ea6591613785918c918b908b908b906004016155ab565b602060405180830381600087803b15801561379f57600080fd5b505af11580156137b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d7919061479b565b92506137e38284613ade565b7fb0c632f55f1e1b3b2c3d82f41ee4716bb4c00f0f5d84cdafc141581bb8757a4f848860600151604051613818929190614a3a565b60405180910390a1505095945050505050565b60a0820151606083015160808401516040517fc5e193cd000000000000000000000000000000000000000000000000000000008152600093926001600160a01b0384169263c5e193cd92613887928a92909189906004016155e7565b602060405180830381600087803b1580156138a157600080fd5b505af11580156138b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d9919061479b565b9150611aa78183613ade565b6000806001600160a01b038316158061390757506002546001600160a01b0316155b6003546040517f5cbbbd750000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0390911690635cbbbd759061395b908515908b908b906004016149b1565b60206040518083038186803b15801561397357600080fd5b505afa158015613987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ab919061479b565b90508015613a455781156139d8576003546001600160a01b03166139cf8183613ade565b81935050613a45565b846001600160a01b0316846001600160a01b03161480613a0057506001600160a01b03841632145b613a1c5760405162461bcd60e51b8152600401610d5090614d99565b600254613a34906001600160a01b0316853084613b21565b600554613a4190826135f7565b6005555b5050949350505050565b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613ad3908490613baf565b505050565b3b151590565b6001600160a01b038216600090815260046020526040902054613b0190826135f7565b6001600160a01b0390921660009081526004602052604090209190915550565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613ba9908590613baf565b50505050565b6000613c04826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c609092919063ffffffff16565b805190915015613ad357808060200190516020811015613c2357600080fd5b5051613ad35760405162461bcd60e51b815260040180806020018281038252602a815260200180615774602a913960400191505060405180910390fd5b6060612b5f848460008585613c7485613ad8565b613cc5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613d2157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613ce4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d83576040519150601f19603f3d011682016040523d82523d6000602084013e613d88565b606091505b5091509150613d98828286613da3565b979650505050505050565b60608315613db2575081611aa9565b825115613dc25782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613e0c578181015183820152602001613df4565b50505050905090810190601f168015613e395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282613e7d5760008555613ee1565b82601f10613eb4578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555613ee1565b82800160010185558215613ee1579182015b82811115613ee1578235825591602001919060010190613ec6565b50613eed929150613f64565b5090565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820181905260a082019290925260c081019190915290565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b5b80821115613eed5760008155600101613f65565b60008135613f8681615701565b6001600160a01b031692915050565b60008151613f8681615701565b60008083601f840112613fb3578182fd5b50813567ffffffffffffffff811115613fca578182fd5b602083019150836020828501011115613fe257600080fd5b9250929050565b600082601f830112613ff9578081fd5b815167ffffffffffffffff81111561400d57fe5b61403e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601615689565b818152846020838601011115614052578283fd5b612b5f8260208301602087016156d5565b8035611c0e81615727565b8051611c0e81615727565b8035611c0e81615737565b8051611c0e81615737565b6000602082840312156140a0578081fd5b81356140ab81615701565b6001600160a01b03169392505050565b600080604083850312156140cd578081fd5b82356140d881615701565b6001600160a01b0316946020939093013593505050565b60008060408385031215614101578182fd5b823561410c81615701565b6001600160a01b03169150602083013561412581615727565b809150509250929050565b60008060008060808587031215614145578182fd5b843561415081615701565b6001600160a01b03169350602085013561416981615727565b93969395505050506040820135916060013590565b600080604083850312156140cd578182fd5b60008060008060008060008060008060006101008c8e0312156141b1578687fd5b6141ba8c613f79565b9a506141c860208d01614079565b99506141d660408d01614063565b985067ffffffffffffffff8060608e013511156141f1578788fd5b6142018e60608f01358f01613fa2565b909950975060808d0135811015614216578687fd5b6142268e60808f01358f01613fa2565b909750955061423760a08e01613f79565b945061424560c08e01613f79565b93508060e08e01351115614257578283fd5b506142688d60e08e01358e01613fa2565b81935080925050509295989b509295989b9093969950565b600060208284031215614291578081fd5b815167ffffffffffffffff808211156142a8578283fd5b9083019060e082860312156142bb578283fd5b6142c560e0615689565b6142ce8361406e565b81526142dc6020840161406e565b60208201526142ed60408401614084565b60408201526142fe60608401613f95565b6060820152608083015182811115614314578485fd5b61432087828601613fe9565b60808301525060a083015160a082015260c083015182811115614341578485fd5b61434d87828601613fe9565b60c08301525095945050505050565b60006020828403121561436d578081fd5b8135611aa981615727565b6000806040838503121561438a578182fd5b823561439581615727565b915060208301356143a581615701565b6001600160a01b0381169150509250929050565b600080600080600080600060a0888a0312156143d3578081fd5b87356143de81615727565b965060208801356143ee81615701565b6001600160a01b03169550604088013567ffffffffffffffff80821115614413578283fd5b61441f8b838c01613fa2565b909750955060608a013591508115158214614438578283fd5b9093506080890135908082111561444d578283fd5b5061445a8a828b01613fa2565b989b979a50959850939692959293505050565b600080600060608486031215614481578081fd5b833561448c81615727565b9250602084013561449c81615701565b6001600160a01b038116925050604084013590509250925092565b600080600080600080600060c0888a0312156144d1578081fd5b87356144dc81615727565b965060208801356144ec81615701565b6001600160a01b0316955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115614525578182fd5b61445a8a828b01613fa2565b600080600080600060808688031215614548578283fd5b853561455381615727565b9450602086013561456381615701565b6001600160a01b0316935060408601359250606086013567ffffffffffffffff81111561458e578182fd5b61459a88828901613fa2565b969995985093965092949392505050565b600080604083850312156145bd578182fd5b82356145c881615727565b946020939093013593505050565b600080600080608085870312156145eb578182fd5b84356145f681615727565b966020860135965060408601359560600135945092505050565b600080600060408486031215614624578081fd5b833561462f81615727565b9250602084013567ffffffffffffffff81111561464a578182fd5b61465686828701613fa2565b9497909650939450505050565b60008060408385031215614675578182fd5b823561468081615727565b9150602083013561412581615727565b600080600080606085870312156146a5578182fd5b84356146b081615727565b935060208501356146c081615727565b9250604085013567ffffffffffffffff8111156146db578283fd5b6146e787828801613fa2565b95989497509550505050565b600080600080600080600060e0888a03121561470d578081fd5b873561471881615727565b9650602088013561472881615727565b9550604088013561473881615737565b9450606088013561474881615701565b6001600160a01b03908116945060808901359061476482615727565b90935060a08901359061477682615737565b90925060c08901359061478882615701565b8082169250505092959891949750929550565b6000602082840312156147ac578081fd5b5051919050565b6000602082840312156147c4578081fd5b8135611aa981615737565b6000602082840312156147e0578081fd5b8151611aa981615737565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000815180845261484b8160208601602086016156d5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000835161488f8184602088016156d5565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b90565b60007fffffffffffffffff0000000000000000000000000000000000000000000000008860c01b1682527fffff000000000000000000000000000000000000000000000000000000000000808860f01b1660088401527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008760601b16600a840152808660f01b16601e84015250835161496a8160208501602088016156d5565b808301905083516149828160208401602088016156d5565b0160200198975050505050505050565b6001600160a01b0391909116815260200190565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b600085825260606020830152614a026060830185876147eb565b905082604083015295945050505050565b600060208252612b5f6020830184866147eb565b600060208252611aa96020830184614833565b600060408252614a4d6040830185614833565b905061ffff831660208301529392505050565b600060608252614a736060830186614833565b67ffffffffffffffff9490941660208301525060400152919050565b60208082526026908201527f4c617965725a65726f3a20696e76616c6964206f7574626f756e642070726f6f60408201527f6620747970650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f4c617965725a65726f3a20647374436861696e496420646f6573206e6f74206560408201527f7869737400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f4c617965725a65726f3a206f6e6c792074726561737572790000000000000000604082015260600190565b6020808252601e908201527f4c617965725a65726f3a20496e76616c696420636f6e66696720747970650000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a207769746864726177206661696c6564000000000000604082015260600190565b60208082526025908201527f4c617965725a65726f3a206e6f7420656e6f756768206e617469766520666f7260408201527f2066656573000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f4c617965725a65726f3a205f746f2063616e6e6f74206265207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f4c617965725a65726f3a205f6c617965725a65726f546f6b656e2063616e6e6f60408201527f74206265207a65726f2061646472657373000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a20696e76616c69642072656c6179657220616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4c617965725a65726f3a206661696c656420746f20726566756e640000000000604082015260600190565b6020808252602b908201527f4c617965725a65726f3a206d75737420626520706169642062792073656e646560408201527f72206f72206f726967696e000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f4c617965725a65726f3a20696e76616c69642064737441646472657373000000604082015260600190565b60208082526021908201527f4c617965725a65726f3a20696e76616c6964206f7261636c652061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f4c617965725a65726f3a20696e76616c6964205f7061636b65742e756c6e416460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f4c617965725a65726f3a20696e76616c696420737263436861696e2049640000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a20696e76616c69642072656c61796572000000000000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a2077726f6e6720706174682064617461000000000000604082015260600190565b60208082526029908201527f4c617965725a65726f3a206c6962726172792063616e6e6f74206265207a657260408201527f6f20616464726573730000000000000000000000000000000000000000000000606082015260800190565b60208082526043908201527f4c617965725a65726f3a206f7261636c6520646174612063616e206f6e6c792060408201527f75706461746520696620697420686173206d6f726520636f6e6669726d61746960608201527f6f6e730000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252601e908201527f4c617965725a65726f3a20696e76616c696420647374436861696e2049640000604082015260600190565b60208082526030908201527f4c617965725a65726f3a20696e76616c696420696e626f756e642070726f6f6660408201527f206c6962726172792076657273696f6e00000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a20696e76616c6964207372634164647265737320736960408201527f7a65000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f4c617965725a65726f3a2074726561737572792063616e6e6f74206265207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4c617965725a65726f3a2072656d6f746520756c6e20616c726561647920736560408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a2063616e206e6f7420616464206e6577206c6962726160408201527f7279000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f4c617965725a65726f3a206f6e6c7920656e64706f696e740000000000000000604082015260600190565b6020808252602e908201527f4c617965725a65726f3a20696e76616c6964206f7574626f756e6420626c6f6360408201527f6b20636f6e6669726d6174696f6e000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4c617965725a65726f3a20696e636f72726563742072656d6f7465206164647260408201527f6573732073697a65000000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4c617965725a65726f3a2072656d6f746520636861696e20616464726573732060408201527f73697a6520616c72656164792073657400000000000000000000000000000000606082015260800190565b6020808252602d908201527f4c617965725a65726f3a20696e76616c696420696e626f756e6420626c6f636b60408201527f20636f6e6669726d6174696f6e00000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4c617965725a65726f3a206e6f7420656e6f75676820626c6f636b20636f6e6660408201527f69726d6174696f6e730000000000000000000000000000000000000000000000606082015260800190565b600060c08201905061ffff808451168352602084015167ffffffffffffffff8082166020860152604086015191506001600160a01b0380831660408701528360608801511660608701528160808801511660808701528060a08801511660a08701525050505092915050565b61ffff91909116815260200190565b600061ffff851682526001600160a01b0384166020830152606060408301526155236060830184614833565b95945050505050565b600061ffff85168252604060208301526155236040830184866147eb565b600061ffff8816825260c0602083015261556760c0830188614833565b6001600160a01b038716604084015267ffffffffffffffff8616606084015284608084015282810360a084015261559e8185614833565b9998505050505050505050565b600061ffff80881683528087166020840152506001600160a01b038516604083015283606083015260a06080830152613d9860a0830184614833565b61ffff948516815292909316602083015267ffffffffffffffff1660408201526001600160a01b03909116606082015260800190565b61ffff968716815267ffffffffffffffff95861660208201526001600160a01b03948516604082015292909516606083015290921660808301529190911660a082015260c00190565b918252602082015260400190565b67ffffffffffffffff91909116815260200190565b60405181810167ffffffffffffffff811182821017156156a557fe5b604052919050565b600080858511156156bc578182fd5b838611156156c8578182fd5b5050820193919092039150565b60005b838110156156f05781810151838201526020016156d8565b83811115613ba95750506000910152565b74ffffffffffffffffffffffffffffffffffffffffff8116811461572457600080fd5b50565b61ffff8116811461572457600080fd5b67ffffffffffffffff8116811461572457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122054aec73c99973aee9894297c3c705deb10ab19e90e99ce66c6114175d7862f2a64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2233,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10494,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "layerZeroToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1690"
      },
      {
        "astId": 10496,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "treasuryContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILayerZeroTreasury)17076"
      },
      {
        "astId": 10500,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "nativeFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10502,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "treasuryZROFees",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10508,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "appConfig",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_struct(ApplicationConfiguration)17207_storage))"
      },
      {
        "astId": 10512,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "defaultAppConfig",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint16,t_struct(ApplicationConfiguration)17207_storage)"
      },
      {
        "astId": 10518,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "defaultAdapterParams",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 10524,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "inboundProofLibrary",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_address))"
      },
      {
        "astId": 10528,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "maxInboundProofLibrary",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_uint16)"
      },
      {
        "astId": 10534,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "supportedOutboundProof",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_bool))"
      },
      {
        "astId": 10538,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "chainAddressSizeMap",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 10548,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "hashLookup",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))))"
      },
      {
        "astId": 10552,
        "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
        "label": "ulnLookup",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint16,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1690": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroTreasury)17076": {
        "encoding": "inplace",
        "label": "contract ILayerZeroTreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => mapping(bytes32 => mapping(bytes32 => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256)))"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_struct(ApplicationConfiguration)17207_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => struct ILayerZeroUltraLightNodeV2.ApplicationConfiguration))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(ApplicationConfiguration)17207_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes32 => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_address))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_address)"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bool)"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_mapping(t_uint16,t_struct(ApplicationConfiguration)17207_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ILayerZeroUltraLightNodeV2.ApplicationConfiguration)",
        "numberOfBytes": "32",
        "value": "t_struct(ApplicationConfiguration)17207_storage"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ApplicationConfiguration)17207_storage": {
        "encoding": "inplace",
        "label": "struct ILayerZeroUltraLightNodeV2.ApplicationConfiguration",
        "members": [
          {
            "astId": 17196,
            "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
            "label": "inboundProofLibraryVersion",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 17198,
            "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
            "label": "inboundBlockConfirmations",
            "offset": 2,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 17200,
            "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
            "label": "relayer",
            "offset": 10,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17202,
            "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
            "label": "outboundProofType",
            "offset": 30,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 17204,
            "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
            "label": "outboundBlockConfirmations",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 17206,
            "contract": "contracts/UltraLightNodeV2.sol:UltraLightNodeV2",
            "label": "oracle",
            "offset": 8,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}