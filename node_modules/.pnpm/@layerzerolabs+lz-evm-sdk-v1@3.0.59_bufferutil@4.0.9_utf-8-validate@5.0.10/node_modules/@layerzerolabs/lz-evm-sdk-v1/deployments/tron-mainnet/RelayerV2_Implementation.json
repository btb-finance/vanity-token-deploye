{
  "address": "0x52712b6f1C7B26Fa03270c67fB7Ec8a9b064716d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApproveAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "name": "AssignJob",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "capacity",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "rate",
          "type": "uint64"
        }
      ],
      "name": "RateLimiterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "baseGas",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "gasPerByte",
          "type": "uint64"
        }
      ],
      "name": "SetDstConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstPriceRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "name": "SetDstPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceConfigUpdater",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "SetPriceConfigUpdater",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ValueTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AIRDROP_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_userApplication",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payloadSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_capacity",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_rate",
          "type": "uint64"
        }
      ],
      "name": "configRateLimiter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstConfigLookup",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "baseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "gasPerByte",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstFloorMarginsUSD",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstMultipliers",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        }
      ],
      "name": "dstPriceLookup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "dstPriceRatio",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "dstGasPriceInWei",
              "type": "uint128"
            }
          ],
          "internalType": "struct RelayerV2.DstPrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstPriceLookupOld",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "dstPriceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fpBytes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_userApplication",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payloadSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uln",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateBridgeAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateComposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nativeDecimalsRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayerAddress",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limiter",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "capacity",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "tokens",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "rate",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastRefillTime",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mptOverhead",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierBps",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeDecimalsRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stargateBridgeAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateComposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nativeDecimalsRate",
          "type": "uint256"
        }
      ],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceConfigUpdaters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract ILayerZeroPriceFeedV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayerAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approve",
          "type": "bool"
        }
      ],
      "name": "setApprovedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "_dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_baseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_gasPerByte",
          "type": "uint64"
        }
      ],
      "name": "setDstConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMargin",
              "type": "uint128"
            }
          ],
          "internalType": "struct RelayerV2.DstFloorMargin[]",
          "name": "_margins",
          "type": "tuple[]"
        }
      ],
      "name": "setDstFloorMarginsUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "_dstPriceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "name": "setDstPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "multiplier",
              "type": "uint128"
            }
          ],
          "internalType": "struct RelayerV2.DstMultiplier[]",
          "name": "_multipliers",
          "type": "tuple[]"
        }
      ],
      "name": "setDstPriceMultipliers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceConfigUpdater",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allow",
          "type": "bool"
        }
      ],
      "name": "setPriceConfigUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_multiplierBps",
          "type": "uint128"
        }
      ],
      "name": "setPriceMultiplierBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stargateAddress",
          "type": "address"
        }
      ],
      "name": "setStargateAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateBridgeAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateComposer",
      "outputs": [
        {
          "internalType": "contract IStargateComposer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uln",
      "outputs": [
        {
          "internalType": "contract ILayerZeroUltraLightNodeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validateProofBytes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        }
      ],
      "name": "validateTransactionProofV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "validateTransactionProofV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x131e0be2453910c64ed8d094018f94f18abc69a0efee3f543278860c2cf24758",
  "receipt": {
    "to": null,
    "from": "0x9F403140Bc0574D7d36eA472b82DAa1Bbd4eF327",
    "contractAddress": "0x52712b6f1C7B26Fa03270c67fB7Ec8a9b064716d",
    "transactionIndex": 8,
    "gasUsed": "3389996",
    "logsBloom": "0x
    "blockHash": "0x0000000003a742ab729f2b33db469f4b6af1653b8d9672a2bb46fd8be444a391",
    "transactionHash": "0x131e0be2453910c64ed8d094018f94f18abc69a0efee3f543278860c2cf24758",
    "logs": [],
    "blockNumber": 61293227,
    "cumulativeGasUsed": "3518681",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "622b844661474b8045121f0af3f3ddc5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.d1802f25\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"AssignJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"capacity\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"}],\"name\":\"RateLimiterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstNativeAmtCap\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"name\":\"SetDstConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"name\":\"SetDstPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceConfigUpdater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"SetPriceConfigUpdater\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ValueTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_capacity\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_rate\",\"type\":\"uint64\"}],\"name\":\"configRateLimiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstConfigLookup\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dstNativeAmtCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstFloorMarginsUSD\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstMultipliers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"}],\"name\":\"dstPriceLookup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"internalType\":\"struct RelayerV2.DstPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstPriceLookupOld\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fpBytes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uln\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateBridgeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateComposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nativeDecimalsRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limiter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"capacity\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tokens\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastRefillTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mptOverhead\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierBps\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeDecimalsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stargateBridgeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateComposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nativeDecimalsRate\",\"type\":\"uint256\"}],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceConfigUpdaters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract ILayerZeroPriceFeedV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"setApprovedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_dstNativeAmtCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_gasPerByte\",\"type\":\"uint64\"}],\"name\":\"setDstConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMargin\",\"type\":\"uint128\"}],\"internalType\":\"struct RelayerV2.DstFloorMargin[]\",\"name\":\"_margins\",\"type\":\"tuple[]\"}],\"name\":\"setDstFloorMarginsUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_dstGasPriceInWei\",\"type\":\"uint128\"}],\"name\":\"setDstPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct RelayerV2.DstMultiplier[]\",\"name\":\"_multipliers\",\"type\":\"tuple[]\"}],\"name\":\"setDstPriceMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceConfigUpdater\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setPriceConfigUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_multiplierBps\",\"type\":\"uint128\"}],\"name\":\"setPriceMultiplierBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stargateAddress\",\"type\":\"address\"}],\"name\":\"setStargateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateBridgeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateComposer\",\"outputs\":[{\"internalType\":\"contract IStargateComposer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uln\",\"outputs\":[{\"internalType\":\"contract ILayerZeroUltraLightNodeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validateProofBytes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"}],\"name\":\"validateTransactionProofV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"validateTransactionProofV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RelayerV2.sol\":\"RelayerV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xba7ba5b188c0b27489bad1efee8d8b1dcebb502785192b22e3d69824a802983d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/RelayerV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroRelayerV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUltraLightNodeV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroPriceFeedV2.sol\\\";\\nimport \\\"./libs/RateLimiter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function isSending() external view returns (bool);\\n}\\n\\ncontract RelayerV2 is ReentrancyGuard, OwnableUpgradeable, Proxied, ILayerZeroRelayerV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n    using SafeMath for uint128;\\n    using SafeMath for uint64;\\n    using RateLimiter for RateLimiter.Info;\\n\\n    ILayerZeroUltraLightNodeV2 public uln;\\n    address public stargateBridgeAddress;\\n    uint public constant AIRDROP_GAS_LIMIT = 10000;\\n\\n    struct DstPrice {\\n        uint128 dstPriceRatio; // 10^10\\n        uint128 dstGasPriceInWei;\\n    }\\n\\n    struct DstConfig {\\n        uint128 dstNativeAmtCap;\\n        uint64 baseGas;\\n        uint64 gasPerByte;\\n    }\\n\\n    struct DstMultiplier {\\n        uint16 chainId;\\n        uint128 multiplier;\\n    }\\n\\n    struct DstFloorMargin {\\n        uint16 chainId;\\n        uint128 floorMargin;\\n    }\\n\\n    // [_chainId] => DstPriceData. change often\\n    mapping(uint16 => DstPrice) public dstPriceLookupOld;\\n    // [_chainId][_outboundProofType] => DstConfig. change much less often\\n    mapping(uint16 => mapping(uint16 => DstConfig)) public dstConfigLookup;\\n    mapping(address => bool) public approvedAddresses;\\n\\n    event Withdraw(address to, uint amount);\\n    event ApproveAddress(address addr, bool approved);\\n    event SetPriceConfigUpdater(address priceConfigUpdater, bool allow);\\n    event AssignJob(uint totalFee);\\n    event ValueTransferFailed(address indexed to, uint indexed quantity);\\n    event SetDstPrice(uint16 chainId, uint128 dstPriceRatio, uint128 dstGasPriceInWei);\\n    event SetDstConfig(\\n        uint16 chainId,\\n        uint16 outboundProofType,\\n        uint128 dstNativeAmtCap,\\n        uint64 baseGas,\\n        uint64 gasPerByte\\n    );\\n\\n    // new pauseable relayer\\n    bool public paused;\\n\\n    // Update for Price Feed\\n    ILayerZeroPriceFeedV2 public priceFeed;\\n    // multipler for airdrop\\n    uint128 public multiplierBps;\\n\\n    // PriceFeedContract Upgrade\\n    // all encoded param bytes except for proof for validateTransactionProofV1\\n    uint16 public validateProofBytes;\\n    uint16 public fpBytes;\\n    uint16 public mptOverhead;\\n\\n    // [chainId] => [multiplier]\\n    mapping(uint16 => uint128) public dstMultipliers;\\n    // [chainId] => [floor margin in USD]\\n    mapping(uint16 => uint128) public dstFloorMarginsUSD;\\n    mapping(address => bool) public priceConfigUpdaters;\\n\\n    // stargate guard\\n    IStargateComposer public stargateComposer;\\n    address public stargateBridgeAddr;\\n\\n    uint256 public nativeDecimalsRate;\\n\\n    RateLimiter.Info public limiter;\\n\\n    event RateLimiterSet(uint64 capacity, uint64 rate);\\n\\n    // owner is always approved\\n    modifier onlyApproved() {\\n        if (owner() != msg.sender) {\\n            require(isApproved(msg.sender), \\\"Relayer: not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyPriceConfigUpdater() {\\n        if (owner() != msg.sender && !approvedAddresses[msg.sender]) {\\n            require(priceConfigUpdaters[msg.sender], \\\"Relayer: not updater\\\");\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        address _uln,\\n        address _priceFeed,\\n        address _stargateBridgeAddr,\\n        address _stargateComposer,\\n        uint256 _nativeDecimalsRate\\n    ) public proxied initializer {\\n        __Ownable_init();\\n        uln = ILayerZeroUltraLightNodeV2(_uln);\\n        setApprovedAddress(address(this), true);\\n        multiplierBps = 12000;\\n        priceFeed = ILayerZeroPriceFeedV2(_priceFeed);\\n        validateProofBytes = 164;\\n        fpBytes = 160;\\n        mptOverhead = 500;\\n        stargateBridgeAddr = _stargateBridgeAddr;\\n        stargateComposer = IStargateComposer(_stargateComposer);\\n        nativeDecimalsRate = _nativeDecimalsRate;\\n    }\\n\\n    function onUpgrade(\\n        address _stargateBridgeAddr,\\n        address _stargateComposer,\\n        uint256 _nativeDecimalsRate\\n    ) public proxied {\\n        stargateBridgeAddr = _stargateBridgeAddr;\\n        stargateComposer = IStargateComposer(_stargateComposer);\\n        nativeDecimalsRate = _nativeDecimalsRate;\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // onlyApproved\\n\\n    function setDstPrice(uint16 _chainId, uint128 _dstPriceRatio, uint128 _dstGasPriceInWei) external onlyApproved {\\n        // No longer used: Write prices in PriceFeed.\\n    }\\n\\n    function setPriceFeed(address _priceFeed) external onlyApproved {\\n        priceFeed = ILayerZeroPriceFeedV2(_priceFeed);\\n    }\\n\\n    function setPriceMultiplierBps(uint128 _multiplierBps) external onlyApproved {\\n        multiplierBps = _multiplierBps;\\n    }\\n\\n    function setDstPriceMultipliers(DstMultiplier[] calldata _multipliers) external onlyPriceConfigUpdater {\\n        for (uint i = 0; i < _multipliers.length; i++) {\\n            DstMultiplier calldata _data = _multipliers[i];\\n            dstMultipliers[_data.chainId] = _data.multiplier;\\n        }\\n    }\\n\\n    function setDstFloorMarginsUSD(DstFloorMargin[] calldata _margins) external onlyPriceConfigUpdater {\\n        for (uint i = 0; i < _margins.length; i++) {\\n            DstFloorMargin calldata _data = _margins[i];\\n            dstFloorMarginsUSD[_data.chainId] = _data.floorMargin;\\n        }\\n    }\\n\\n    function setDstConfig(\\n        uint16 _chainId,\\n        uint16 _outboundProofType,\\n        uint128 _dstNativeAmtCap,\\n        uint64 _baseGas,\\n        uint64 _gasPerByte\\n    ) external onlyApproved {\\n        dstConfigLookup[_chainId][_outboundProofType] = DstConfig(_dstNativeAmtCap, _baseGas, _gasPerByte);\\n        emit SetDstConfig(_chainId, _outboundProofType, _dstNativeAmtCap, _baseGas, _gasPerByte);\\n    }\\n\\n    function setStargateAddress(address _stargateAddress) external onlyApproved {\\n        stargateBridgeAddress = _stargateAddress;\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // onlyOwner\\n    function configRateLimiter(uint64 _capacity, uint64 _rate) external onlyOwner {\\n        limiter.setCapacity(_capacity);\\n        limiter.setRate(_rate);\\n        emit RateLimiterSet(_capacity, _rate);\\n    }\\n\\n    function setApprovedAddress(address _relayerAddress, bool _approve) public onlyOwner {\\n        approvedAddresses[_relayerAddress] = _approve;\\n        emit ApproveAddress(_relayerAddress, _approve);\\n    }\\n\\n    function setPriceConfigUpdater(address _priceConfigUpdater, bool _allow) public onlyOwner {\\n        priceConfigUpdaters[_priceConfigUpdater] = _allow;\\n        emit SetPriceConfigUpdater(_priceConfigUpdater, _allow);\\n    }\\n\\n    function setPause(bool _paused) public onlyOwner {\\n        paused = _paused;\\n    }\\n\\n    // txType 1\\n    // bytes  [2       32      ]\\n    // fields [txType  extraGas]\\n    // txType 2\\n    // bytes  [2       32        32            bytes[]         ]\\n    // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\\n    // User App Address is not used in this version\\n    function _getPrices(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address,\\n        uint _payloadSize,\\n        bytes memory _adapterParameters\\n    ) internal view returns (uint) {\\n        require(!paused, \\\"Admin: paused\\\");\\n        // decoding the _adapterParameters - reverts if type 2 and there is no dstNativeAddress\\n        require(\\n            _adapterParameters.length == 34 || _adapterParameters.length > 66,\\n            \\\"Relayer: wrong _adapterParameters size\\\"\\n        );\\n        uint16 txType;\\n        uint extraGas;\\n        assembly {\\n            txType := mload(add(_adapterParameters, 2))\\n            extraGas := mload(add(_adapterParameters, 34))\\n        }\\n        require(extraGas > 0, \\\"Relayer: gas too low\\\");\\n        require(txType == 1 || txType == 2, \\\"Relayer: unsupported txType\\\");\\n\\n        DstConfig storage dstConfig = dstConfigLookup[_dstChainId][_outboundProofType];\\n\\n        // validateTransactionProof bytes = fixedBytes + proofBytes\\n        // V2 has an extra 32 bytes for payable address\\n        uint totalFixedBytes = txType == 2 ? uint(validateProofBytes).add(32) : validateProofBytes;\\n        uint proofBytes = _outboundProofType == 2 ? _payloadSize.add(fpBytes) : _payloadSize.add(mptOverhead);\\n\\n        uint16 dstChainId = _dstChainId; // stack too deep\\n        (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD) = priceFeed\\n            .estimateFeeByEid(dstChainId, totalFixedBytes.add(proofBytes), dstConfig.baseGas.add(extraGas));\\n\\n        uint dstNativeAmt = 0;\\n        if (txType == 2) {\\n            assembly {\\n                dstNativeAmt := mload(add(_adapterParameters, 66))\\n            }\\n            require(dstConfig.dstNativeAmtCap >= dstNativeAmt, \\\"Relayer: dstNativeAmt too large\\\");\\n        }\\n        uint airdropAmount = 0;\\n        if (dstNativeAmt > 0) {\\n            // gas saver if no airdrop\\n            airdropAmount = dstNativeAmt.mul(priceRatio).div(priceRatioDenominator).mul(multiplierBps).div(10000); // cheaper than priceFeed.getPriceRatioDenominator()\\n        }\\n        return _getDstTxCost(dstChainId, fee, nativePriceUSD).add(airdropAmount);\\n    }\\n\\n    function _getDstTxCost(uint16 _dstChainId, uint _fee, uint128 nativeTokenPriceUSD) private view returns (uint) {\\n        uint128 _dstMultiplier = dstMultipliers[_dstChainId];\\n        if (_dstMultiplier == 0) {\\n            _dstMultiplier = multiplierBps;\\n        }\\n        uint dstTxCostWithMultiplier = _fee.mul(_dstMultiplier).div(10000);\\n\\n        if (nativeTokenPriceUSD == 0) {\\n            return dstTxCostWithMultiplier;\\n        }\\n\\n        uint dstTxCostWithMargin = _fee.add(\\n            dstFloorMarginsUSD[_dstChainId].mul(nativeDecimalsRate).div(nativeTokenPriceUSD)\\n        );\\n\\n        return dstTxCostWithMargin > dstTxCostWithMultiplier ? dstTxCostWithMargin : dstTxCostWithMultiplier;\\n    }\\n\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external view override returns (uint) {\\n        require(_payloadSize <= 10000, \\\"Relayer: _payloadSize tooooo big\\\");\\n        return _getPrices(_dstChainId, _outboundProofType, _userApplication, _payloadSize, _adapterParams);\\n    }\\n\\n    // view function to convert pricefeed price to current price (for backwards compatibility)\\n    function dstPriceLookup(uint16 _dstChainId) public view returns (DstPrice memory) {\\n        ILayerZeroPriceFeedV2.Price memory price = priceFeed.getPrice(_dstChainId);\\n        return DstPrice(price.priceRatio, price.gasPriceInUnit);\\n    }\\n\\n    function isApproved(address _relayerAddress) public view returns (bool) {\\n        return approvedAddresses[_relayerAddress];\\n    }\\n\\n    function assignJob(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external override returns (uint fee) {\\n        if (_dstChainId >= 10000 && limiter.capacity > 0) {\\n            // sandbox or testnet\\n            limiter.tryConsume(10000);\\n        }\\n\\n        require(msg.sender == address(uln), \\\"Relayer: invalid uln\\\");\\n        require(_payloadSize <= 10000, \\\"Relayer: _payloadSize > 10000\\\");\\n\\n        if (_userApplication == stargateBridgeAddr) {\\n            // following way also prevents user from inputting to address greater than 32 bytes\\n            bool validPayload = (_payloadSize == 544 || // swap with no payload\\n                _payloadSize == 320 || // redeem local callback\\n                _payloadSize == 288 || // redeem local\\n                _payloadSize == 160); // send credits\\n\\n            if (!validPayload) {\\n                require(stargateComposer.isSending(), \\\"Relayer: stargate composer is not sending\\\");\\n            }\\n        }\\n\\n        fee = _getPrices(_dstChainId, _outboundProofType, _userApplication, _payloadSize, _adapterParams);\\n        emit AssignJob(fee);\\n    }\\n\\n    function withdrawFee(address payable _to, uint _amount) external override onlyApproved {\\n        uint totalFee = uln.accruedNativeFee(address(this));\\n        require(_amount <= totalFee, \\\"Relayer: not enough fee for withdrawal\\\");\\n        uln.withdrawNative(_to, _amount);\\n    }\\n\\n    function withdrawToken(address _token, address _to, uint _amount) external onlyApproved {\\n        if (_token == address(0)) {\\n            uint total = address(this).balance;\\n            require(_amount <= total, \\\"Relayer: not enough native fee for withdrawal\\\");\\n            (bool sent, ) = payable(_to).call{ value: _amount }(\\\"\\\");\\n            require(sent, \\\"Relayer: failed to send ether\\\");\\n        } else {\\n            uint total = IERC20(_token).balanceOf(address(this));\\n            require(_amount <= total, \\\"Relayer: not enough fee for withdrawal\\\");\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function validateTransactionProofV2(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _blockHash,\\n        bytes32 _data,\\n        bytes calldata _transactionProof,\\n        address payable _to\\n    ) external payable onlyApproved nonReentrant {\\n        (bool sent, ) = _to.call{ gas: AIRDROP_GAS_LIMIT, value: msg.value }(\\\"\\\");\\n        //require(sent, \\\"Relayer: failed to send ether\\\");\\n        if (!sent) {\\n            emit ValueTransferFailed(_to, msg.value);\\n        }\\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _data, _transactionProof);\\n    }\\n\\n    function validateTransactionProofV1(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _blockHash,\\n        bytes32 _data,\\n        bytes calldata _transactionProof\\n    ) external onlyApproved nonReentrant {\\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _data, _transactionProof);\\n    }\\n}\\n\",\"keccak256\":\"0x7f3504c54319d6eaaaf8589bd350172a566e7e7cefc6eb9a0252b31adb380dce\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroPriceFeedV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\n// copy of \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroPriceFeed.sol\\\"\\ninterface ILayerZeroPriceFeedV2 {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 20, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^20 = 10 ^ 30.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint32 eid;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint32 eid;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    function getPrice(uint32 _dstEid) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n\\n    function estimateFeeByEid(\\n        uint32 _dstEid,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external view returns (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n}\\n\",\"keccak256\":\"0xfbe8d15c8baebbdbfa172294bc402bc9955a765d545200e4179944b0bb02497f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroRelayerV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroRelayerV2 {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external returns (uint price);\\n\\n    // @notice query the relayer price for relaying the payload and its proof to the destination chain\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint price);\\n\\n    // @notice withdraw the accrued fee in ultra light node\\n    // @param _to - the fee receiver\\n    // @param _amount - the withdrawal amount\\n    function withdrawFee(address payable _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0x107681e3ab53b6b34780fe6c540e4ad2d149f94fdfe3e7b16e1101dc92ae914e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroUltraLightNodeV2 {\\n    // Relayer functions\\n    function validateTransactionProof(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _lookupHash,\\n        bytes32 _blockData,\\n        bytes calldata _transactionProof\\n    ) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function getAppConfig(\\n        uint16 _remoteChainId,\\n        address _userApplicationAddress\\n    ) external view returns (ApplicationConfiguration memory);\\n\\n    function accruedNativeFee(address _address) external view returns (uint);\\n\\n    struct ApplicationConfiguration {\\n        uint16 inboundProofLibraryVersion;\\n        uint64 inboundBlockConfirmations;\\n        address relayer;\\n        uint16 outboundProofType;\\n        uint64 outboundBlockConfirmations;\\n        address oracle;\\n    }\\n\\n    event HashReceived(\\n        uint16 indexed srcChainId,\\n        address indexed oracle,\\n        bytes32 lookupHash,\\n        bytes32 blockData,\\n        uint confirmations\\n    );\\n    event RelayerParams(bytes adapterParams, uint16 outboundProofType);\\n    event Packet(bytes payload);\\n    event InvalidDst(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event PacketReceived(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);\\n    event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);\\n    event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);\\n    event SetChainAddressSize(uint16 indexed chainId, uint size);\\n    event SetDefaultConfigForChainId(\\n        uint16 indexed chainId,\\n        uint16 inboundProofLib,\\n        uint64 inboundBlockConfirm,\\n        address relayer,\\n        uint16 outboundProofType,\\n        uint64 outboundBlockConfirm,\\n        address oracle\\n    );\\n    event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);\\n    event SetLayerZeroToken(address indexed tokenAddress);\\n    event SetRemoteUln(uint16 indexed chainId, bytes32 uln);\\n    event SetTreasury(address indexed treasuryAddress);\\n    event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);\\n    event WithdrawNative(address indexed msgSender, address indexed to, uint amount);\\n}\\n\",\"keccak256\":\"0xf1f36bbbc40d03b96affa151affb47da75a1b69dc79f4b311841a072d12fdd22\",\"license\":\"BUSL-1.1\"},\"contracts/libs/RateLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity ^0.7.6;\\n\\nlibrary RateLimiter {\\n    struct Info {\\n        // capacity of the token bucket. This is the maximum number of tokens that the bucket can hold at any given time\\n        uint64 capacity;\\n        // current number of tokens in the bucket\\n        uint64 tokens;\\n        // number of tokens refilled per second\\n        uint64 rate;\\n        // timestamp of last refill\\n        uint64 lastRefillTime;\\n    }\\n\\n    function setCapacity(Info storage _self, uint64 _capacity) internal {\\n        _self.capacity = _capacity;\\n        _self.tokens = _capacity;\\n        _self.lastRefillTime = uint64(block.timestamp);\\n    }\\n\\n    function setRate(Info storage _self, uint64 _rate) internal {\\n        refill(_self, 0);\\n        _self.rate = _rate;\\n    }\\n\\n    function tryConsume(Info storage _self, uint64 _amount) internal returns (uint64) {\\n        refill(_self, 0);\\n\\n        uint64 tokens = _self.tokens;\\n        require(tokens >= _amount, \\\"RelayerV2: out of counters - try again later!\\\");\\n\\n        uint64 newTokens = tokens - _amount;\\n        _self.tokens = newTokens;\\n        return newTokens;\\n    }\\n\\n    function refill(Info storage _self, uint64 _extraTokens) internal {\\n        uint newTokens = _extraTokens;\\n\\n        uint64 currentTime = uint64(block.timestamp);\\n        if (currentTime > _self.lastRefillTime) {\\n            uint timeElapsedInSeconds = currentTime - _self.lastRefillTime;\\n            newTokens += timeElapsedInSeconds * _self.rate;\\n        }\\n\\n        if (newTokens > 0) {\\n            newTokens += _self.tokens;\\n            _self.tokens = newTokens > _self.capacity ? _self.capacity : uint64(newTokens);\\n        }\\n\\n        _self.lastRefillTime = currentTime;\\n    }\\n}\\n\",\"keccak256\":\"0x35e64a7fa5dac6a8fb79ce93ff15065a76eecb5ee03bfa69bc0311e817a9b3e4\",\"license\":\"BUSL-1.1\"},\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x760a00cd889372a2358732403723d8a13cb8b02bb82450a9bf5488177828aa79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50d380156200001f57600080fd5b50d280156200002d57600080fd5b5060016000556141bf80620000436000396000f3fe6080604052600436106102dc5760003560e01c8063741bef1a11610184578063b8f8bad4116100d6578063d5f8b0141161008a578063f2fde38b11610064578063f2fde38b14610bab578063f7013ef614610be5578063fd9be52214610c1f576102dc565b8063d5f8b01414610afd578063efbf196a14610b37578063f136a87414610b71576102dc565b8063bf4dab51116100bb578063bf4dab5114610a4f578063c03f152914610a89578063c3b04e7f14610ac3576102dc565b8063b8f8bad4146109db578063bedb86fb14610a15576102dc565b80638576db671161013857806398dabd501161011257806398dabd501461094e5780639e8c71781461097d578063ac353e04146109ac576102dc565b80638576db671461089d5780638644c578146108d75780638da5cb5b1461091f576102dc565b8063765a8a5411610169578063765a8a54146107ed578063801db1fe1461083457806381ba209a1461086e576102dc565b8063741bef1a1461077f57806374b87f67146107ae576102dc565b806355b352491161023d5780636348d269116101f15780636c473aff116101cb5780636c473aff146106e7578063715018a614610716578063724e78da14610745576102dc565b80636348d26914610642578063673448dd1461067157806369cf4e3a146106ab576102dc565b80635886ea65116102225780635886ea65146105925780635bfc2b86146105cc5780635c975abb14610606576102dc565b806355b352491461051e578063575765e214610558576102dc565b80633352b608116102945780633f103487116102795780633f1034871461046157806343b9a0c41461049b5780634eeba250146104d7576102dc565b80633352b608146103f65780633bfb404714610432576102dc565b80630508941e116102c55780630508941e1461035757806323161ff81461036a578063252f7b01146103bc576102dc565b806301e33667146102e157806303343f541461031d575b600080fd5b3480156102ed57600080fd5b50d380156102fa57600080fd5b50d2801561030757600080fd5b5061031b61031636600461357c565b610c59565b005b34801561032957600080fd5b50d3801561033657600080fd5b50d2801561034357600080fd5b5061031b6103523660046134a1565b610e25565b61031b6103653660046137b6565b610e9b565b34801561037657600080fd5b50d3801561038357600080fd5b50d2801561039057600080fd5b506103a461039f3660046138a3565b61106d565b6040516103b393929190613ebc565b60405180910390f35b3480156103c857600080fd5b50d380156103d557600080fd5b50d280156103e257600080fd5b5061031b6103f136600461372b565b6110db565b34801561040257600080fd5b50d3801561040f57600080fd5b50d2801561041c57600080fd5b50610425611209565b6040516103b39190613a65565b34801561043e57600080fd5b50d3801561044b57600080fd5b50d2801561045857600080fd5b50610425611218565b34801561046d57600080fd5b50d3801561047a57600080fd5b50d2801561048757600080fd5b5061031b61049636600461395d565b611227565b3480156104a757600080fd5b50d380156104b457600080fd5b50d280156104c157600080fd5b506104ca6113b2565b6040516103b39190613fe2565b3480156104e357600080fd5b50d380156104f057600080fd5b50d280156104fd57600080fd5b5061051161050c366004613711565b6113b8565b6040516103b39190613e7c565b34801561052a57600080fd5b50d3801561053757600080fd5b50d2801561054457600080fd5b50610511610553366004613711565b6113dc565b34801561056457600080fd5b50d3801561057157600080fd5b50d2801561057e57600080fd5b5061031b61058d3660046135c9565b611400565b34801561059e57600080fd5b50d380156105ab57600080fd5b50d280156105b857600080fd5b506104ca6105c73660046138d5565b6114d6565b3480156105d857600080fd5b50d380156105e557600080fd5b50d280156105f257600080fd5b5061031b610601366004613a35565b6116ca565b34801561061257600080fd5b50d3801561061f57600080fd5b50d2801561062c57600080fd5b50610635611785565b6040516103b39190613aad565b34801561064e57600080fd5b50d3801561065b57600080fd5b50d2801561066857600080fd5b5061042561178e565b34801561067d57600080fd5b50d3801561068a57600080fd5b50d2801561069757600080fd5b506106356106a63660046134a1565b61179d565b3480156106b757600080fd5b50d380156106c457600080fd5b50d280156106d157600080fd5b506106da6117bf565b6040516103b39190613ef0565b3480156106f357600080fd5b50d3801561070057600080fd5b50d2801561070d57600080fd5b506104256117df565b34801561072257600080fd5b50d3801561072f57600080fd5b50d2801561073c57600080fd5b5061031b6117ee565b34801561075157600080fd5b50d3801561075e57600080fd5b50d2801561076b57600080fd5b5061031b61077a3660046134a1565b6118c4565b34801561078b57600080fd5b50d3801561079857600080fd5b50d280156107a557600080fd5b5061042561193f565b3480156107ba57600080fd5b50d380156107c757600080fd5b50d280156107d457600080fd5b506107dd611953565b6040516103b39493929190614006565b3480156107f957600080fd5b50d3801561080657600080fd5b50d2801561081357600080fd5b50610827610822366004613711565b6119a9565b6040516103b39190613e50565b34801561084057600080fd5b50d3801561084d57600080fd5b50d2801561085a57600080fd5b5061031b6108693660046135c9565b611a8e565b34801561087a57600080fd5b50d3801561088757600080fd5b50d2801561089457600080fd5b506106da611b58565b3480156108a957600080fd5b50d380156108b657600080fd5b50d280156108c357600080fd5b506106356108d23660046134a1565b611b7a565b3480156108e357600080fd5b50d380156108f057600080fd5b50d280156108fd57600080fd5b5061091161090c366004613711565b611b8f565b6040516103b3929190613e99565b34801561092b57600080fd5b50d3801561093857600080fd5b50d2801561094557600080fd5b50610425611bcb565b34801561095a57600080fd5b50d3801561096757600080fd5b50d2801561097457600080fd5b506106da611bda565b34801561098957600080fd5b50d3801561099657600080fd5b50d280156109a357600080fd5b506104ca611bf8565b3480156109b857600080fd5b50d380156109c557600080fd5b50d280156109d257600080fd5b50610511611bfe565b3480156109e757600080fd5b50d380156109f457600080fd5b50d28015610a0157600080fd5b5061031b610a1036600461385b565b611c16565b348015610a2157600080fd5b50d38015610a2e57600080fd5b50d28015610a3b57600080fd5b5061031b610a4a36600461364a565b611c52565b348015610a5b57600080fd5b50d38015610a6857600080fd5b50d28015610a7557600080fd5b5061031b610a8436600461360a565b611cd9565b348015610a9557600080fd5b50d38015610aa257600080fd5b50d28015610aaf57600080fd5b506104ca610abe3660046138d5565b611ddd565b348015610acf57600080fd5b50d38015610adc57600080fd5b50d28015610ae957600080fd5b5061031b610af83660046136f5565b611e4f565b348015610b0957600080fd5b50d38015610b1657600080fd5b50d28015610b2357600080fd5b5061031b610b3236600461360a565b611ece565b348015610b4357600080fd5b50d38015610b5057600080fd5b50d28015610b5d57600080fd5b5061031b610b6c36600461357c565b611fd2565b348015610b7d57600080fd5b50d38015610b8a57600080fd5b50d28015610b9757600080fd5b50610635610ba63660046134a1565b61207e565b348015610bb757600080fd5b50d38015610bc457600080fd5b50d28015610bd157600080fd5b5061031b610be03660046134a1565b612093565b348015610bf157600080fd5b50d38015610bfe57600080fd5b50d28015610c0b57600080fd5b5061031b610c1a366004613501565b6121c0565b348015610c2b57600080fd5b50d38015610c3857600080fd5b50d28015610c4557600080fd5b5061031b610c543660046134cd565b612466565b33610c62611bcb565b6001600160a01b031614610c9e57610c793361179d565b610c9e5760405162461bcd60e51b8152600401610c9590613ab8565b60405180910390fd5b6001600160a01b038316610d50574780821115610ccd5760405162461bcd60e51b8152600401610c9590613bef565b6000836001600160a01b031683604051610ce690613a62565b60006040518083038185875af1925050503d8060008114610d23576040519150601f19603f3d011682016040523d82523d6000602084013e610d28565b606091505b5050905080610d495760405162461bcd60e51b8152600401610c9590613b81565b5050610e20565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038516906370a0823190610d98903090600401613a65565b60206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de891906139c9565b905080821115610e0a5760405162461bcd60e51b8152600401610c9590613c83565b610e1e6001600160a01b03851684846125d7565b505b505050565b33610e2e611bcb565b6001600160a01b031614610e6157610e453361179d565b610e615760405162461bcd60e51b8152600401610c9590613ab8565b606780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b33610ea4611bcb565b6001600160a01b031614610ed757610ebb3361179d565b610ed75760405162461bcd60e51b8152600401610c9590613ab8565b60026000541415610f2f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000819055506000816001600160a01b031661271034604051610f5390613a62565b600060405180830381858888f193505050503d8060008114610f91576040519150601f19603f3d011682016040523d82523d6000602084013e610f96565b606091505b5050905080610fd65760405134906001600160a01b038416907f2c7a964ca3de5ec1d42d9822f9bbd0eb142a59cc9f855e9d93813b773192c7a390600090a35b6066546040517f987fa2d50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063987fa2d59061102b908c908c908c908c908c908c908c90600401613eff565b600060405180830381600087803b15801561104557600080fd5b505af1158015611059573d6000803e3d6000fd5b505060016000555050505050505050505050565b60696020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b336110e4611bcb565b6001600160a01b031614611117576110fb3361179d565b6111175760405162461bcd60e51b8152600401610c9590613ab8565b6002600054141561116f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556066546040517f987fa2d50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063987fa2d5906111c9908a908a908a908a908a908a908a90600401613eff565b600060405180830381600087803b1580156111e357600080fd5b505af11580156111f7573d6000803e3d6000fd5b50506001600055505050505050505050565b6070546001600160a01b031681565b6071546001600160a01b031681565b33611230611bcb565b6001600160a01b031614611263576112473361179d565b6112635760405162461bcd60e51b8152600401610c9590613ab8565b604080516060810182526fffffffffffffffffffffffffffffffff858116825267ffffffffffffffff858116602080850191825286831685870190815261ffff8c8116600090815260698452888120918d16815292529086902094518554925191517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169416939093177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000938316939093029290921777ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009290911691909102179055517fd053e021dda81c7c2794ff89e320caea5379962d49ed383a3bd0a54ffc4b932f906113a39087908790879087908790613f7c565b60405180910390a15050505050565b61271081565b606d602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b606e602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b611408612657565b6001600160a01b0316611419611bcb565b6001600160a01b031614611474576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166000908152606a602052604090819020805460ff1916831515179055517fb10786d0bfa68fb1aa29552d9203e5f545f7c073ff0784da1de1d800986f1023906114ca9084908490613a92565b60405180910390a15050565b60006127108761ffff16101580156114f9575060735467ffffffffffffffff1615155b1561150d5761150b607361271061265b565b505b6066546001600160a01b031633146115375760405162461bcd60e51b8152600401610c9590613ce0565b6127108411156115595760405162461bcd60e51b8152600401610c9590613dab565b6071546001600160a01b0386811691161415611644576000846102201480611582575084610140145b8061158e575084610120145b8061159957508460a0145b90508061164257607060009054906101000a90046001600160a01b03166001600160a01b0316634b60b4256040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190613666565b6116425760405162461bcd60e51b8152600401610c9590613d17565b505b6116878787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061271092505050565b90507fdf21c415b78ed2552cc9971249e32a053abce6087a0ae0fbf3f78db5174a3493816040516116b89190613fe2565b60405180910390a19695505050505050565b6116d2612657565b6001600160a01b03166116e3611bcb565b6001600160a01b03161461173e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b611749607383612a26565b611754607382612acc565b7f232812b1ffb7905e9272c3055c55d9cb3f9ec7344c7e2aebbe28da9152e64a4b82826040516114ca929190613feb565b606b5460ff1681565b6067546001600160a01b031681565b6001600160a01b0381166000908152606a602052604090205460ff165b919050565b606c547201000000000000000000000000000000000000900461ffff1681565b6066546001600160a01b031681565b6117f6612657565b6001600160a01b0316611807611bcb565b6001600160a01b031614611862576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6034546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b336118cd611bcb565b6001600160a01b031614611900576118e43361179d565b6119005760405162461bcd60e51b8152600401610c9590613ab8565b606b80546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b606b5461010090046001600160a01b031681565b60735467ffffffffffffffff808216916801000000000000000081048216917001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041684565b6119b16133ee565b606b546040517fda26663a00000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b03169063da26663a90611a00908690600401613ef0565b60606040518083038186803b158015611a1857600080fd5b505afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a509190613682565b6040805180820190915281516fffffffffffffffffffffffffffffffff16815260209182015167ffffffffffffffff16918101919091529392505050565b611a96612657565b6001600160a01b0316611aa7611bcb565b6001600160a01b031614611b02576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166000908152606f602052604090819020805460ff1916831515179055517fde6b048d6c4e63d85fde37ccbe03f4380c6d12cb2a1e9ce9268bbf47a1ef6878906114ca9084908490613a92565b606c5474010000000000000000000000000000000000000000900461ffff1681565b606f6020526000908152604090205460ff1681565b6068602052600090815260409020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b6034546001600160a01b031690565b606c54700100000000000000000000000000000000900461ffff1681565b60725481565b606c546fffffffffffffffffffffffffffffffff1681565b33611c1f611bcb565b6001600160a01b031614610e2057611c363361179d565b610e205760405162461bcd60e51b8152600401610c9590613ab8565b611c5a612657565b6001600160a01b0316611c6b611bcb565b6001600160a01b031614611cc6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606b805460ff1916911515919091179055565b33611ce2611bcb565b6001600160a01b031614158015611d095750336000908152606a602052604090205460ff16155b15611d3d57336000908152606f602052604090205460ff16611d3d5760405162461bcd60e51b8152600401610c9590613c4c565b60005b81811015610e205736838383818110611d5557fe5b9050604002019050806020016020810190611d7091906136f5565b606d6000611d816020850185613711565b61ffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905550600101611d40565b6000612710841115611e015760405162461bcd60e51b8152600401610c9590613aef565b611e448787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061271092505050565b979650505050505050565b33611e58611bcb565b6001600160a01b031614611e8b57611e6f3361179d565b611e8b5760405162461bcd60e51b8152600401610c9590613ab8565b606c80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b33611ed7611bcb565b6001600160a01b031614158015611efe5750336000908152606a602052604090205460ff16155b15611f3257336000908152606f602052604090205460ff16611f325760405162461bcd60e51b8152600401610c9590613c4c565b60005b81811015610e205736838383818110611f4a57fe5b9050604002019050806020016020810190611f6591906136f5565b606e6000611f766020850185613711565b61ffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905550600101611f35565b6000611fdc612b21565b90506001600160a01b03811661201b576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355612030565b336001600160a01b0382161461203057600080fd5b50607180546001600160a01b039485167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556070805493909416921691909117909155607255565b606a6020526000908152604090205460ff1681565b61209b612657565b6001600160a01b03166120ac611bcb565b6001600160a01b031614612107576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661214c5760405162461bcd60e51b81526004018080602001828103825260268152602001806140986026913960400191505060405180910390fd5b6034546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60006121ca612b21565b90506001600160a01b038116612209576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035561221e565b336001600160a01b0382161461221e57600080fd5b600154610100900460ff16806122375750612237612b46565b80612245575060015460ff16155b6122805760405162461bcd60e51b815260040180806020018281038252602e8152602001806140e4602e913960400191505060405180910390fd5b600154610100900460ff161580156122aa576001805460ff1961ff00199091166101001716811790555b6122b2612b57565b606680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0389161790556122f0306001611400565b606c8054606b80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038b81169190910291909117909155612ee07fffffffffffffffffffffffffffffffff00000000000000000000000000000000909216919091177fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff1670a400000000000000000000000000000000177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff1672a0000000000000000000000000000000000000177fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501f4000000000000000000000000000000000000000017909155607180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811688841617909155607080549091169186169190911790556072839055801561245d576001805461ff00191690555b50505050505050565b3361246f611bcb565b6001600160a01b0316146124a2576124863361179d565b6124a25760405162461bcd60e51b8152600401610c9590613ab8565b6066546040517f69412bfa0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906369412bfa906124ec903090600401613a65565b60206040518083038186803b15801561250457600080fd5b505afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c91906139c9565b90508082111561255e5760405162461bcd60e51b8152600401610c9590613c83565b6066546040517f07b18bde0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906307b18bde906125a99086908690600401613a79565b600060405180830381600087803b1580156125c357600080fd5b505af115801561245d573d6000803e3d6000fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e20908490612c08565b3390565b6000612668836000612cb9565b825467ffffffffffffffff6801000000000000000090910481169083168110156126c35760405162461bcd60e51b815260040180806020018281038252602d815260200180614133602d913960400191505060405180910390fd5b835467ffffffffffffffff9184900391821668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff90911617845590505b92915050565b606b5460009060ff16156127365760405162461bcd60e51b8152600401610c9590613d74565b815160221480612747575060428251115b6127635760405162461bcd60e51b8152600401610c9590613b24565b600282015160228301518061278a5760405162461bcd60e51b8152600401610c9590613de2565b8161ffff16600114806127a157508161ffff166002145b6127bd5760405162461bcd60e51b8152600401610c9590613bb8565b61ffff88811660009081526069602090815260408083208b85168452909152812091841660021461280857606c54700100000000000000000000000000000000900461ffff1661282e565b606c5461282e90700100000000000000000000000000000000900461ffff166020612e0a565b905060008961ffff1660021461286d57606c5461286890899074010000000000000000000000000000000000000000900461ffff16612e0a565b612895565b606c546128959089907201000000000000000000000000000000000000900461ffff16612e0a565b606b549091508b9060009081908190819061010090046001600160a01b03166388a4124c866128c48a8a612e0a565b8b546128ee90700100000000000000000000000000000000900467ffffffffffffffff168e612e0a565b6040518463ffffffff1660e01b815260040161290c93929190613fc6565b60806040518083038186803b15801561292457600080fd5b505afa158015612938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295c91906139e1565b935093509350935060008a61ffff16600214156129ac575060428c015188546fffffffffffffffffffffffffffffffff168111156129ac5760405162461bcd60e51b8152600401610c9590613e19565b600081156129fa57606c546129f790612710906129eb906fffffffffffffffffffffffffffffffff908116906129f19089811690849089908d16612e6b565b90612ec4565b90612e6b565b90505b612a0f81612a09898987612f2b565b90612e0a565b9c5050505050505050505050505095945050505050565b81547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9182169081177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000919091021777ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000429290921691909102179055565b612ad7826000612cb9565b815467ffffffffffffffff909116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff909116179055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6000612b5130613015565b15905090565b600154610100900460ff1680612b705750612b70612b46565b80612b7e575060015460ff16155b612bb95760405162461bcd60e51b815260040180806020018281038252602e8152602001806140e4602e913960400191505060405180910390fd5b600154610100900460ff16158015612be3576001805460ff1961ff00199091166101001716811790555b612beb61301b565b612bf36130ba565b8015612c05576001805461ff00191690555b50565b6000612c5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131ca9092919063ffffffff16565b805190915015610e2057808060200190516020811015612c7c57600080fd5b5051610e205760405162461bcd60e51b815260040180806020018281038252602a815260200180614160602a913960400191505060405180910390fd5b815467ffffffffffffffff808316914291780100000000000000000000000000000000000000000000000090910481169082161115612d3d578354700100000000000000000000000000000000810467ffffffffffffffff908116780100000000000000000000000000000000000000000000000090920481168303160291909101905b8115612dbd57835467ffffffffffffffff68010000000000000000820481169390930192168211612d6e5781612d7b565b835467ffffffffffffffff165b845467ffffffffffffffff9190911668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff9091161784555b835467ffffffffffffffff90911678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff909116179092555050565b600082820183811015612e64576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082612e7a5750600061270a565b82820282848281612e8757fe5b0414612e645760405162461bcd60e51b81526004018080602001828103825260218152602001806141126021913960400191505060405180910390fd5b6000808211612f1a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612f2357fe5b049392505050565b61ffff83166000908152606d60205260408120546fffffffffffffffffffffffffffffffff1680612f6d5750606c546fffffffffffffffffffffffffffffffff165b6000612f916127106129eb876fffffffffffffffffffffffffffffffff8616612e6b565b90506fffffffffffffffffffffffffffffffff8416612fb3579150612e649050565b60725461ffff87166000908152606e60205260408120549091612ffc91612ff5916fffffffffffffffffffffffffffffffff808a16926129eb92911690612e6b565b8790612e0a565b905081811161300b5781611e44565b9695505050505050565b3b151590565b600154610100900460ff16806130345750613034612b46565b80613042575060015460ff16155b61307d5760405162461bcd60e51b815260040180806020018281038252602e8152602001806140e4602e913960400191505060405180910390fd5b600154610100900460ff16158015612bf3576001805460ff1961ff00199091166101001716811790558015612c05576001805461ff001916905550565b600154610100900460ff16806130d357506130d3612b46565b806130e1575060015460ff16155b61311c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806140e4602e913960400191505060405180910390fd5b600154610100900460ff16158015613146576001805460ff1961ff00199091166101001716811790555b6000613150612657565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612c05576001805461ff001916905550565b60606131d984846000856131e1565b949350505050565b6060824710156132225760405162461bcd60e51b81526004018080602001828103825260268152602001806140be6026913960400191505060405180910390fd5b61322b85613015565b61327c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106132d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161329b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461333a576040519150601f19603f3d011682016040523d82523d6000602084013e61333f565b606091505b5091509150611e4482828660608315613359575081612e64565b8251156133695782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156133b357818101518382015260200161339b565b50505050905090810190601f1680156133e05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604080518082019091526000808252602082015290565b60008083601f840112613416578182fd5b50813567ffffffffffffffff81111561342d578182fd5b60208301915083602060408302850101111561344857600080fd5b9250929050565b60008083601f840112613460578182fd5b50813567ffffffffffffffff811115613477578182fd5b60208301915083602082850101111561344857600080fd5b803561ffff811681146117ba57600080fd5b6000602082840312156134b2578081fd5b81356134bd81614032565b6001600160a01b03169392505050565b600080604083850312156134df578081fd5b82356134ea81614032565b6001600160a01b0316946020939093013593505050565b600080600080600060a08688031215613518578081fd5b853561352381614032565b6001600160a01b03908116955060208701359061353f82614032565b908116945060408701359061355382614032565b908116935060608701359061356782614032565b95989497509295929094169350506080013590565b600080600060608486031215613590578283fd5b833561359b81614032565b6001600160a01b0390811693506020850135906135b782614032565b93969316945050506040919091013590565b600080604083850312156135db578182fd5b82356135e681614032565b6001600160a01b0316915060208301356135ff81614055565b809150509250929050565b6000806020838503121561361c578182fd5b823567ffffffffffffffff811115613632578283fd5b61363e85828601613405565b90969095509350505050565b60006020828403121561365b578081fd5b8135612e6481614055565b600060208284031215613677578081fd5b8151612e6481614055565b600060608284031215613693578081fd5b6040516060810181811067ffffffffffffffff821117156136b057fe5b60405282516136be81614063565b815260208301516136ce81614081565b6020820152604083015163ffffffff811681146136e9578283fd5b60408201529392505050565b600060208284031215613706578081fd5b8135612e6481614063565b600060208284031215613722578081fd5b612e648261348f565b600080600080600080600060c0888a031215613745578485fd5b61374e8861348f565b9650602088013561375e81614032565b6001600160a01b0316955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115613797578283fd5b6137a38a828b0161344f565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156137d1578182fd5b6137da8961348f565b975060208901356137ea81614032565b6001600160a01b03908116975060408a0135965060608a0135955060808a0135945060a08a01359067ffffffffffffffff821115613826578384fd5b6138328c838d0161344f565b909550935060c08b0135915061384782614032565b808216925050509295985092959890939650565b60008060006060848603121561386f578081fd5b6138788461348f565b9250602084013561388881614063565b9150604084013561389881614063565b809150509250925092565b600080604083850312156138b5578182fd5b6138be8361348f565b91506138cc6020840161348f565b90509250929050565b60008060008060008060a087890312156138ed578384fd5b6138f68761348f565b95506139046020880161348f565b9450604087013561391481614032565b6001600160a01b0316935060608701359250608087013567ffffffffffffffff81111561393f578283fd5b61394b89828a0161344f565b979a9699509497509295939492505050565b600080600080600060a08688031215613974578283fd5b61397d8661348f565b945061398b6020870161348f565b9350604086013561399b81614063565b925060608601356139ab81614081565b915060808601356139bb81614081565b809150509295509295909350565b6000602082840312156139da578081fd5b5051919050565b600080600080608085870312156139f6578182fd5b845193506020850151613a0881614063565b6040860151909350613a1981614063565b6060860151909250613a2a81614063565b939692955090935050565b60008060408385031215613a47578182fd5b8235613a5281614081565b915060208301356135ff81614081565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039290921682521515602082015260400190565b901515815260200190565b60208082526015908201527f52656c617965723a206e6f7420617070726f7665640000000000000000000000604082015260600190565b6020808252818101527f52656c617965723a205f7061796c6f616453697a6520746f6f6f6f6f20626967604082015260600190565b60208082526026908201527f52656c617965723a2077726f6e67205f61646170746572506172616d6574657260408201527f732073697a650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f52656c617965723a206661696c656420746f2073656e64206574686572000000604082015260600190565b6020808252601b908201527f52656c617965723a20756e737570706f72746564207478547970650000000000604082015260600190565b6020808252602d908201527f52656c617965723a206e6f7420656e6f756768206e617469766520666565206660408201527f6f72207769746864726177616c00000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a206e6f742075706461746572000000000000000000000000604082015260600190565b60208082526026908201527f52656c617965723a206e6f7420656e6f7567682066656520666f72207769746860408201527f64726177616c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a20696e76616c696420756c6e000000000000000000000000604082015260600190565b60208082526029908201527f52656c617965723a20737461726761746520636f6d706f736572206973206e6f60408201527f742073656e64696e670000000000000000000000000000000000000000000000606082015260800190565b6020808252600d908201527f41646d696e3a2070617573656400000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f52656c617965723a205f7061796c6f616453697a65203e203130303030000000604082015260600190565b60208082526014908201527f52656c617965723a2067617320746f6f206c6f77000000000000000000000000604082015260600190565b6020808252601f908201527f52656c617965723a206473744e6174697665416d7420746f6f206c6172676500604082015260600190565b81516fffffffffffffffffffffffffffffffff9081168252602092830151169181019190915260400190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff93909316835267ffffffffffffffff918216602084015216604082015260600190565b61ffff91909116815260200190565b600061ffff891682526001600160a01b038816602083015286604083015285606083015284608083015260c060a08301528260c0830152828460e084013781830160e090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019695505050505050565b61ffff95861681529390941660208401526fffffffffffffffffffffffffffffffff91909116604083015267ffffffffffffffff9081166060830152909116608082015260a00190565b61ffff9390931683526020830191909152604082015260600190565b90815260200190565b67ffffffffffffffff92831681529116602082015260400190565b67ffffffffffffffff948516815292841660208401529083166040830152909116606082015260800190565b74ffffffffffffffffffffffffffffffffffffffffff81168114612c0557600080fd5b8015158114612c0557600080fd5b6fffffffffffffffffffffffffffffffff81168114612c0557600080fd5b67ffffffffffffffff81168114612c0557600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7752656c6179657256323a206f7574206f6620636f756e74657273202d2074727920616761696e206c61746572215361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220dc3008649fa4799f1dff945ded26267b4164e2cdf584cf78a14dbd9084bdb93a64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102dc5760003560e01c8063741bef1a11610184578063b8f8bad4116100d6578063d5f8b0141161008a578063f2fde38b11610064578063f2fde38b14610bab578063f7013ef614610be5578063fd9be52214610c1f576102dc565b8063d5f8b01414610afd578063efbf196a14610b37578063f136a87414610b71576102dc565b8063bf4dab51116100bb578063bf4dab5114610a4f578063c03f152914610a89578063c3b04e7f14610ac3576102dc565b8063b8f8bad4146109db578063bedb86fb14610a15576102dc565b80638576db671161013857806398dabd501161011257806398dabd501461094e5780639e8c71781461097d578063ac353e04146109ac576102dc565b80638576db671461089d5780638644c578146108d75780638da5cb5b1461091f576102dc565b8063765a8a5411610169578063765a8a54146107ed578063801db1fe1461083457806381ba209a1461086e576102dc565b8063741bef1a1461077f57806374b87f67146107ae576102dc565b806355b352491161023d5780636348d269116101f15780636c473aff116101cb5780636c473aff146106e7578063715018a614610716578063724e78da14610745576102dc565b80636348d26914610642578063673448dd1461067157806369cf4e3a146106ab576102dc565b80635886ea65116102225780635886ea65146105925780635bfc2b86146105cc5780635c975abb14610606576102dc565b806355b352491461051e578063575765e214610558576102dc565b80633352b608116102945780633f103487116102795780633f1034871461046157806343b9a0c41461049b5780634eeba250146104d7576102dc565b80633352b608146103f65780633bfb404714610432576102dc565b80630508941e116102c55780630508941e1461035757806323161ff81461036a578063252f7b01146103bc576102dc565b806301e33667146102e157806303343f541461031d575b600080fd5b3480156102ed57600080fd5b50d380156102fa57600080fd5b50d2801561030757600080fd5b5061031b61031636600461357c565b610c59565b005b34801561032957600080fd5b50d3801561033657600080fd5b50d2801561034357600080fd5b5061031b6103523660046134a1565b610e25565b61031b6103653660046137b6565b610e9b565b34801561037657600080fd5b50d3801561038357600080fd5b50d2801561039057600080fd5b506103a461039f3660046138a3565b61106d565b6040516103b393929190613ebc565b60405180910390f35b3480156103c857600080fd5b50d380156103d557600080fd5b50d280156103e257600080fd5b5061031b6103f136600461372b565b6110db565b34801561040257600080fd5b50d3801561040f57600080fd5b50d2801561041c57600080fd5b50610425611209565b6040516103b39190613a65565b34801561043e57600080fd5b50d3801561044b57600080fd5b50d2801561045857600080fd5b50610425611218565b34801561046d57600080fd5b50d3801561047a57600080fd5b50d2801561048757600080fd5b5061031b61049636600461395d565b611227565b3480156104a757600080fd5b50d380156104b457600080fd5b50d280156104c157600080fd5b506104ca6113b2565b6040516103b39190613fe2565b3480156104e357600080fd5b50d380156104f057600080fd5b50d280156104fd57600080fd5b5061051161050c366004613711565b6113b8565b6040516103b39190613e7c565b34801561052a57600080fd5b50d3801561053757600080fd5b50d2801561054457600080fd5b50610511610553366004613711565b6113dc565b34801561056457600080fd5b50d3801561057157600080fd5b50d2801561057e57600080fd5b5061031b61058d3660046135c9565b611400565b34801561059e57600080fd5b50d380156105ab57600080fd5b50d280156105b857600080fd5b506104ca6105c73660046138d5565b6114d6565b3480156105d857600080fd5b50d380156105e557600080fd5b50d280156105f257600080fd5b5061031b610601366004613a35565b6116ca565b34801561061257600080fd5b50d3801561061f57600080fd5b50d2801561062c57600080fd5b50610635611785565b6040516103b39190613aad565b34801561064e57600080fd5b50d3801561065b57600080fd5b50d2801561066857600080fd5b5061042561178e565b34801561067d57600080fd5b50d3801561068a57600080fd5b50d2801561069757600080fd5b506106356106a63660046134a1565b61179d565b3480156106b757600080fd5b50d380156106c457600080fd5b50d280156106d157600080fd5b506106da6117bf565b6040516103b39190613ef0565b3480156106f357600080fd5b50d3801561070057600080fd5b50d2801561070d57600080fd5b506104256117df565b34801561072257600080fd5b50d3801561072f57600080fd5b50d2801561073c57600080fd5b5061031b6117ee565b34801561075157600080fd5b50d3801561075e57600080fd5b50d2801561076b57600080fd5b5061031b61077a3660046134a1565b6118c4565b34801561078b57600080fd5b50d3801561079857600080fd5b50d280156107a557600080fd5b5061042561193f565b3480156107ba57600080fd5b50d380156107c757600080fd5b50d280156107d457600080fd5b506107dd611953565b6040516103b39493929190614006565b3480156107f957600080fd5b50d3801561080657600080fd5b50d2801561081357600080fd5b50610827610822366004613711565b6119a9565b6040516103b39190613e50565b34801561084057600080fd5b50d3801561084d57600080fd5b50d2801561085a57600080fd5b5061031b6108693660046135c9565b611a8e565b34801561087a57600080fd5b50d3801561088757600080fd5b50d2801561089457600080fd5b506106da611b58565b3480156108a957600080fd5b50d380156108b657600080fd5b50d280156108c357600080fd5b506106356108d23660046134a1565b611b7a565b3480156108e357600080fd5b50d380156108f057600080fd5b50d280156108fd57600080fd5b5061091161090c366004613711565b611b8f565b6040516103b3929190613e99565b34801561092b57600080fd5b50d3801561093857600080fd5b50d2801561094557600080fd5b50610425611bcb565b34801561095a57600080fd5b50d3801561096757600080fd5b50d2801561097457600080fd5b506106da611bda565b34801561098957600080fd5b50d3801561099657600080fd5b50d280156109a357600080fd5b506104ca611bf8565b3480156109b857600080fd5b50d380156109c557600080fd5b50d280156109d257600080fd5b50610511611bfe565b3480156109e757600080fd5b50d380156109f457600080fd5b50d28015610a0157600080fd5b5061031b610a1036600461385b565b611c16565b348015610a2157600080fd5b50d38015610a2e57600080fd5b50d28015610a3b57600080fd5b5061031b610a4a36600461364a565b611c52565b348015610a5b57600080fd5b50d38015610a6857600080fd5b50d28015610a7557600080fd5b5061031b610a8436600461360a565b611cd9565b348015610a9557600080fd5b50d38015610aa257600080fd5b50d28015610aaf57600080fd5b506104ca610abe3660046138d5565b611ddd565b348015610acf57600080fd5b50d38015610adc57600080fd5b50d28015610ae957600080fd5b5061031b610af83660046136f5565b611e4f565b348015610b0957600080fd5b50d38015610b1657600080fd5b50d28015610b2357600080fd5b5061031b610b3236600461360a565b611ece565b348015610b4357600080fd5b50d38015610b5057600080fd5b50d28015610b5d57600080fd5b5061031b610b6c36600461357c565b611fd2565b348015610b7d57600080fd5b50d38015610b8a57600080fd5b50d28015610b9757600080fd5b50610635610ba63660046134a1565b61207e565b348015610bb757600080fd5b50d38015610bc457600080fd5b50d28015610bd157600080fd5b5061031b610be03660046134a1565b612093565b348015610bf157600080fd5b50d38015610bfe57600080fd5b50d28015610c0b57600080fd5b5061031b610c1a366004613501565b6121c0565b348015610c2b57600080fd5b50d38015610c3857600080fd5b50d28015610c4557600080fd5b5061031b610c543660046134cd565b612466565b33610c62611bcb565b6001600160a01b031614610c9e57610c793361179d565b610c9e5760405162461bcd60e51b8152600401610c9590613ab8565b60405180910390fd5b6001600160a01b038316610d50574780821115610ccd5760405162461bcd60e51b8152600401610c9590613bef565b6000836001600160a01b031683604051610ce690613a62565b60006040518083038185875af1925050503d8060008114610d23576040519150601f19603f3d011682016040523d82523d6000602084013e610d28565b606091505b5050905080610d495760405162461bcd60e51b8152600401610c9590613b81565b5050610e20565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038516906370a0823190610d98903090600401613a65565b60206040518083038186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de891906139c9565b905080821115610e0a5760405162461bcd60e51b8152600401610c9590613c83565b610e1e6001600160a01b03851684846125d7565b505b505050565b33610e2e611bcb565b6001600160a01b031614610e6157610e453361179d565b610e615760405162461bcd60e51b8152600401610c9590613ab8565b606780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b33610ea4611bcb565b6001600160a01b031614610ed757610ebb3361179d565b610ed75760405162461bcd60e51b8152600401610c9590613ab8565b60026000541415610f2f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000819055506000816001600160a01b031661271034604051610f5390613a62565b600060405180830381858888f193505050503d8060008114610f91576040519150601f19603f3d011682016040523d82523d6000602084013e610f96565b606091505b5050905080610fd65760405134906001600160a01b038416907f2c7a964ca3de5ec1d42d9822f9bbd0eb142a59cc9f855e9d93813b773192c7a390600090a35b6066546040517f987fa2d50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063987fa2d59061102b908c908c908c908c908c908c908c90600401613eff565b600060405180830381600087803b15801561104557600080fd5b505af1158015611059573d6000803e3d6000fd5b505060016000555050505050505050505050565b60696020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b336110e4611bcb565b6001600160a01b031614611117576110fb3361179d565b6111175760405162461bcd60e51b8152600401610c9590613ab8565b6002600054141561116f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556066546040517f987fa2d50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063987fa2d5906111c9908a908a908a908a908a908a908a90600401613eff565b600060405180830381600087803b1580156111e357600080fd5b505af11580156111f7573d6000803e3d6000fd5b50506001600055505050505050505050565b6070546001600160a01b031681565b6071546001600160a01b031681565b33611230611bcb565b6001600160a01b031614611263576112473361179d565b6112635760405162461bcd60e51b8152600401610c9590613ab8565b604080516060810182526fffffffffffffffffffffffffffffffff858116825267ffffffffffffffff858116602080850191825286831685870190815261ffff8c8116600090815260698452888120918d16815292529086902094518554925191517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169416939093177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000938316939093029290921777ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009290911691909102179055517fd053e021dda81c7c2794ff89e320caea5379962d49ed383a3bd0a54ffc4b932f906113a39087908790879087908790613f7c565b60405180910390a15050505050565b61271081565b606d602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b606e602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b611408612657565b6001600160a01b0316611419611bcb565b6001600160a01b031614611474576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166000908152606a602052604090819020805460ff1916831515179055517fb10786d0bfa68fb1aa29552d9203e5f545f7c073ff0784da1de1d800986f1023906114ca9084908490613a92565b60405180910390a15050565b60006127108761ffff16101580156114f9575060735467ffffffffffffffff1615155b1561150d5761150b607361271061265b565b505b6066546001600160a01b031633146115375760405162461bcd60e51b8152600401610c9590613ce0565b6127108411156115595760405162461bcd60e51b8152600401610c9590613dab565b6071546001600160a01b0386811691161415611644576000846102201480611582575084610140145b8061158e575084610120145b8061159957508460a0145b90508061164257607060009054906101000a90046001600160a01b03166001600160a01b0316634b60b4256040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190613666565b6116425760405162461bcd60e51b8152600401610c9590613d17565b505b6116878787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061271092505050565b90507fdf21c415b78ed2552cc9971249e32a053abce6087a0ae0fbf3f78db5174a3493816040516116b89190613fe2565b60405180910390a19695505050505050565b6116d2612657565b6001600160a01b03166116e3611bcb565b6001600160a01b03161461173e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b611749607383612a26565b611754607382612acc565b7f232812b1ffb7905e9272c3055c55d9cb3f9ec7344c7e2aebbe28da9152e64a4b82826040516114ca929190613feb565b606b5460ff1681565b6067546001600160a01b031681565b6001600160a01b0381166000908152606a602052604090205460ff165b919050565b606c547201000000000000000000000000000000000000900461ffff1681565b6066546001600160a01b031681565b6117f6612657565b6001600160a01b0316611807611bcb565b6001600160a01b031614611862576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6034546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b336118cd611bcb565b6001600160a01b031614611900576118e43361179d565b6119005760405162461bcd60e51b8152600401610c9590613ab8565b606b80546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b606b5461010090046001600160a01b031681565b60735467ffffffffffffffff808216916801000000000000000081048216917001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041684565b6119b16133ee565b606b546040517fda26663a00000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b03169063da26663a90611a00908690600401613ef0565b60606040518083038186803b158015611a1857600080fd5b505afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a509190613682565b6040805180820190915281516fffffffffffffffffffffffffffffffff16815260209182015167ffffffffffffffff16918101919091529392505050565b611a96612657565b6001600160a01b0316611aa7611bcb565b6001600160a01b031614611b02576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0382166000908152606f602052604090819020805460ff1916831515179055517fde6b048d6c4e63d85fde37ccbe03f4380c6d12cb2a1e9ce9268bbf47a1ef6878906114ca9084908490613a92565b606c5474010000000000000000000000000000000000000000900461ffff1681565b606f6020526000908152604090205460ff1681565b6068602052600090815260409020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b6034546001600160a01b031690565b606c54700100000000000000000000000000000000900461ffff1681565b60725481565b606c546fffffffffffffffffffffffffffffffff1681565b33611c1f611bcb565b6001600160a01b031614610e2057611c363361179d565b610e205760405162461bcd60e51b8152600401610c9590613ab8565b611c5a612657565b6001600160a01b0316611c6b611bcb565b6001600160a01b031614611cc6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606b805460ff1916911515919091179055565b33611ce2611bcb565b6001600160a01b031614158015611d095750336000908152606a602052604090205460ff16155b15611d3d57336000908152606f602052604090205460ff16611d3d5760405162461bcd60e51b8152600401610c9590613c4c565b60005b81811015610e205736838383818110611d5557fe5b9050604002019050806020016020810190611d7091906136f5565b606d6000611d816020850185613711565b61ffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905550600101611d40565b6000612710841115611e015760405162461bcd60e51b8152600401610c9590613aef565b611e448787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061271092505050565b979650505050505050565b33611e58611bcb565b6001600160a01b031614611e8b57611e6f3361179d565b611e8b5760405162461bcd60e51b8152600401610c9590613ab8565b606c80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b33611ed7611bcb565b6001600160a01b031614158015611efe5750336000908152606a602052604090205460ff16155b15611f3257336000908152606f602052604090205460ff16611f325760405162461bcd60e51b8152600401610c9590613c4c565b60005b81811015610e205736838383818110611f4a57fe5b9050604002019050806020016020810190611f6591906136f5565b606e6000611f766020850185613711565b61ffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905550600101611f35565b6000611fdc612b21565b90506001600160a01b03811661201b576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355612030565b336001600160a01b0382161461203057600080fd5b50607180546001600160a01b039485167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556070805493909416921691909117909155607255565b606a6020526000908152604090205460ff1681565b61209b612657565b6001600160a01b03166120ac611bcb565b6001600160a01b031614612107576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661214c5760405162461bcd60e51b81526004018080602001828103825260268152602001806140986026913960400191505060405180910390fd5b6034546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60006121ca612b21565b90506001600160a01b038116612209576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035561221e565b336001600160a01b0382161461221e57600080fd5b600154610100900460ff16806122375750612237612b46565b80612245575060015460ff16155b6122805760405162461bcd60e51b815260040180806020018281038252602e8152602001806140e4602e913960400191505060405180910390fd5b600154610100900460ff161580156122aa576001805460ff1961ff00199091166101001716811790555b6122b2612b57565b606680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0389161790556122f0306001611400565b606c8054606b80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038b81169190910291909117909155612ee07fffffffffffffffffffffffffffffffff00000000000000000000000000000000909216919091177fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff1670a400000000000000000000000000000000177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff1672a0000000000000000000000000000000000000177fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501f4000000000000000000000000000000000000000017909155607180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811688841617909155607080549091169186169190911790556072839055801561245d576001805461ff00191690555b50505050505050565b3361246f611bcb565b6001600160a01b0316146124a2576124863361179d565b6124a25760405162461bcd60e51b8152600401610c9590613ab8565b6066546040517f69412bfa0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906369412bfa906124ec903090600401613a65565b60206040518083038186803b15801561250457600080fd5b505afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c91906139c9565b90508082111561255e5760405162461bcd60e51b8152600401610c9590613c83565b6066546040517f07b18bde0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906307b18bde906125a99086908690600401613a79565b600060405180830381600087803b1580156125c357600080fd5b505af115801561245d573d6000803e3d6000fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e20908490612c08565b3390565b6000612668836000612cb9565b825467ffffffffffffffff6801000000000000000090910481169083168110156126c35760405162461bcd60e51b815260040180806020018281038252602d815260200180614133602d913960400191505060405180910390fd5b835467ffffffffffffffff9184900391821668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff90911617845590505b92915050565b606b5460009060ff16156127365760405162461bcd60e51b8152600401610c9590613d74565b815160221480612747575060428251115b6127635760405162461bcd60e51b8152600401610c9590613b24565b600282015160228301518061278a5760405162461bcd60e51b8152600401610c9590613de2565b8161ffff16600114806127a157508161ffff166002145b6127bd5760405162461bcd60e51b8152600401610c9590613bb8565b61ffff88811660009081526069602090815260408083208b85168452909152812091841660021461280857606c54700100000000000000000000000000000000900461ffff1661282e565b606c5461282e90700100000000000000000000000000000000900461ffff166020612e0a565b905060008961ffff1660021461286d57606c5461286890899074010000000000000000000000000000000000000000900461ffff16612e0a565b612895565b606c546128959089907201000000000000000000000000000000000000900461ffff16612e0a565b606b549091508b9060009081908190819061010090046001600160a01b03166388a4124c866128c48a8a612e0a565b8b546128ee90700100000000000000000000000000000000900467ffffffffffffffff168e612e0a565b6040518463ffffffff1660e01b815260040161290c93929190613fc6565b60806040518083038186803b15801561292457600080fd5b505afa158015612938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295c91906139e1565b935093509350935060008a61ffff16600214156129ac575060428c015188546fffffffffffffffffffffffffffffffff168111156129ac5760405162461bcd60e51b8152600401610c9590613e19565b600081156129fa57606c546129f790612710906129eb906fffffffffffffffffffffffffffffffff908116906129f19089811690849089908d16612e6b565b90612ec4565b90612e6b565b90505b612a0f81612a09898987612f2b565b90612e0a565b9c5050505050505050505050505095945050505050565b81547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9182169081177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000919091021777ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000429290921691909102179055565b612ad7826000612cb9565b815467ffffffffffffffff909116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff909116179055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b6000612b5130613015565b15905090565b600154610100900460ff1680612b705750612b70612b46565b80612b7e575060015460ff16155b612bb95760405162461bcd60e51b815260040180806020018281038252602e8152602001806140e4602e913960400191505060405180910390fd5b600154610100900460ff16158015612be3576001805460ff1961ff00199091166101001716811790555b612beb61301b565b612bf36130ba565b8015612c05576001805461ff00191690555b50565b6000612c5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131ca9092919063ffffffff16565b805190915015610e2057808060200190516020811015612c7c57600080fd5b5051610e205760405162461bcd60e51b815260040180806020018281038252602a815260200180614160602a913960400191505060405180910390fd5b815467ffffffffffffffff808316914291780100000000000000000000000000000000000000000000000090910481169082161115612d3d578354700100000000000000000000000000000000810467ffffffffffffffff908116780100000000000000000000000000000000000000000000000090920481168303160291909101905b8115612dbd57835467ffffffffffffffff68010000000000000000820481169390930192168211612d6e5781612d7b565b835467ffffffffffffffff165b845467ffffffffffffffff9190911668010000000000000000027fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff9091161784555b835467ffffffffffffffff90911678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff909116179092555050565b600082820183811015612e64576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082612e7a5750600061270a565b82820282848281612e8757fe5b0414612e645760405162461bcd60e51b81526004018080602001828103825260218152602001806141126021913960400191505060405180910390fd5b6000808211612f1a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612f2357fe5b049392505050565b61ffff83166000908152606d60205260408120546fffffffffffffffffffffffffffffffff1680612f6d5750606c546fffffffffffffffffffffffffffffffff165b6000612f916127106129eb876fffffffffffffffffffffffffffffffff8616612e6b565b90506fffffffffffffffffffffffffffffffff8416612fb3579150612e649050565b60725461ffff87166000908152606e60205260408120549091612ffc91612ff5916fffffffffffffffffffffffffffffffff808a16926129eb92911690612e6b565b8790612e0a565b905081811161300b5781611e44565b9695505050505050565b3b151590565b600154610100900460ff16806130345750613034612b46565b80613042575060015460ff16155b61307d5760405162461bcd60e51b815260040180806020018281038252602e8152602001806140e4602e913960400191505060405180910390fd5b600154610100900460ff16158015612bf3576001805460ff1961ff00199091166101001716811790558015612c05576001805461ff001916905550565b600154610100900460ff16806130d357506130d3612b46565b806130e1575060015460ff16155b61311c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806140e4602e913960400191505060405180910390fd5b600154610100900460ff16158015613146576001805460ff1961ff00199091166101001716811790555b6000613150612657565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612c05576001805461ff001916905550565b60606131d984846000856131e1565b949350505050565b6060824710156132225760405162461bcd60e51b81526004018080602001828103825260268152602001806140be6026913960400191505060405180910390fd5b61322b85613015565b61327c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106132d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161329b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461333a576040519150601f19603f3d011682016040523d82523d6000602084013e61333f565b606091505b5091509150611e4482828660608315613359575081612e64565b8251156133695782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156133b357818101518382015260200161339b565b50505050905090810190601f1680156133e05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604080518082019091526000808252602082015290565b60008083601f840112613416578182fd5b50813567ffffffffffffffff81111561342d578182fd5b60208301915083602060408302850101111561344857600080fd5b9250929050565b60008083601f840112613460578182fd5b50813567ffffffffffffffff811115613477578182fd5b60208301915083602082850101111561344857600080fd5b803561ffff811681146117ba57600080fd5b6000602082840312156134b2578081fd5b81356134bd81614032565b6001600160a01b03169392505050565b600080604083850312156134df578081fd5b82356134ea81614032565b6001600160a01b0316946020939093013593505050565b600080600080600060a08688031215613518578081fd5b853561352381614032565b6001600160a01b03908116955060208701359061353f82614032565b908116945060408701359061355382614032565b908116935060608701359061356782614032565b95989497509295929094169350506080013590565b600080600060608486031215613590578283fd5b833561359b81614032565b6001600160a01b0390811693506020850135906135b782614032565b93969316945050506040919091013590565b600080604083850312156135db578182fd5b82356135e681614032565b6001600160a01b0316915060208301356135ff81614055565b809150509250929050565b6000806020838503121561361c578182fd5b823567ffffffffffffffff811115613632578283fd5b61363e85828601613405565b90969095509350505050565b60006020828403121561365b578081fd5b8135612e6481614055565b600060208284031215613677578081fd5b8151612e6481614055565b600060608284031215613693578081fd5b6040516060810181811067ffffffffffffffff821117156136b057fe5b60405282516136be81614063565b815260208301516136ce81614081565b6020820152604083015163ffffffff811681146136e9578283fd5b60408201529392505050565b600060208284031215613706578081fd5b8135612e6481614063565b600060208284031215613722578081fd5b612e648261348f565b600080600080600080600060c0888a031215613745578485fd5b61374e8861348f565b9650602088013561375e81614032565b6001600160a01b0316955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115613797578283fd5b6137a38a828b0161344f565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156137d1578182fd5b6137da8961348f565b975060208901356137ea81614032565b6001600160a01b03908116975060408a0135965060608a0135955060808a0135945060a08a01359067ffffffffffffffff821115613826578384fd5b6138328c838d0161344f565b909550935060c08b0135915061384782614032565b808216925050509295985092959890939650565b60008060006060848603121561386f578081fd5b6138788461348f565b9250602084013561388881614063565b9150604084013561389881614063565b809150509250925092565b600080604083850312156138b5578182fd5b6138be8361348f565b91506138cc6020840161348f565b90509250929050565b60008060008060008060a087890312156138ed578384fd5b6138f68761348f565b95506139046020880161348f565b9450604087013561391481614032565b6001600160a01b0316935060608701359250608087013567ffffffffffffffff81111561393f578283fd5b61394b89828a0161344f565b979a9699509497509295939492505050565b600080600080600060a08688031215613974578283fd5b61397d8661348f565b945061398b6020870161348f565b9350604086013561399b81614063565b925060608601356139ab81614081565b915060808601356139bb81614081565b809150509295509295909350565b6000602082840312156139da578081fd5b5051919050565b600080600080608085870312156139f6578182fd5b845193506020850151613a0881614063565b6040860151909350613a1981614063565b6060860151909250613a2a81614063565b939692955090935050565b60008060408385031215613a47578182fd5b8235613a5281614081565b915060208301356135ff81614081565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039290921682521515602082015260400190565b901515815260200190565b60208082526015908201527f52656c617965723a206e6f7420617070726f7665640000000000000000000000604082015260600190565b6020808252818101527f52656c617965723a205f7061796c6f616453697a6520746f6f6f6f6f20626967604082015260600190565b60208082526026908201527f52656c617965723a2077726f6e67205f61646170746572506172616d6574657260408201527f732073697a650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f52656c617965723a206661696c656420746f2073656e64206574686572000000604082015260600190565b6020808252601b908201527f52656c617965723a20756e737570706f72746564207478547970650000000000604082015260600190565b6020808252602d908201527f52656c617965723a206e6f7420656e6f756768206e617469766520666565206660408201527f6f72207769746864726177616c00000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a206e6f742075706461746572000000000000000000000000604082015260600190565b60208082526026908201527f52656c617965723a206e6f7420656e6f7567682066656520666f72207769746860408201527f64726177616c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a20696e76616c696420756c6e000000000000000000000000604082015260600190565b60208082526029908201527f52656c617965723a20737461726761746520636f6d706f736572206973206e6f60408201527f742073656e64696e670000000000000000000000000000000000000000000000606082015260800190565b6020808252600d908201527f41646d696e3a2070617573656400000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f52656c617965723a205f7061796c6f616453697a65203e203130303030000000604082015260600190565b60208082526014908201527f52656c617965723a2067617320746f6f206c6f77000000000000000000000000604082015260600190565b6020808252601f908201527f52656c617965723a206473744e6174697665416d7420746f6f206c6172676500604082015260600190565b81516fffffffffffffffffffffffffffffffff9081168252602092830151169181019190915260400190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff93909316835267ffffffffffffffff918216602084015216604082015260600190565b61ffff91909116815260200190565b600061ffff891682526001600160a01b038816602083015286604083015285606083015284608083015260c060a08301528260c0830152828460e084013781830160e090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019695505050505050565b61ffff95861681529390941660208401526fffffffffffffffffffffffffffffffff91909116604083015267ffffffffffffffff9081166060830152909116608082015260a00190565b61ffff9390931683526020830191909152604082015260600190565b90815260200190565b67ffffffffffffffff92831681529116602082015260400190565b67ffffffffffffffff948516815292841660208401529083166040830152909116606082015260800190565b74ffffffffffffffffffffffffffffffffffffffffff81168114612c0557600080fd5b8015158114612c0557600080fd5b6fffffffffffffffffffffffffffffffff81168114612c0557600080fd5b67ffffffffffffffff81168114612c0557600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7752656c6179657256323a206f7574206f6620636f756e74657273202d2074727920616761696e206c61746572215361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220dc3008649fa4799f1dff945ded26267b4164e2cdf584cf78a14dbd9084bdb93a64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2233,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 137,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 140,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 484,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6054,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "uln",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(ILayerZeroUltraLightNodeV2)17334"
      },
      {
        "astId": 6056,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "stargateBridgeAddress",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 6085,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstPriceLookupOld",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint16,t_struct(DstPrice)6064_storage)"
      },
      {
        "astId": 6091,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstConfigLookup",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_struct(DstConfig)6071_storage))"
      },
      {
        "astId": 6095,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "approvedAddresses",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6145,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "paused",
        "offset": 0,
        "slot": "107",
        "type": "t_bool"
      },
      {
        "astId": 6147,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "priceFeed",
        "offset": 1,
        "slot": "107",
        "type": "t_contract(ILayerZeroPriceFeedV2)16942"
      },
      {
        "astId": 6149,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "multiplierBps",
        "offset": 0,
        "slot": "108",
        "type": "t_uint128"
      },
      {
        "astId": 6151,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "validateProofBytes",
        "offset": 16,
        "slot": "108",
        "type": "t_uint16"
      },
      {
        "astId": 6153,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "fpBytes",
        "offset": 18,
        "slot": "108",
        "type": "t_uint16"
      },
      {
        "astId": 6155,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "mptOverhead",
        "offset": 20,
        "slot": "108",
        "type": "t_uint16"
      },
      {
        "astId": 6159,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstMultipliers",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint16,t_uint128)"
      },
      {
        "astId": 6163,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstFloorMarginsUSD",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_uint16,t_uint128)"
      },
      {
        "astId": 6167,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "priceConfigUpdaters",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6169,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "stargateComposer",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(IStargateComposer)6029"
      },
      {
        "astId": 6171,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "stargateBridgeAddr",
        "offset": 0,
        "slot": "113",
        "type": "t_address"
      },
      {
        "astId": 6173,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "nativeDecimalsRate",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 6175,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "limiter",
        "offset": 0,
        "slot": "115",
        "type": "t_struct(Info)17486_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILayerZeroPriceFeedV2)16942": {
        "encoding": "inplace",
        "label": "contract ILayerZeroPriceFeedV2",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroUltraLightNodeV2)17334": {
        "encoding": "inplace",
        "label": "contract ILayerZeroUltraLightNodeV2",
        "numberOfBytes": "20"
      },
      "t_contract(IStargateComposer)6029": {
        "encoding": "inplace",
        "label": "contract IStargateComposer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_struct(DstConfig)6071_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => struct RelayerV2.DstConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(DstConfig)6071_storage)"
      },
      "t_mapping(t_uint16,t_struct(DstConfig)6071_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct RelayerV2.DstConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(DstConfig)6071_storage"
      },
      "t_mapping(t_uint16,t_struct(DstPrice)6064_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct RelayerV2.DstPrice)",
        "numberOfBytes": "32",
        "value": "t_struct(DstPrice)6064_storage"
      },
      "t_mapping(t_uint16,t_uint128)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_struct(DstConfig)6071_storage": {
        "encoding": "inplace",
        "label": "struct RelayerV2.DstConfig",
        "members": [
          {
            "astId": 6066,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstNativeAmtCap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6068,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "baseGas",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6070,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "gasPerByte",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DstPrice)6064_storage": {
        "encoding": "inplace",
        "label": "struct RelayerV2.DstPrice",
        "members": [
          {
            "astId": 6061,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstPriceRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6063,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstGasPriceInWei",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Info)17486_storage": {
        "encoding": "inplace",
        "label": "struct RateLimiter.Info",
        "members": [
          {
            "astId": 17479,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 17481,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "tokens",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 17483,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "rate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 17485,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "lastRefillTime",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}