{
  "address": "0x3b55bB408d63dD159B9E5099751bF322D46AAe72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lib",
          "type": "address"
        }
      ],
      "name": "AddInboundProofLibraryForChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userApplication",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "configType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newConfig",
          "type": "bytes"
        }
      ],
      "name": "AppConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "proofType",
          "type": "uint16"
        }
      ],
      "name": "EnableSupportedOutboundProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "blockhash",
          "type": "bytes32"
        }
      ],
      "name": "HashReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "Packet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "adapterParams",
          "type": "bytes"
        }
      ],
      "name": "RelayerParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "SetChainAddressSize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "proofType",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "adapterParams",
          "type": "bytes"
        }
      ],
      "name": "SetDefaultAdapterParamsForChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "inboundProofLib",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "inboundBlockConfirm",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "outboundBlockConfirm",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "SetDefaultConfigForChainId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "SetLayerZeroToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayerFeeContract",
          "type": "address"
        }
      ],
      "name": "SetRelayerFeeContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uln",
          "type": "bytes32"
        }
      ],
      "name": "SetRemoteUln",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_msgSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawNative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_msgSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawZRO",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BP_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_ORACLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_OUTBOUND_PROOF_TYPE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_RELAYER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_TYPE_ORACLE_QUOTED_FEES",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_TYPE_RELAYER_QUOTED_FEES",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_TYPE_TREASURY_PROTOCOL_FEES",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_library",
          "type": "address"
        }
      ],
      "name": "addInboundProofLibraryForChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "appConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "inboundProofLibraryVersion",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "inboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "outboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "chainAddressSizeMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "defaultAdapterParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "defaultAppConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "inboundProofLibraryVersion",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "inboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "outboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_proofType",
          "type": "uint16"
        }
      ],
      "name": "enableSupportedOutboundProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInZRO",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "userApplicationAddress",
          "type": "address"
        }
      ],
      "name": "getAppConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "inboundProofLibraryVersion",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "inboundBlockConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "outboundProofType",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "outboundBlockConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct UltraLightNode.ApplicationConfiguration",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_lookupHash",
          "type": "bytes32"
        }
      ],
      "name": "getBlockHeaderData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "confirmations",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "internalType": "struct UltraLightNode.BlockData",
          "name": "blockData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "userApplicationAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "inboundProofLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "layerZeroToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "maxInboundProofLibrary",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "oracleQuotedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracleQuotedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "relayerQuotedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "relayerQuotedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_destination",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setChainAddressSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ua",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_proofType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "setDefaultAdapterParamsForChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_inboundProofLibraryVersion",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_inboundBlockConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundBlockConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setDefaultConfigForChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layerZeroToken",
          "type": "address"
        }
      ],
      "name": "setLayerZeroToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_remoteUln",
          "type": "bytes32"
        }
      ],
      "name": "setRemoteUln",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "supportedOutboundProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "contract ILayerZeroTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryNativeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryZROFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "ulnLookup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_lookupHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_confirmations",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "updateHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_lookupHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        }
      ],
      "name": "validateTransactionProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawZRO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd6e8af96181af28a03d264030c61b714795d8c794d755c55261d3bf2ba6ee69",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x3b55bB408d63dD159B9E5099751bF322D46AAe72",
    "transactionIndex": 0,
    "gasUsed": "4512217",
    "logsBloom": "0x
    "blockHash": "0x000000000000004bfbc9b7318436764ea309297324f0506ec75d7a988359ddd4",
    "transactionHash": "0xcd6e8af96181af28a03d264030c61b714795d8c794d755c55261d3bf2ba6ee69",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 75,
        "transactionHash": "0xcd6e8af96181af28a03d264030c61b714795d8c794d755c55261d3bf2ba6ee69",
        "address": "0x3b55bB408d63dD159B9E5099751bF322D46AAe72",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x000000000000004bfbc9b7318436764ea309297324f0506ec75d7a988359ddd4"
      }
    ],
    "blockNumber": 75,
    "cumulativeGasUsed": "4512217",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcC985A708f159F089aA7Af55ACDa0529e35c25Dc"
  ],
  "numDeployments": 1,
  "solcInputHash": "e50f66544751609158f35b16e19eb697",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.d1802f25\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"AddInboundProofLibraryForChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userApplication\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"configType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newConfig\",\"type\":\"bytes\"}],\"name\":\"AppConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proofType\",\"type\":\"uint16\"}],\"name\":\"EnableSupportedOutboundProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockhash\",\"type\":\"bytes32\"}],\"name\":\"HashReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"Packet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"name\":\"RelayerParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"SetChainAddressSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"proofType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"name\":\"SetDefaultAdapterParamsForChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"inboundProofLib\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirm\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outboundBlockConfirm\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetDefaultConfigForChainId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"SetLayerZeroToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerFeeContract\",\"type\":\"address\"}],\"name\":\"SetRelayerFeeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uln\",\"type\":\"bytes32\"}],\"name\":\"SetRemoteUln\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawZRO\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_ORACLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_OUTBOUND_PROOF_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_RELAYER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TYPE_ORACLE_QUOTED_FEES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TYPE_RELAYER_QUOTED_FEES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TYPE_TREASURY_PROTOCOL_FEES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_library\",\"type\":\"address\"}],\"name\":\"addInboundProofLibraryForChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"appConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"inboundProofLibraryVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"outboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"chainAddressSizeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"defaultAdapterParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"defaultAppConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"inboundProofLibraryVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"outboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_proofType\",\"type\":\"uint16\"}],\"name\":\"enableSupportedOutboundProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInZRO\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"userApplicationAddress\",\"type\":\"address\"}],\"name\":\"getAppConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"inboundProofLibraryVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"outboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct UltraLightNode.ApplicationConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_lookupHash\",\"type\":\"bytes32\"}],\"name\":\"getBlockHeaderData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"internalType\":\"struct UltraLightNode.BlockData\",\"name\":\"blockData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"userApplicationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"inboundProofLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerZeroToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"maxInboundProofLibrary\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"oracleQuotedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleQuotedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"relayerQuotedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayerQuotedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_destination\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setChainAddressSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ua\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_proofType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"setDefaultAdapterParamsForChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_inboundProofLibraryVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_inboundBlockConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundBlockConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setDefaultConfigForChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layerZeroToken\",\"type\":\"address\"}],\"name\":\"setLayerZeroToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_remoteUln\",\"type\":\"bytes32\"}],\"name\":\"setRemoteUln\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"supportedOutboundProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"contract ILayerZeroTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryNativeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryZROFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"ulnLookup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_lookupHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_confirmations\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"updateHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lookupHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"}],\"name\":\"validateTransactionProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawZRO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UltraLightNode.sol\":\"UltraLightNode\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/UltraLightNode.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroValidationLibrary.sol\\\";\\nimport \\\"./interfaces/ILayerZeroMessagingLibrary.sol\\\";\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"./interfaces/ILayerZeroRelayer.sol\\\";\\nimport \\\"./interfaces/ILayerZeroTreasury.sol\\\";\\nimport \\\"./interfaces/ILayerZeroOracle.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUltraLightNodeV1.sol\\\";\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\n\\ncontract UltraLightNode is ILayerZeroMessagingLibrary, ILayerZeroUltraLightNodeV1, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n\\n    struct BlockData {\\n        uint confirmations;\\n        bytes32 data;\\n    }\\n\\n    // Application config\\n    uint public constant CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION = 1;\\n    uint public constant CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS = 2;\\n    uint public constant CONFIG_TYPE_RELAYER = 3;\\n    uint public constant CONFIG_TYPE_OUTBOUND_PROOF_TYPE = 4;\\n    uint public constant CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS = 5;\\n    uint public constant CONFIG_TYPE_ORACLE = 6;\\n\\n    struct ApplicationConfiguration {\\n        uint16 inboundProofLibraryVersion;\\n        uint64 inboundBlockConfirmations;\\n        address relayer;\\n        uint16 outboundProofType;\\n        uint64 outboundBlockConfirmations;\\n        address oracle;\\n    }\\n\\n    // Token and Contracts\\n    IERC20 public layerZeroToken;\\n    ILayerZeroTreasury public treasuryContract;\\n\\n    // Fee management\\n    uint public constant BP_DENOMINATOR = 10000;\\n    // treasury and relayer share the protocol fee, either in native token or ZRO\\n    uint8 public constant WITHDRAW_TYPE_TREASURY_PROTOCOL_FEES = 0;\\n    uint8 public constant WITHDRAW_TYPE_ORACLE_QUOTED_FEES = 1; // quoted fee refers to the fee in block relaying\\n    uint8 public constant WITHDRAW_TYPE_RELAYER_QUOTED_FEES = 2; //quoted fee refers the fee in msg relaying\\n\\n    mapping(address => uint) public oracleQuotedFees;\\n    mapping(address => uint) public relayerQuotedFees;\\n    uint public treasuryNativeFees;\\n    uint public treasuryZROFees;\\n\\n    // User Application\\n    mapping(address => mapping(uint16 => ApplicationConfiguration)) public appConfig; // app address => chainId => config\\n    mapping(uint16 => ApplicationConfiguration) public defaultAppConfig; // default UA settings if no version specified\\n    mapping(uint16 => mapping(uint16 => bytes)) public defaultAdapterParams;\\n\\n    // Validation\\n    mapping(uint16 => mapping(uint16 => address)) public inboundProofLibrary; // chainId => library Id => inboundProofLibrary contract\\n    mapping(uint16 => uint16) public maxInboundProofLibrary; // chainId => inboundProofLibrary\\n    mapping(uint16 => mapping(uint16 => bool)) public supportedOutboundProof; // chainId => outboundProofType => enabled\\n    mapping(uint16 => uint) public chainAddressSizeMap;\\n    mapping(address => mapping(uint16 => mapping(bytes32 => BlockData))) public hashLookup;\\n    mapping(uint16 => bytes32) public ulnLookup; // remote ulns\\n\\n    ILayerZeroEndpoint public immutable endpoint;\\n\\n    // Events\\n    event AppConfigUpdated(address userApplication, uint configType, bytes newConfig);\\n    event AddInboundProofLibraryForChain(uint16 chainId, address lib);\\n    event EnableSupportedOutboundProof(uint16 chainId, uint16 proofType);\\n    event HashReceived(uint16 srcChainId, address oracle, uint confirmations, bytes32 blockhash);\\n    event Packet(uint16 chainId, bytes payload);\\n    event RelayerParams(uint16 chainId, uint64 nonce, uint16 outboundProofType, bytes adapterParams);\\n    event SetChainAddressSize(uint16 chainId, uint size);\\n    event SetDefaultConfigForChainId(\\n        uint16 chainId,\\n        uint16 inboundProofLib,\\n        uint64 inboundBlockConfirm,\\n        address relayer,\\n        uint16 outboundProofType,\\n        uint16 outboundBlockConfirm,\\n        address oracle\\n    );\\n    event SetDefaultAdapterParamsForChainId(uint16 chainId, uint16 proofType, bytes adapterParams);\\n    event SetLayerZeroToken(address tokenAddress);\\n    event SetRelayerFeeContract(address relayerFeeContract);\\n    event SetRemoteUln(uint16 chainId, bytes32 uln);\\n    event SetTreasury(address treasuryAddress);\\n    event WithdrawZRO(address _msgSender, address _to, uint _amount);\\n    event WithdrawNative(uint8 _type, address _owner, address _msgSender, address _to, uint _amount);\\n\\n    constructor(address _endpoint) {\\n        require(_endpoint != address(0x0), \\\"LayerZero: endpoint cannot be zero address\\\");\\n        endpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    // only the endpoint can call SEND() and setConfig()\\n    modifier onlyEndpoint() {\\n        require(address(endpoint) == msg.sender, \\\"LayerZero: only endpoint\\\");\\n        _;\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // PROTOCOL\\n\\n    // This function completes delivery of a LayerZero message.\\n    //\\n    // In order to deliver the message, this function:\\n    // (a) takes the _transactionProof submitted by UA's relayer, and\\n    // (b) retrieve UA's validation library\\n    // (c) takes the _blockData submitted by the UA's oracle given the their configuration (and blockConfirmations),\\n    // (d) decodes using UA's validation library using (a) and (c)\\n    //  then, this functions asserts that\\n    // (e) the payload originated from the known Ultra Light Node from source chain, and\\n    // (f) the _dstAddress the specified destination contract\\n    function validateTransactionProof(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _lookupHash,\\n        bytes calldata _transactionProof\\n    ) external override {\\n        // retrieve UA's configuration using the _dstAddress from arguments.\\n        ApplicationConfiguration memory uaConfig = getAppConfig(_srcChainId, _dstAddress);\\n\\n        // (a) assert that the caller == UA's relayer\\n        require(uaConfig.relayer == msg.sender, \\\"LayerZero: invalid relayer\\\");\\n\\n        LayerZeroPacket.Packet memory _packet;\\n        {\\n            // (b) retrieve UA's validation library\\n            address inboundProofLib = inboundProofLibrary[_srcChainId][uaConfig.inboundProofLibraryVersion];\\n\\n            // (c) assert that the data submitted by UA's oracle have no fewer confirmations than UA's configuration\\n            BlockData storage blockData = hashLookup[uaConfig.oracle][_srcChainId][_lookupHash];\\n            require(\\n                blockData.confirmations >= uaConfig.inboundBlockConfirmations,\\n                \\\"LayerZero: not enough block confirmations\\\"\\n            );\\n\\n            // (d) decode\\n            uint remoteAddressSize = chainAddressSizeMap[_srcChainId];\\n            _packet = ILayerZeroValidationLibrary(inboundProofLib).validateProof(\\n                blockData.data,\\n                _transactionProof,\\n                remoteAddressSize\\n            );\\n        }\\n\\n        // (e) assert that the packet was emitted by the source ultra light node\\n        require(ulnLookup[_srcChainId] == _packet.ulnAddress, \\\"LayerZero: _packet.ulnAddress is invalid\\\");\\n\\n        // (f) assert that the _packet._dstAddress == the _dstAddress specified by the UAs message\\n        require(_packet.dstAddress == _dstAddress, \\\"LayerZero: invalid dst address\\\");\\n\\n        // publish the payload and _gasLimit to the endpoint for calling lzReceive at _dstAddress\\n        endpoint.receivePayload(\\n            _packet.srcChainId,\\n            _packet.srcAddress,\\n            _packet.dstAddress,\\n            _packet.nonce,\\n            _gasLimit,\\n            _packet.payload\\n        );\\n    }\\n\\n    // Called (by the Endpoint) with the information required to send a LayerZero message for a User Application.\\n    // This function:\\n    // (a) pays the protocol (native token or ZRO), oracle (native token) and relayer (native token) for their roles in sending the message.\\n    // (b) generates the message payload and emits events of the message and adapterParams\\n    // (c) notifies the oracle\\n    function send(\\n        address _ua,\\n        uint64 _nonce,\\n        uint16 _chainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable override onlyEndpoint {\\n        ApplicationConfiguration memory uaConfig = getAppConfig(_chainId, _ua);\\n        address ua = _ua;\\n        uint64 nonce = _nonce;\\n        uint16 chainId = _chainId;\\n        require(ulnLookup[chainId] != bytes32(0), \\\"LayerZero: chainId does not exist\\\");\\n\\n        uint totalNativeFee;\\n        {\\n            uint oracleFee;\\n            // (a - 1), pay the oracle\\n            {\\n                oracleFee = ILayerZeroOracle(uaConfig.oracle).getPrice(chainId, uaConfig.outboundProofType);\\n                oracleQuotedFees[uaConfig.oracle] = oracleQuotedFees[uaConfig.oracle].add(oracleFee);\\n            }\\n\\n            // (a - 2), pay the relayer\\n            {\\n                uint payloadSize = _payload.length;\\n                ILayerZeroRelayer relayer = ILayerZeroRelayer(uaConfig.relayer);\\n                if (_adapterParams.length == 0) {\\n                    bytes memory defaultAdaptorParam = defaultAdapterParams[chainId][uaConfig.outboundProofType];\\n                    totalNativeFee = relayer.getPrice(\\n                        chainId,\\n                        uaConfig.outboundProofType,\\n                        ua,\\n                        payloadSize,\\n                        defaultAdaptorParam\\n                    );\\n                    relayer.notifyRelayer(chainId, uaConfig.outboundProofType, defaultAdaptorParam);\\n                } else {\\n                    totalNativeFee = relayer.getPrice(\\n                        chainId,\\n                        uaConfig.outboundProofType,\\n                        ua,\\n                        payloadSize,\\n                        _adapterParams\\n                    );\\n                    relayer.notifyRelayer(chainId, uaConfig.outboundProofType, _adapterParams);\\n                }\\n                relayerQuotedFees[uaConfig.relayer] = relayerQuotedFees[uaConfig.relayer].add(totalNativeFee); // totalNativeFee == relayerFee here\\n\\n                // emit the param events\\n                emit RelayerParams(chainId, nonce, uaConfig.outboundProofType, _adapterParams);\\n            }\\n\\n            // (a - 3), pay the protocol\\n            {\\n                // if no ZRO token or not specifying a payment address, pay in native token\\n                bool payInNative = _zroPaymentAddress == address(0x0) || address(layerZeroToken) == address(0x0);\\n                uint protocolFee = treasuryContract.getFees(!payInNative, totalNativeFee, oracleFee); // totalNativeFee == relayerFee here\\n\\n                if (protocolFee > 0) {\\n                    if (payInNative) {\\n                        treasuryNativeFees = treasuryNativeFees.add(protocolFee);\\n                        totalNativeFee = totalNativeFee.add(protocolFee);\\n                    } else {\\n                        // zro payment address must equal the _ua or the tx.origin otherwise the transaction reverts\\n                        require(\\n                            _zroPaymentAddress == ua || _zroPaymentAddress == tx.origin,\\n                            \\\"LayerZero: must be paid by sender or origin\\\"\\n                        );\\n\\n                        // transfer the LayerZero token to this contract from the payee\\n                        layerZeroToken.safeTransferFrom(_zroPaymentAddress, address(this), protocolFee);\\n\\n                        treasuryZROFees = treasuryZROFees.add(protocolFee);\\n                    }\\n                }\\n            }\\n\\n            totalNativeFee = totalNativeFee.add(oracleFee);\\n        }\\n\\n        // (b) emit payload and the adapterParams if any\\n        {\\n            bytes memory encodedPayload = abi.encodePacked(nonce, ua, _destination, _payload);\\n            emit Packet(chainId, encodedPayload);\\n            // (c) notify the oracle\\n            ILayerZeroOracle(uaConfig.oracle).notifyOracle(\\n                chainId,\\n                uaConfig.outboundProofType,\\n                uaConfig.outboundBlockConfirmations\\n            );\\n        }\\n\\n        require(totalNativeFee <= msg.value, \\\"LayerZero: not enough native for fees\\\");\\n        // refund if they send too much\\n        uint amount = msg.value.sub(totalNativeFee);\\n        if (amount > 0) {\\n            (bool success, ) = _refundAddress.call{value: amount}(\\\"\\\");\\n            require(success, \\\"LayerZero: failed to refund\\\");\\n        }\\n    }\\n\\n    // Can be called by any address to update a block header\\n    // can only upload new block data or the same block data with more confirmations\\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _data) external override {\\n        // this function may revert with a default message if the oracle address is not an ILayerZeroOracle\\n        BlockData storage bd = hashLookup[msg.sender][_srcChainId][_lookupHash];\\n        // if it has a record, requires a larger confirmation.\\n        require(\\n            bd.confirmations < _confirmations,\\n            \\\"LayerZero: oracle data can only update if it has more confirmations\\\"\\n        );\\n\\n        // set the new information into storage\\n        bd.confirmations = _confirmations;\\n        bd.data = _data;\\n\\n        emit HashReceived(_srcChainId, msg.sender, _confirmations, _lookupHash);\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // Other Library Interfaces\\n\\n    // default to DEFAULT setting if ZERO value\\n    function getAppConfig(\\n        uint16 _chainId,\\n        address userApplicationAddress\\n    ) public view returns (ApplicationConfiguration memory) {\\n        ApplicationConfiguration memory config = appConfig[userApplicationAddress][_chainId];\\n        ApplicationConfiguration storage defaultConfig = defaultAppConfig[_chainId];\\n\\n        if (config.inboundProofLibraryVersion == 0) {\\n            config.inboundProofLibraryVersion = defaultConfig.inboundProofLibraryVersion;\\n        }\\n\\n        if (config.inboundBlockConfirmations == 0) {\\n            config.inboundBlockConfirmations = defaultConfig.inboundBlockConfirmations;\\n        }\\n\\n        if (config.relayer == address(0x0)) {\\n            config.relayer = defaultConfig.relayer;\\n        }\\n\\n        if (config.outboundProofType == 0) {\\n            config.outboundProofType = defaultConfig.outboundProofType;\\n        }\\n\\n        if (config.outboundBlockConfirmations == 0) {\\n            config.outboundBlockConfirmations = defaultConfig.outboundBlockConfirmations;\\n        }\\n\\n        if (config.oracle == address(0x0)) {\\n            config.oracle = defaultConfig.oracle;\\n        }\\n\\n        return config;\\n    }\\n\\n    function setConfig(\\n        uint16 chainId,\\n        address _ua,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyEndpoint {\\n        ApplicationConfiguration storage uaConfig = appConfig[_ua][chainId];\\n        if (_configType == CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION) {\\n            uint16 inboundProofLibraryVersion = abi.decode(_config, (uint16));\\n            require(\\n                inboundProofLibraryVersion <= maxInboundProofLibrary[chainId],\\n                \\\"LayerZero: invalid inbound proof library version\\\"\\n            );\\n            uaConfig.inboundProofLibraryVersion = inboundProofLibraryVersion;\\n        } else if (_configType == CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS) {\\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\\n            uaConfig.inboundBlockConfirmations = blockConfirmations;\\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\\n            address relayer = abi.decode(_config, (address));\\n            uaConfig.relayer = relayer;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_PROOF_TYPE) {\\n            uint16 outboundProofType = abi.decode(_config, (uint16));\\n            require(\\n                supportedOutboundProof[chainId][outboundProofType] || outboundProofType == 0,\\n                \\\"LayerZero: invalid outbound proof type\\\"\\n            );\\n            uaConfig.outboundProofType = outboundProofType;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS) {\\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\\n            uaConfig.outboundBlockConfirmations = blockConfirmations;\\n        } else if (_configType == CONFIG_TYPE_ORACLE) {\\n            address oracle = abi.decode(_config, (address));\\n            uaConfig.oracle = oracle;\\n        } else {\\n            revert(\\\"LayerZero: Invalid config type\\\");\\n        }\\n\\n        emit AppConfigUpdated(_ua, _configType, _config);\\n    }\\n\\n    function getConfig(\\n        uint16 _chainId,\\n        address userApplicationAddress,\\n        uint _configType\\n    ) external view override returns (bytes memory) {\\n        ApplicationConfiguration storage uaConfig = appConfig[userApplicationAddress][_chainId];\\n\\n        if (_configType == CONFIG_TYPE_INBOUND_PROOF_LIBRARY_VERSION) {\\n            if (uaConfig.inboundProofLibraryVersion == 0) {\\n                return abi.encode(defaultAppConfig[_chainId].inboundProofLibraryVersion);\\n            }\\n            return abi.encode(uaConfig.inboundProofLibraryVersion);\\n        } else if (_configType == CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS) {\\n            if (uaConfig.inboundBlockConfirmations == 0) {\\n                return abi.encode(defaultAppConfig[_chainId].inboundBlockConfirmations);\\n            }\\n            return abi.encode(uaConfig.inboundBlockConfirmations);\\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\\n            if (uaConfig.relayer == address(0x0)) {\\n                return abi.encode(defaultAppConfig[_chainId].relayer);\\n            }\\n            return abi.encode(uaConfig.relayer);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_PROOF_TYPE) {\\n            if (uaConfig.outboundProofType == 0) {\\n                return abi.encode(defaultAppConfig[_chainId].outboundProofType);\\n            }\\n            return abi.encode(uaConfig.outboundProofType);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS) {\\n            if (uaConfig.outboundBlockConfirmations == 0) {\\n                return abi.encode(defaultAppConfig[_chainId].outboundBlockConfirmations);\\n            }\\n            return abi.encode(uaConfig.outboundBlockConfirmations);\\n        } else if (_configType == CONFIG_TYPE_ORACLE) {\\n            if (uaConfig.oracle == address(0x0)) {\\n                return abi.encode(defaultAppConfig[_chainId].oracle);\\n            }\\n            return abi.encode(uaConfig.oracle);\\n        } else {\\n            revert(\\\"LayerZero: Invalid config type\\\");\\n        }\\n    }\\n\\n    // returns the native fee the UA pays to cover fees\\n    function estimateFees(\\n        uint16 _chainId,\\n        address _ua,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParams\\n    ) external view override returns (uint nativeFee, uint zroFee) {\\n        uint16 chainId = _chainId;\\n        address ua = _ua;\\n        uint payloadSize = _payload.length;\\n        bytes memory adapterParam = _adapterParams;\\n\\n        ApplicationConfiguration memory uaConfig = getAppConfig(chainId, ua);\\n\\n        // Relayer Fee\\n        uint relayerFee;\\n        {\\n            if (adapterParam.length == 0) {\\n                bytes memory defaultAdaptorParam = defaultAdapterParams[chainId][uaConfig.outboundProofType];\\n                relayerFee = ILayerZeroRelayer(uaConfig.relayer).getPrice(\\n                    chainId,\\n                    uaConfig.outboundProofType,\\n                    ua,\\n                    payloadSize,\\n                    defaultAdaptorParam\\n                );\\n            } else {\\n                relayerFee = ILayerZeroRelayer(uaConfig.relayer).getPrice(\\n                    chainId,\\n                    uaConfig.outboundProofType,\\n                    ua,\\n                    payloadSize,\\n                    adapterParam\\n                );\\n            }\\n        }\\n\\n        // Oracle Fee\\n        uint oracleFee = ILayerZeroOracle(uaConfig.oracle).getPrice(chainId, uaConfig.outboundProofType);\\n\\n        // LayerZero Fee\\n        {\\n            uint protocolFee = treasuryContract.getFees(_payInZRO, relayerFee, oracleFee);\\n            _payInZRO ? zroFee = protocolFee : nativeFee = protocolFee;\\n        }\\n\\n        // return the sum of fees\\n        nativeFee = nativeFee.add(relayerFee).add(oracleFee);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Claim Fees\\n\\n    // universal withdraw ZRO token function\\n    function withdrawZRO(address _to, uint _amount) external override nonReentrant {\\n        require(msg.sender == address(treasuryContract), \\\"LayerZero: only treasury\\\");\\n        treasuryZROFees = treasuryZROFees.sub(_amount);\\n        layerZeroToken.safeTransfer(_to, _amount);\\n        emit WithdrawZRO(msg.sender, _to, _amount);\\n    }\\n\\n    // universal withdraw native token function.\\n    // the source contract should perform all the authentication control\\n    // safemath overflow if the amount is not enough\\n    function withdrawNative(\\n        uint8 _type,\\n        address _owner,\\n        address payable _to,\\n        uint _amount\\n    ) external override nonReentrant {\\n        if (_type == WITHDRAW_TYPE_TREASURY_PROTOCOL_FEES) {\\n            require(msg.sender == address(treasuryContract), \\\"LayerZero:only treasury\\\");\\n            treasuryNativeFees = treasuryNativeFees.sub(_amount);\\n        } else if (_type == WITHDRAW_TYPE_ORACLE_QUOTED_FEES) {\\n            oracleQuotedFees[msg.sender] = oracleQuotedFees[msg.sender].sub(_amount);\\n        } else if (_type == WITHDRAW_TYPE_RELAYER_QUOTED_FEES) {\\n            relayerQuotedFees[msg.sender] = relayerQuotedFees[msg.sender].sub(_amount);\\n        } else {\\n            revert(\\\"LayerZero: unsupported withdraw type\\\");\\n        }\\n\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"LayerZero: withdraw failed\\\");\\n        emit WithdrawNative(_type, _owner, msg.sender, _to, _amount);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Owner calls, configuration only.\\n    function setLayerZeroToken(address _layerZeroToken) external onlyOwner {\\n        require(_layerZeroToken != address(0x0), \\\"LayerZero: _layerZeroToken cannot be zero address\\\");\\n        layerZeroToken = IERC20(_layerZeroToken);\\n        emit SetLayerZeroToken(_layerZeroToken);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0x0), \\\"LayerZero: treasury cannot be zero address\\\");\\n        treasuryContract = ILayerZeroTreasury(_treasury);\\n        emit SetTreasury(_treasury);\\n    }\\n\\n    function addInboundProofLibraryForChain(uint16 _chainId, address _library) external onlyOwner {\\n        require(_library != address(0x0), \\\"LayerZero: library cannot be zero address\\\");\\n        require(maxInboundProofLibrary[_chainId] < 65535, \\\"LayerZero: can not add new library\\\");\\n        maxInboundProofLibrary[_chainId]++;\\n        inboundProofLibrary[_chainId][maxInboundProofLibrary[_chainId]] = _library;\\n        emit AddInboundProofLibraryForChain(_chainId, _library);\\n    }\\n\\n    function enableSupportedOutboundProof(uint16 _chainId, uint16 _proofType) external onlyOwner {\\n        supportedOutboundProof[_chainId][_proofType] = true;\\n        emit EnableSupportedOutboundProof(_chainId, _proofType);\\n    }\\n\\n    function setDefaultConfigForChainId(\\n        uint16 _chainId,\\n        uint16 _inboundProofLibraryVersion,\\n        uint64 _inboundBlockConfirmations,\\n        address _relayer,\\n        uint16 _outboundProofType,\\n        uint16 _outboundBlockConfirmations,\\n        address _oracle\\n    ) external onlyOwner {\\n        require(\\n            _inboundProofLibraryVersion <= maxInboundProofLibrary[_chainId] && _inboundProofLibraryVersion > 0,\\n            \\\"LayerZero: invalid inbound proof library version\\\"\\n        );\\n        require(_inboundBlockConfirmations > 0, \\\"LayerZero: invalid inbound block confirmation\\\");\\n        require(_relayer != address(0x0), \\\"LayerZero: invalid relayer address\\\");\\n        require(supportedOutboundProof[_chainId][_outboundProofType], \\\"LayerZero: invalid outbound proof type\\\");\\n        require(_outboundBlockConfirmations > 0, \\\"LayerZero: invalid outbound block confirmation\\\");\\n        require(_oracle != address(0x0), \\\"LayerZero: invalid oracle address\\\");\\n        defaultAppConfig[_chainId] = ApplicationConfiguration(\\n            _inboundProofLibraryVersion,\\n            _inboundBlockConfirmations,\\n            _relayer,\\n            _outboundProofType,\\n            _outboundBlockConfirmations,\\n            _oracle\\n        );\\n        emit SetDefaultConfigForChainId(\\n            _chainId,\\n            _inboundProofLibraryVersion,\\n            _inboundBlockConfirmations,\\n            _relayer,\\n            _outboundProofType,\\n            _outboundBlockConfirmations,\\n            _oracle\\n        );\\n    }\\n\\n    function setDefaultAdapterParamsForChainId(\\n        uint16 _chainId,\\n        uint16 _proofType,\\n        bytes calldata _adapterParams\\n    ) external onlyOwner {\\n        defaultAdapterParams[_chainId][_proofType] = _adapterParams;\\n        emit SetDefaultAdapterParamsForChainId(_chainId, _proofType, _adapterParams);\\n    }\\n\\n    function setRemoteUln(uint16 _remoteChainId, bytes32 _remoteUln) external onlyOwner {\\n        require(ulnLookup[_remoteChainId] == bytes32(0), \\\"LayerZero: remote uln already set\\\");\\n        ulnLookup[_remoteChainId] = _remoteUln;\\n        emit SetRemoteUln(_remoteChainId, _remoteUln);\\n    }\\n\\n    function setChainAddressSize(uint16 _chainId, uint _size) external onlyOwner {\\n        require(chainAddressSizeMap[_chainId] == 0, \\\"LayerZero: remote chain address size already set\\\");\\n        chainAddressSizeMap[_chainId] = _size;\\n        emit SetChainAddressSize(_chainId, _size);\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // view functions\\n    function getBlockHeaderData(\\n        address _oracle,\\n        uint16 _remoteChainId,\\n        bytes32 _lookupHash\\n    ) external view returns (BlockData memory blockData) {\\n        return hashLookup[_oracle][_remoteChainId][_lookupHash];\\n    }\\n\\n    function oracleQuotedAmount(address _oracle) external view override returns (uint) {\\n        return oracleQuotedFees[_oracle];\\n    }\\n\\n    function relayerQuotedAmount(address _relayer) external view override returns (uint) {\\n        return relayerQuotedFees[_relayer];\\n    }\\n}\\n\",\"keccak256\":\"0x56cc605f63c6e3b045e30a9251d3646d45ed119ae16eb9a05c99af500e3fb1a3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xb6a446c0b622566f8c2e2ae4c32208bcc3f815c5f5657a27fa48d583e31f7b7d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroMessagingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroMessagingLibrary {\\n    // send(), messages will be inflight.\\n    function send(\\n        address _userApplication,\\n        uint64 _lastNonce,\\n        uint16 _chainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // estimate native fee at the send side\\n    function estimateFees(\\n        uint16 _chainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    //---------------------------------------------------------------------------\\n    // setConfig / getConfig are User Application (UA) functions to specify Oracle, Relayer, blockConfirmations, libraryVersion\\n    function setConfig(uint16 _chainId, address _userApplication, uint _configType, bytes calldata _config) external;\\n\\n    function getConfig(\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x7fb6d715e58bdad860e194c7b34cc3539fa27df54dbb18d1b41e4da08c064418\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroOracle {\\n    // @notice query the oracle price for relaying block information to the destination chain\\n    // @param _dstChainId the destination endpoint identifier\\n    // @param _outboundProofType the proof type identifier to specify the data to be relayed\\n    function getPrice(uint16 _dstChainId, uint16 _outboundProofType) external view returns (uint price);\\n\\n    // @notice Ultra-Light Node notifies the Oracle of a new block information relaying request\\n    // @param _dstChainId the destination endpoint identifier\\n    // @param _outboundProofType the proof type identifier to specify the data to be relayed\\n    // @param _outboundBlockConfirmations the number of source chain block confirmation needed\\n    function notifyOracle(uint16 _dstChainId, uint16 _outboundProofType, uint64 _outboundBlockConfirmations) external;\\n\\n    // @notice query if the address is an approved actor for privileges like data submission and fee withdrawal etc.\\n    // @param _address the address to be checked\\n    function isApproved(address _address) external view returns (bool approved);\\n}\\n\",\"keccak256\":\"0x441295e1bc5d3c4bb021458b45f5e98d7f5a7c79ed53ba72932a261f857c4709\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xd1617e455d90d41556bba636bc440627d301ec481de16ff04fbd520333c3c6f3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroRelayer {\\n    // @notice query the relayer price for relaying the payload and its proof to the destination chain\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getPrice(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint price);\\n\\n    // @notice Ultra-Light Node notifies the Oracle of a new block information relaying request\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify the data to be relayed\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function notifyRelayer(uint16 _dstChainId, uint16 _outboundProofType, bytes calldata _adapterParams) external;\\n\\n    // @notice query if the address is an approved actor for privileges like data submission and fee withdrawal etc.\\n    // @param _address - the address to be checked\\n    function isApproved(address _address) external view returns (bool approved);\\n}\\n\",\"keccak256\":\"0x5c7d60823c57e8d7e276689cf1d421b9328b785bcce88718c6222193905e94f5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroTreasury {\\n    function getFees(bool payInZro, uint relayerFee, uint oracleFee) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf30814340363b85498937030f671adb282435ca16d350ce2210d28b75901a1e4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUltraLightNodeV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroUltraLightNodeV1 {\\n    // a Relayer can execute the validateTransactionProof()\\n    function validateTransactionProof(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _lookupHash,\\n        bytes calldata _transactionProof\\n    ) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _remoteChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _data) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(uint8 _type, address _owner, address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function oracleQuotedAmount(address _oracle) external view returns (uint);\\n\\n    function relayerQuotedAmount(address _relayer) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4675df4f71a0e3b2afb612e00016c7b344c1f138dd51735512b286d728bab446\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroValidationLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../proof/utility/LayerZeroPacket.sol\\\";\\n\\ninterface ILayerZeroValidationLibrary {\\n    function validateProof(\\n        bytes32 blockData,\\n        bytes calldata _data,\\n        uint _remoteAddressSize\\n    ) external returns (LayerZeroPacket.Packet memory packet);\\n}\\n\",\"keccak256\":\"0x0621a318689774296b47c95d8738d0c4e1bc63efe62e524cb3ea36ef1a9da487\",\"license\":\"BUSL-1.1\"},\"contracts/proof/utility/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// https://github.com/ensdomains/buffer\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n    /**\\n     * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n     *      a capacity. The capacity may be longer than the current value, in\\n     *      which case it can be extended without the need to allocate more memory.\\n     */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n     * @dev Initializes a buffer with an initial capacity.a co\\n     * @param buf The buffer to initialize.\\n     * @param capacity The number of bytes of space to allocate the buffer.\\n     * @return The buffer, for chaining.\\n     */\\n    function init(buffer memory buf, uint capacity) internal pure returns (buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            mstore(0x40, add(32, add(ptr, capacity)))\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param rawData The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function writeRawBytes(\\n        buffer memory buf,\\n        uint off,\\n        bytes memory rawData,\\n        uint offData,\\n        uint len\\n    ) internal pure returns (buffer memory) {\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(rawData, offData)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n     * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n     *      the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param off The start offset to write to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to copy.\\n     * @return The original buffer, for chaining.\\n     */\\n    function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns (buffer memory) {\\n        require(len <= data.length);\\n\\n        if (off + len > buf.capacity) {\\n            resize(buf, max(buf.capacity, len + off) * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(add(len, off), buflen) {\\n                mstore(bufptr, add(len, off))\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n\\n        return buf;\\n    }\\n\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return write(buf, buf.buf.length, data, data.length);\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    function max(uint a, uint b) private pure returns (uint) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb6ba1e85708e05e0f2181136650463faca122318dd16aa6cbaa4f88e48d908\",\"license\":\"BUSL-1.1\"},\"contracts/proof/utility/LayerZeroPacket.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./Buffer.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary LayerZeroPacket {\\n    using Buffer for Buffer.buffer;\\n    using SafeMath for uint;\\n\\n    struct Packet {\\n        uint16 srcChainId;\\n        uint16 dstChainId;\\n        uint64 nonce;\\n        address dstAddress;\\n        bytes srcAddress;\\n        bytes32 ulnAddress;\\n        bytes payload;\\n    }\\n\\n    function getPacket(\\n        bytes memory data,\\n        uint16 srcChain,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        uint16 dstChainId;\\n        address dstAddress;\\n        uint size;\\n        uint64 nonce;\\n\\n        // The log consists of the destination chain id and then a bytes payload\\n        //      0--------------------------------------------31\\n        // 0   |  total bytes size\\n        // 32  |  destination chain id\\n        // 64  |  bytes offset\\n        // 96  |  bytes array size\\n        // 128 |  payload\\n        assembly {\\n            dstChainId := mload(add(data, 32))\\n            size := mload(add(data, 96)) /// size of the byte array\\n            nonce := mload(add(data, 104)) // offset to convert to uint64  128  is index -24\\n            dstAddress := mload(add(data, sub(add(128, sizeOfSrcAddress), 4))) // offset to convert to address 12 -8\\n        }\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 136, sizeOfSrcAddress); // 128 + 8\\n\\n        uint payloadSize = size.sub(28).sub(sizeOfSrcAddress);\\n        Buffer.buffer memory payloadBuffer;\\n        payloadBuffer.init(payloadSize);\\n        payloadBuffer.writeRawBytes(0, data, sizeOfSrcAddress.add(156), payloadSize); // 148 + 8\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChainId,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n\\n    function getPacketV2(\\n        bytes memory data,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        // packet def: abi.encodePacked(nonce, srcChain, srcAddress, dstChain, dstAddress, payload);\\n        // data def: abi.encode(packet) = offset(32) + length(32) + packet\\n        //              if from EVM\\n        // 0 - 31       0 - 31          |  total bytes size\\n        // 32 - 63      32 - 63         |  location\\n        // 64 - 95      64 - 95         |  size of the packet\\n        // 96 - 103     96 - 103        |  nonce\\n        // 104 - 105    104 - 105       |  srcChainId\\n        // 106 - P      106 - 125       |  srcAddress, where P = 106 + sizeOfSrcAddress - 1,\\n        // P+1 - P+2    126 - 127       |  dstChainId\\n        // P+3 - P+22   128 - 147       |  dstAddress\\n        // P+23 - END   148 - END       |  payload\\n\\n        // decode the packet\\n        uint256 realSize;\\n        uint64 nonce;\\n        uint16 srcChain;\\n        uint16 dstChain;\\n        address dstAddress;\\n        assembly {\\n            realSize := mload(add(data, 64))\\n            nonce := mload(add(data, 72)) // 104 - 32\\n            srcChain := mload(add(data, 74)) // 106 - 32\\n            dstChain := mload(add(data, add(76, sizeOfSrcAddress))) // P + 3 - 32 = 105 + size + 3 - 32 = 76 + size\\n            dstAddress := mload(add(data, add(96, sizeOfSrcAddress))) // P + 23 - 32 = 105 + size + 23 - 32 = 96 + size\\n        }\\n\\n        require(srcChain != 0, \\\"LayerZeroPacket: invalid packet\\\");\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 106, sizeOfSrcAddress);\\n\\n        uint nonPayloadSize = sizeOfSrcAddress.add(32); // 2 + 2 + 8 + 20, 32 + 20 = 52 if sizeOfSrcAddress == 20\\n        uint payloadSize = realSize.sub(nonPayloadSize);\\n        Buffer.buffer memory payloadBuffer;\\n        payloadBuffer.init(payloadSize);\\n        payloadBuffer.writeRawBytes(0, data, nonPayloadSize.add(96), payloadSize);\\n\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChain,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n\\n    function getPacketV3(\\n        bytes memory data,\\n        uint sizeOfSrcAddress,\\n        bytes32 ulnAddress\\n    ) internal pure returns (LayerZeroPacket.Packet memory) {\\n        // data def: abi.encodePacked(nonce, srcChain, srcAddress, dstChain, dstAddress, payload);\\n        //              if from EVM\\n        // 0 - 31       0 - 31          |  total bytes size\\n        // 32 - 39      32 - 39         |  nonce\\n        // 40 - 41      40 - 41         |  srcChainId\\n        // 42 - P       42 - 61         |  srcAddress, where P = 41 + sizeOfSrcAddress,\\n        // P+1 - P+2    62 - 63         |  dstChainId\\n        // P+3 - P+22   64 - 83         |  dstAddress\\n        // P+23 - END   84 - END        |  payload\\n\\n        // decode the packet\\n        uint256 realSize = data.length;\\n        uint nonPayloadSize = sizeOfSrcAddress.add(32); // 2 + 2 + 8 + 20, 32 + 20 = 52 if sizeOfSrcAddress == 20\\n        require(realSize >= nonPayloadSize, \\\"LayerZeroPacket: invalid packet\\\");\\n        uint payloadSize = realSize - nonPayloadSize;\\n\\n        uint64 nonce;\\n        uint16 srcChain;\\n        uint16 dstChain;\\n        address dstAddress;\\n        assembly {\\n            nonce := mload(add(data, 8)) // 40 - 32\\n            srcChain := mload(add(data, 10)) // 42 - 32\\n            dstChain := mload(add(data, add(12, sizeOfSrcAddress))) // P + 3 - 32 = 41 + size + 3 - 32 = 12 + size\\n            dstAddress := mload(add(data, add(32, sizeOfSrcAddress))) // P + 23 - 32 = 41 + size + 23 - 32 = 32 + size\\n        }\\n\\n        require(srcChain != 0, \\\"LayerZeroPacket: invalid packet\\\");\\n\\n        Buffer.buffer memory srcAddressBuffer;\\n        srcAddressBuffer.init(sizeOfSrcAddress);\\n        srcAddressBuffer.writeRawBytes(0, data, 42, sizeOfSrcAddress);\\n\\n        Buffer.buffer memory payloadBuffer;\\n        if (payloadSize > 0) {\\n            payloadBuffer.init(payloadSize);\\n            payloadBuffer.writeRawBytes(0, data, nonPayloadSize.add(32), payloadSize);\\n        }\\n\\n        return\\n            LayerZeroPacket.Packet(\\n                srcChain,\\n                dstChain,\\n                nonce,\\n                dstAddress,\\n                srcAddressBuffer.buf,\\n                ulnAddress,\\n                payloadBuffer.buf\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf96248293a8bb6e9a3908ac7eb78dfb794bb197a5743d377905fe771911d2192\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50d380156200001f57600080fd5b50d280156200002d57600080fd5b50604051620058e0380380620058e08339810160408190526200005091620000fb565b6001600090815562000061620000f7565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038116620000e15760405162461bcd60e51b8152600401620000d89062000134565b60405180910390fd5b60601b6001600160601b0319166080526200017e565b3390565b6000602082840312156200010d578081fd5b81516001600160a81b038116811462000124578182fd5b6001600160a01b03169392505050565b6020808252602a908201527f4c617965725a65726f3a20656e64706f696e742063616e6e6f74206265207a65604082015269726f206164647265737360b01b606082015260800190565b60805160601c615735620001ab600039806118a85280612799528061281352806135ce52506157356000f3fe60806040526004361061031e5760003560e01c80638317814a116101a5578063d56bc64b116100ec578063ebfa08e911610095578063f2fde38b1161006f578063f2fde38b14610d1c578063f47a5feb14610d56578063f8e1734c14610d85578063f9dd8e0f14610dbf5761031e565b8063ebfa08e914610c61578063ed28580a14610ca8578063f0f4426014610ce25761031e565b8063e6108a82116100c6578063e6108a8214610bb3578063ea216c2114610bed578063eb0d4c3114610c275761031e565b8063d56bc64b14610b05578063db00719b14610b3f578063ddfdef5a14610b795761031e565b8063a183608c1161014e578063b77d22ad11610128578063b77d22ad14610a48578063b8e7e3e014610a77578063d543c77414610abe5761031e565b8063a183608c14610998578063a4662222146109d2578063abe685cd14610a195761031e565b80638da5cb5b1161017f5780638da5cb5b14610900578063904d3b8d1461092f578063959f59431461095e5761031e565b80638317814a146108525780638525b7111461088c57806387078f9f146108c65761031e565b80634d0ca1b4116102695780635e280f1111610212578063715018a6116101ec578063715018a6146107ba5780638140666e146107e95780638207f79d146108185761031e565b80635e280f111461071757806361aa19da14610746578063704316e5146107805761031e565b806352d3b5001161024357806352d3b500146106745780635b5a2678146106ae5780635c011531146106dd5761031e565b80634d0ca1b4146105f85780634d3a0f7c1461062757806352d2871f1461063a5761031e565b80632cfacb06116102cb57806331bd2430116102a557806331bd24301461055257806340a7bb101461058157806349148c37146105c95761031e565b80632cfacb061461049b5780632e9959ec146104ca5780632f813464146105065761031e565b806318da0011116102fc57806318da0011146103eb57806322c107761461041a5780632a819bbf146104545761031e565b806302e72c631461032357806307b9ca7c14610373578063096607f8146103af575b600080fd5b34801561032f57600080fd5b50d3801561033c57600080fd5b50d2801561034957600080fd5b5061035d610358366004614044565b610dee565b60405161036a9190614927565b60405180910390f35b34801561037f57600080fd5b50d3801561038c57600080fd5b50d2801561039957600080fd5b506103a2610e00565b60405161036a9190614899565b3480156103bb57600080fd5b50d380156103c857600080fd5b50d280156103d557600080fd5b506103e96103e4366004614647565b610e0f565b005b3480156103f757600080fd5b50d3801561040457600080fd5b50d2801561041157600080fd5b506103a2611175565b34801561042657600080fd5b50d3801561043357600080fd5b50d2801561044057600080fd5b506103e961044f366004614723565b611184565b34801561046057600080fd5b50d3801561046d57600080fd5b50d2801561047a57600080fd5b5061048e6104893660046145b7565b61137d565b60405161036a919061495b565b3480156104a757600080fd5b50d380156104b457600080fd5b50d280156104c157600080fd5b5061035d61143f565b3480156104d657600080fd5b50d380156104e357600080fd5b50d280156104f057600080fd5b506104f9611444565b60405161036a91906155ac565b34801561051257600080fd5b50d3801561051f57600080fd5b50d2801561052c57600080fd5b5061054061053b3660046142fa565b611449565b60405161036a96959493929190615508565b34801561055e57600080fd5b50d3801561056b57600080fd5b50d2801561057857600080fd5b5061035d6114cd565b34801561058d57600080fd5b50d3801561059a57600080fd5b50d280156105a757600080fd5b506105bb6105b6366004614357565b6114d2565b60405161036a929190615589565b3480156105d557600080fd5b50d380156105e257600080fd5b50d280156105ef57600080fd5b5061035d61189c565b34801561060457600080fd5b50d3801561061157600080fd5b50d2801561061e57600080fd5b506104f96118a1565b6103e961063536600461412e565b6118a6565b34801561064657600080fd5b50d3801561065357600080fd5b50d2801561066057600080fd5b5061048e61066f36600461440b565b6120c7565b34801561068057600080fd5b50d3801561068d57600080fd5b50d2801561069a57600080fd5b506103e96106a9366004614044565b61242f565b3480156106ba57600080fd5b50d380156106c757600080fd5b50d280156106d457600080fd5b5061035d612537565b3480156106e957600080fd5b50d380156106f657600080fd5b50d2801561070357600080fd5b506103e9610712366004614455565b61253d565b34801561072357600080fd5b50d3801561073057600080fd5b50d2801561073d57600080fd5b506103a2612811565b34801561075257600080fd5b50d3801561075f57600080fd5b50d2801561076c57600080fd5b5061035d61077b366004614044565b612835565b34801561078c57600080fd5b50d3801561079957600080fd5b50d280156107a657600080fd5b506103e96107b536600461457d565b612854565b3480156107c657600080fd5b50d380156107d357600080fd5b50d280156107e057600080fd5b506103e96128e9565b3480156107f557600080fd5b50d3801561080257600080fd5b50d2801561080f57600080fd5b5061035d6129bf565b34801561082457600080fd5b50d3801561083157600080fd5b50d2801561083e57600080fd5b506103e961084d366004614316565b6129c4565b34801561085e57600080fd5b50d3801561086b57600080fd5b50d2801561087857600080fd5b506103e96108873660046145e4565b612b5c565b34801561089857600080fd5b50d380156108a557600080fd5b50d280156108b257600080fd5b506103e96108c13660046140fa565b612c3f565b3480156108d257600080fd5b50d380156108df57600080fd5b50d280156108ec57600080fd5b506103e96108fb366004614552565b612d31565b34801561090c57600080fd5b50d3801561091957600080fd5b50d2801561092657600080fd5b506103a2612e1e565b34801561093b57600080fd5b50d3801561094857600080fd5b50d2801561095557600080fd5b5061035d612e2d565b34801561096a57600080fd5b50d3801561097757600080fd5b50d2801561098457600080fd5b5061035d6109933660046142fa565b612e32565b3480156109a457600080fd5b50d380156109b157600080fd5b50d280156109be57600080fd5b5061035d6109cd366004614044565b612e44565b3480156109de57600080fd5b50d380156109eb57600080fd5b50d280156109f857600080fd5b50610a0c610a07366004614316565b612e56565b60405161036a9190615233565b348015610a2557600080fd5b50d38015610a3257600080fd5b50d28015610a3f57600080fd5b5061035d613024565b348015610a5457600080fd5b50d38015610a6157600080fd5b50d28015610a6e57600080fd5b5061035d611444565b348015610a8357600080fd5b50d38015610a9057600080fd5b50d28015610a9d57600080fd5b50610ab1610aac3660046142fa565b61302a565b60405161036a91906152b6565b348015610aca57600080fd5b50d38015610ad757600080fd5b50d28015610ae457600080fd5b50610af8610af33660046145b7565b613040565b60405161036a9190614904565b348015610b1157600080fd5b50d38015610b1e57600080fd5b50d28015610b2b57600080fd5b506105bb610b3a3660046140b1565b613060565b348015610b4b57600080fd5b50d38015610b5857600080fd5b50d28015610b6557600080fd5b506103a2610b743660046145b7565b61308a565b348015610b8557600080fd5b50d38015610b9257600080fd5b50d28015610b9f57600080fd5b50610540610bae366004614070565b6130b0565b348015610bbf57600080fd5b50d38015610bcc57600080fd5b50d28015610bd957600080fd5b5061035d610be8366004614044565b61313f565b348015610bf957600080fd5b50d38015610c0657600080fd5b50d28015610c1357600080fd5b5061035d610c223660046142fa565b61315a565b348015610c3357600080fd5b50d38015610c4057600080fd5b50d28015610c4d57600080fd5b506103e9610c5c3660046145b7565b61316c565b348015610c6d57600080fd5b50d38015610c7a57600080fd5b50d28015610c8757600080fd5b50610c9b610c963660046140b1565b61325b565b60405161036a919061529f565b348015610cb457600080fd5b50d38015610cc157600080fd5b50d28015610cce57600080fd5b506103e9610cdd366004614552565b6132af565b348015610cee57600080fd5b50d38015610cfb57600080fd5b50d28015610d0857600080fd5b506103e9610d17366004614044565b61339c565b348015610d2857600080fd5b50d38015610d3557600080fd5b50d28015610d4257600080fd5b506103e9610d51366004614044565b613499565b348015610d6257600080fd5b50d38015610d6f57600080fd5b50d28015610d7c57600080fd5b5061035d6135c6565b348015610d9157600080fd5b50d38015610d9e57600080fd5b50d28015610dab57600080fd5b506103e9610dba3660046144d8565b6135cc565b348015610dcb57600080fd5b50d38015610dd857600080fd5b50d28015610de557600080fd5b506104f961189c565b60056020526000908152604090205481565b6002546001600160a01b031681565b610e1761392c565b6001600160a01b0316610e28612e1e565b6001600160a01b031614610e83576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8088166000908152600c6020526040902054811690871611801590610eaf575060008661ffff16115b610ed45760405162461bcd60e51b8152600401610ecb90614e5a565b60405180910390fd5b60008567ffffffffffffffff1611610efe5760405162461bcd60e51b8152600401610ecb90615179565b6001600160a01b038416610f245760405162461bcd60e51b8152600401610ecb90614b2a565b61ffff8088166000908152600d602090815260408083209387168352929052205460ff16610f645760405162461bcd60e51b8152600401610ecb9061496e565b60008261ffff1611610f885760405162461bcd60e51b8152600401610ecb90615005565b6001600160a01b038116610fae5760405162461bcd60e51b8152600401610ecb90614c78565b6040518060c001604052808761ffff1681526020018667ffffffffffffffff168152602001856001600160a01b031681526020018461ffff1681526020018361ffff1667ffffffffffffffff168152602001826001600160a01b0316815250600960008961ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001600a6101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600001601e6101000a81548161ffff021916908361ffff16021790555060808201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160010160086101000a8154816001600160a01b0302191690836001600160a01b031602179055509050507f45bb8a2b6b05457ff80b84be5bf06f2d05069fa8099fcb9d8e34149654b4d5c28787878787878760405161116497969594939291906154b8565b60405180910390a150505050505050565b6003546001600160a01b031681565b600260005414156111dc576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560ff8416611228576003546001600160a01b031633146112135760405162461bcd60e51b8152600401610ecb90614e23565b6006546112209082613930565b6006556112b6565b60ff841660011415611263573360009081526004602052604090205461124e9082613930565b336000908152600460205260409020556112b6565b60ff84166002141561129e57336000908152600560205260409020546112899082613930565b336000908152600560205260409020556112b6565b60405162461bcd60e51b8152600401610ecb90615062565b6000826001600160a01b0316826040516112cf90614818565b60006040518083038185875af1925050503d806000811461130c576040519150601f19603f3d011682016040523d82523d6000602084013e611311565b606091505b50509050806113325760405162461bcd60e51b8152600401610ecb90614a39565b7f163adce0473e267e1db8ecb524c0fcdceda62c3e6f231966bbb252e01043253785853386866040516113699594939291906155ba565b60405180910390a150506001600055505050565b600a6020908152600092835260408084208252918352918190208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f8101859004850282018501909352828152929091908301828280156114375780601f1061140c57610100808354040283529160200191611437565b820191906000526020600020905b81548152906001019060200180831161141a57829003601f168201915b505050505081565b600381565b600181565b6009602052600090815260409020805460019091015461ffff8083169267ffffffffffffffff6201000082048116936001600160a01b036a010000000000000000000084048116947e010000000000000000000000000000000000000000000000000000000000009094049093169291811691680100000000000000009091041686565b600681565b604080516020601f840181900481028201810190925282815260009182918a918a918991859190899089908190840183828082843760009201829052509394506115229250879150869050612e56565b905060008251600014156116925761ffff8681166000908152600a60209081526040808320606087015190941683529281528282208054845160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f8101849004840282018401909552848152929390918301828280156115f75780601f106115cc576101008083540402835291602001916115f7565b820191906000526020600020905b8154815290600101906020018083116115da57829003601f168201915b5050505050905082604001516001600160a01b031663e54a22158885606001518989866040518663ffffffff1660e01b815260040161163a9594939291906153fc565b60206040518083038186803b15801561165257600080fd5b505afa158015611666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168a91906146ef565b915050611721565b81604001516001600160a01b031663e54a22158784606001518888886040518663ffffffff1660e01b81526004016116ce9594939291906153fc565b60206040518083038186803b1580156116e657600080fd5b505afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e91906146ef565b90505b60a082015160608301516040517f0b4d51070000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691630b4d510791611772918b9160040161539e565b60206040518083038186803b15801561178a57600080fd5b505afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c291906146ef565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316635cbbbd758e85856040518463ffffffff1660e01b815260040161180b9392919061490f565b60206040518083038186803b15801561182357600080fd5b505afa158015611837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185b91906146ef565b90508c61186b5780995089611870565b809850885b506118879050816118818b8561398d565b9061398d565b98505050505050505097509795505050505050565b600281565b600081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146118ee5760405162461bcd60e51b8152600401610ecb90614fce565b60006118fa8a8d612e56565b61ffff8b166000908152601060205260409020549091508c908c908c906119335760405162461bcd60e51b8152600401610ecb90614c1b565b6000808560a001516001600160a01b0316630b4d51078488606001516040518363ffffffff1660e01b815260040161196c92919061539e565b60206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc91906146ef565b60a08701516001600160a01b03166000908152600460205260409020549091506119e6908261398d565b60a08701516001600160a01b031660009081526004602052604090819020919091558601518b9088611c095761ffff8581166000908152600a6020908152604080832060608d015190941683529281528282208054845160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f810184900484028201840190955284815292939091830182828015611ad95780601f10611aae57610100808354040283529160200191611ad9565b820191906000526020600020905b815481529060010190602001808311611abc57829003601f168201915b5050505060608b01516040517fe54a22150000000000000000000000000000000000000000000000000000000081529293506001600160a01b0385169263e54a22159250611b31918a918d90899088906004016153fc565b60206040518083038186803b158015611b4957600080fd5b505afa158015611b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8191906146ef565b60608a01516040517f3a5fb82a0000000000000000000000000000000000000000000000000000000081529196506001600160a01b03841691633a5fb82a91611bd1918a91908690600401615460565b600060405180830381600087803b158015611beb57600080fd5b505af1158015611bff573d6000803e3d6000fd5b5050505050611d18565b806001600160a01b031663e54a2215868a606001518a868f8f6040518763ffffffff1660e01b8152600401611c43969594939291906153b3565b60206040518083038186803b158015611c5b57600080fd5b505afa158015611c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9391906146ef565b60608901516040517f3a5fb82a0000000000000000000000000000000000000000000000000000000081529195506001600160a01b03831691633a5fb82a91611ce5918991908f908f90600401615438565b600060405180830381600087803b158015611cff57600080fd5b505af1158015611d13573d6000803e3d6000fd5b505050505b6040808901516001600160a01b0316600090815260056020522054611d3d908561398d565b6040808a01516001600160a01b03166000908152600560205281902091909155606089015190517fb8a7262132db1f61626604a31c3de81dc1a5bb0f1511dfa70d626ab1b88b52c291611d979188918a918f908f90615551565b60405180910390a150600090506001600160a01b038a161580611dc357506002546001600160a01b0316155b6003546040517f5cbbbd750000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0390911690635cbbbd7590611e17908515908890889060040161490f565b60206040518083038186803b158015611e2f57600080fd5b505afa158015611e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6791906146ef565b90508015611f03578115611e9657600654611e82908261398d565b600655611e8f848261398d565b9350611f03565b866001600160a01b03168b6001600160a01b03161480611ebe57506001600160a01b038b1632145b611eda5760405162461bcd60e51b8152600401610ecb90614bbe565b600254611ef2906001600160a01b03168c30846139e7565b600754611eff908261398d565b6007555b50611f109050828261398d565b915050600083858f8f8f8f604051602001611f309695949392919061481b565b60405160208183030381529060405290507fe8d23d927749ec8e512eb885679c2977d57068839d8cca1a85685dbbea0648f68382604051611f72929190615320565b60405180910390a160a0860151606087015160808801516040517f665305790000000000000000000000000000000000000000000000000000000081526001600160a01b0390931692636653057992611fcf928892600401615490565b600060405180830381600087803b158015611fe957600080fd5b505af1158015611ffd573d6000803e3d6000fd5b5050505050348111156120225760405162461bcd60e51b8152600401610ecb90614a70565b600061202e3483613930565b905080156120b45760008a6001600160a01b03168260405161204f90614818565b60006040518083038185875af1925050503d806000811461208c576040519150601f19603f3d011682016040523d82523d6000602084013e612091565b606091505b50509050806120b25760405162461bcd60e51b8152600401610ecb90614b87565b505b5050505050505050505050505050505050565b6001600160a01b038216600090815260086020908152604080832061ffff871684529091529020606090600183141561215b57805461ffff166121455761ffff80861660009081526009602090815260409182902054915161212e939290921691016152b6565b604051602081830303815290604052915050612428565b805460405161212e9161ffff16906020016152b6565b60028314156121d157805462010000900467ffffffffffffffff166121af5761ffff851660009081526009602090815260409182902054915161212e9262010000900467ffffffffffffffff169101615597565b805460405161212e9162010000900467ffffffffffffffff1690602001615597565b600383141561225c5780546a010000000000000000000090046001600160a01b03166122335761ffff851660009081526009602090815260409182902054915161212e926a010000000000000000000090046001600160a01b03169101614899565b805460405161212e916a010000000000000000000090046001600160a01b031690602001614899565b60048314156123155780547e01000000000000000000000000000000000000000000000000000000000000900461ffff166122dd5761ffff80861660009081526009602090815260409182902054915161212e937e0100000000000000000000000000000000000000000000000000000000000090930490921691016152b6565b805460405161212e917e01000000000000000000000000000000000000000000000000000000000000900461ffff16906020016152b6565b600583141561238257600181015467ffffffffffffffff166123635761ffff851660009081526009602090815260409182902060010154915161212e9267ffffffffffffffff169101615597565b600181015460405161212e9167ffffffffffffffff1690602001615597565b60068314156124105760018101546801000000000000000090046001600160a01b03166123e65761ffff851660009081526009602090815260409182902060010154915161212e926801000000000000000090046001600160a01b03169101614899565b600181015460405161212e916801000000000000000090046001600160a01b031690602001614899565b60405162461bcd60e51b8152600401610ecb90614a02565b9392505050565b61243761392c565b6001600160a01b0316612448612e1e565b6001600160a01b0316146124a3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166124c95760405162461bcd60e51b8152600401610ecb90614acd565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517f33d644987381deff4408951d55afa136f124e22a7810b163b2aaa3ebef770f649061252c908390614899565b60405180910390a150565b60065481565b60006125498787612e56565b60408101519091506001600160a01b031633146125785760405162461bcd60e51b8152600401610ecb90614d0c565b612580613de5565b61ffff8089166000818152600b60209081526040808320875190951683529381528382205460a08701516001600160a01b039081168452600f83528584209484529382528483208a84528252939091209085015181549290931692909167ffffffffffffffff90911611156126075760405162461bcd60e51b8152600401610ecb906151d6565b61ffff8a166000908152600e60205260409081902054600183015491517fb71e0f7100000000000000000000000000000000000000000000000000000000815290916001600160a01b0385169163b71e0f719161266c918b908b908790600401614930565b600060405180830381600087803b15801561268657600080fd5b505af115801561269a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526126e0919081019061421e565b60a081015161ffff8d1660009081526010602052604090205491955014925061271e9150505760405162461bcd60e51b8152600401610ecb906150bf565b866001600160a01b031681606001516001600160a01b0316146127535760405162461bcd60e51b8152600401610ecb90614cd5565b80516080820151606083015160408085015160c086015191517fc2fa48130000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169563c2fa4813956127d5959194909391928e919060040161533d565b600060405180830381600087803b1580156127ef57600080fd5b505af1158015612803573d6000803e3d6000fd5b505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600460205260409020545b919050565b336000908152600f6020908152604080832061ffff88168452825280832086845290915290208054831161289a5760405162461bcd60e51b8152600401610ecb90614da0565b828155600181018290556040517fc5e97f049604c4d8626704341240f021a22cee0d8b66ec306a45344be67733a0906128da9087903390879089906152e2565b60405180910390a15050505050565b6128f161392c565b6001600160a01b0316612902612e1e565b6001600160a01b03161461295d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600481565b6129cc61392c565b6001600160a01b03166129dd612e1e565b6001600160a01b031614612a38576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612a5e5760405162461bcd60e51b8152600401610ecb90614d43565b61ffff8281166000908152600c6020526040902054811610612a925760405162461bcd60e51b8152600401610ecb90614f71565b61ffff8083166000908152600c60209081526040808320805480861660010186167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009091161790819055600b83528184209416835292905281902080546001600160a01b0384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055517f802d55279d51813cb7a9a98e8fd2d7bec5346cb830901c11b85d1650cb857e9a90612b5090849084906152c5565b60405180910390a15050565b612b6461392c565b6001600160a01b0316612b75612e1e565b6001600160a01b031614612bd0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8085166000908152600a60209081526040808320938716835292905220612bfb908383613e23565b507f4a5695eee2a74d548d5f5c485a3de99ace99e3b664c8e30a90f49be6ebb5493284848484604051612c319493929190615438565b60405180910390a150505050565b60026000541415612c97576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556003546001600160a01b03163314612cc65760405162461bcd60e51b8152600401610ecb906149cb565b600754612cd39082613930565b600755600254612ced906001600160a01b03168383613a75565b7f3a20c8c3cd1848485ae8261a52398bb9b26f195b717306b3cf7f058e62c095d5338383604051612d20939291906148ad565b60405180910390a150506001600055565b612d3961392c565b6001600160a01b0316612d4a612e1e565b6001600160a01b031614612da5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff82166000908152600e602052604090205415612dd65760405162461bcd60e51b8152600401610ecb9061511c565b61ffff82166000908152600e602052604090819020829055517f0611bb2107e385b79ec826fff8ecc1c1248a7aae3c875c96668f8cfbf173422090612b50908490849061530c565b6001546001600160a01b031690565b600581565b600e6020526000908152604090205481565b60046020526000908152604090205481565b612e5e613ecd565b6001600160a01b03808316600090815260086020908152604080832061ffff808916808652918452828520835160c0810185528154808416825267ffffffffffffffff6201000082048116838901526a010000000000000000000082048a16838801527e010000000000000000000000000000000000000000000000000000000000009091048416606083015260019092015491821660808201526801000000000000000090910490961660a087015290845260099092529091208251909116612f2b57805461ffff1682525b602082015167ffffffffffffffff16612f5657805462010000900467ffffffffffffffff1660208301525b60408201516001600160a01b0316612f875780546a010000000000000000000090046001600160a01b031660408301525b606082015161ffff16612fc25780547e01000000000000000000000000000000000000000000000000000000000000900461ffff1660608301525b608082015167ffffffffffffffff16612fea57600181015467ffffffffffffffff1660808301525b60a08201516001600160a01b031661301c5760018101546801000000000000000090046001600160a01b031660a08301525b509392505050565b61271081565b600c6020526000908152604090205461ffff1681565b600d60209081526000928352604080842090915290825290205460ff1681565b600f6020908152600093845260408085208252928452828420905282529020805460019091015482565b600b6020908152600092835260408084209091529082529020546001600160a01b031681565b60086020908152600092835260408084209091529082529020805460019091015461ffff8083169267ffffffffffffffff6201000082048116936001600160a01b036a010000000000000000000084048116947e010000000000000000000000000000000000000000000000000000000000009094049093169291811691680100000000000000009091041686565b6001600160a01b031660009081526005602052604090205490565b60106020526000908152604090205481565b61317461392c565b6001600160a01b0316613185612e1e565b6001600160a01b0316146131e0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8083166000908152600d60209081526040808320938516835292905281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fec23bee6f88cfecebb09d6aaaed66f0ce110debc1f61117c8270a7116597df9a90612b50908490849061539e565b613263613f02565b506001600160a01b0383166000908152600f6020908152604080832061ffff86168452825280832084845282529182902082518084019093528054835260010154908201529392505050565b6132b761392c565b6001600160a01b03166132c8612e1e565b6001600160a01b031614613323576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8216600090815260106020526040902054156133545760405162461bcd60e51b8152600401610ecb90614f14565b61ffff821660009081526010602052604090819020829055517f0dad975e1d2fbe771c95cdcc7be9a1e61181de7173abe0a32b8f8f83140873e590612b50908490849061530c565b6133a461392c565b6001600160a01b03166133b5612e1e565b6001600160a01b031614613410576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166134365760405162461bcd60e51b8152600401610ecb90614eb7565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef39061252c908390614899565b6134a161392c565b6001600160a01b03166134b2612e1e565b6001600160a01b03161461350d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166135525760405162461bcd60e51b815260040180806020018281038252602681526020018061568a6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60075481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146136145760405162461bcd60e51b8152600401610ecb90614fce565b6001600160a01b038416600090815260086020908152604080832061ffff89168452909152902060018414156136c1576000613652838501856142fa565b61ffff8089166000908152600c6020526040902054919250908116908216111561368e5760405162461bcd60e51b8152600401610ecb90614e5a565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff919091161781556138e7565b60028414156137185760006136d883850185614707565b825467ffffffffffffffff90911662010000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffff909116178255506138e7565b600384141561377657600061372f83850185614044565b82546001600160a01b039091166a0100000000000000000000027fffff0000000000000000000000000000000000000000ffffffffffffffffffff909116178255506138e7565b600484141561383057600061378d838501856142fa565b61ffff8089166000908152600d602090815260408083209385168352929052205490915060ff16806137c1575061ffff8116155b6137dd5760405162461bcd60e51b8152600401610ecb9061496e565b815461ffff9091167e01000000000000000000000000000000000000000000000000000000000000027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091161781556138e7565b600584141561388857600061384783850185614707565b6001830180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055506138e7565b600684141561241057600061389f83850185614044565b6001830180546001600160a01b0390921668010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff909216919091179055505b7ffc01bf86212a14151d51d1be5c2ac64d67d5ec823dfc6f53298d7ce3f3d3d2528585858560405161391c94939291906148d1565b60405180910390a1505050505050565b3390565b600082821115613987576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015612428576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613a6f908590613afa565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613af5908490613afa565b505050565b6000613b4f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613bab9092919063ffffffff16565b805190915015613af557808060200190516020811015613b6e57600080fd5b5051613af55760405162461bcd60e51b815260040180806020018281038252602a8152602001806156d6602a913960400191505060405180910390fd5b6060613bba8484600085613bc2565b949350505050565b606082471015613c035760405162461bcd60e51b81526004018080602001828103825260268152602001806156b06026913960400191505060405180910390fd5b613c0c85613d3b565b613c5d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613cb957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613c7c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d1b576040519150601f19603f3d011682016040523d82523d6000602084013e613d20565b606091505b5091509150613d30828286613d41565b979650505050505050565b3b151590565b60608315613d50575081612428565b825115613d605782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613daa578181015183820152602001613d92565b50505050905090810190601f168015613dd75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040805160e08101825260008082526020820181905291810182905260608082018390526080820181905260a082019290925260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282613e595760008555613ebd565b82601f10613e90578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555613ebd565b82800160010185558215613ebd579182015b82811115613ebd578235825591602001919060010190613ea2565b50613ec9929150613f19565b5090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b604080518082019091526000808252602082015290565b5b80821115613ec95760008155600101613f1a565b60008135613f3b8161563d565b6001600160a01b031692915050565b60008151613f3b8161563d565b60008083601f840112613f68578182fd5b50813567ffffffffffffffff811115613f7f578182fd5b602083019150836020828501011115613f9757600080fd5b9250929050565b600082601f830112613fae578081fd5b815167ffffffffffffffff811115613fc257fe5b613ff360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016155ed565b818152846020838601011115614007578283fd5b613bba826020830160208701615611565b803561284f81615663565b805161284f81615663565b803561284f81615673565b805161284f81615673565b600060208284031215614055578081fd5b81356140608161563d565b6001600160a01b03169392505050565b60008060408385031215614082578081fd5b823561408d8161563d565b6001600160a01b0316915060208301356140a681615663565b809150509250929050565b6000806000606084860312156140c5578081fd5b83356140d08161563d565b6001600160a01b0316925060208401356140e981615663565b929592945050506040919091013590565b6000806040838503121561410c578182fd5b82356141178161563d565b6001600160a01b0316946020939093013593505050565b60008060008060008060008060008060006101008c8e03121561414f578687fd5b6141588c613f2e565b9a5061416660208d0161402e565b995061417460408d01614018565b985067ffffffffffffffff8060608e0135111561418f578788fd5b61419f8e60608f01358f01613f57565b909950975060808d01358110156141b4578687fd5b6141c48e60808f01358f01613f57565b90975095506141d560a08e01613f2e565b94506141e360c08e01613f2e565b93508060e08e013511156141f5578283fd5b506142068d60e08e01358e01613f57565b81935080925050509295989b509295989b9093969950565b60006020828403121561422f578081fd5b815167ffffffffffffffff80821115614246578283fd5b9083019060e08286031215614259578283fd5b61426360e06155ed565b61426c83614023565b815261427a60208401614023565b602082015261428b60408401614039565b604082015261429c60608401613f4a565b60608201526080830151828111156142b2578485fd5b6142be87828601613f9e565b60808301525060a083015160a082015260c0830151828111156142df578485fd5b6142eb87828601613f9e565b60c08301525095945050505050565b60006020828403121561430b578081fd5b813561242881615663565b60008060408385031215614328578182fd5b823561433381615663565b915060208301356143438161563d565b6001600160a01b0381169150509250929050565b600080600080600080600060a0888a031215614371578081fd5b873561437c81615663565b9650602088013561438c8161563d565b6001600160a01b03169550604088013567ffffffffffffffff808211156143b1578283fd5b6143bd8b838c01613f57565b909750955060608a0135915081151582146143d6578283fd5b909350608089013590808211156143eb578283fd5b506143f88a828b01613f57565b989b979a50959850939692959293505050565b60008060006060848603121561441f578081fd5b833561442a81615663565b9250602084013561443a8161563d565b6001600160a01b038116925050604084013590509250925092565b60008060008060008060a0878903121561446d578384fd5b863561447881615663565b955060208701356144888161563d565b6001600160a01b031694506040870135935060608701359250608087013567ffffffffffffffff8111156144ba578283fd5b6144c689828a01613f57565b979a9699509497509295939492505050565b6000806000806000608086880312156144ef578283fd5b85356144fa81615663565b9450602086013561450a8161563d565b6001600160a01b0316935060408601359250606086013567ffffffffffffffff811115614535578182fd5b61454188828901613f57565b969995985093965092949392505050565b60008060408385031215614564578182fd5b823561456f81615663565b946020939093013593505050565b60008060008060808587031215614592578182fd5b843561459d81615663565b966020860135965060408601359560600135945092505050565b600080604083850312156145c9578182fd5b82356145d481615663565b915060208301356140a681615663565b600080600080606085870312156145f9578182fd5b843561460481615663565b9350602085013561461481615663565b9250604085013567ffffffffffffffff81111561462f578283fd5b61463b87828801613f57565b95989497509550505050565b600080600080600080600060e0888a031215614661578081fd5b873561466c81615663565b9650602088013561467c81615663565b9550604088013561468c81615673565b9450606088013561469c8161563d565b6001600160a01b0390811694506080890135906146b882615663565b90935060a0890135906146ca82615663565b90925060c0890135906146dc8261563d565b8082169250505092959891949750929550565b600060208284031215614700578081fd5b5051919050565b600060208284031215614718578081fd5b813561242881615673565b60008060008060808587031215614738578182fd5b843560ff81168114614748578283fd5b935060208501356147588161563d565b6001600160a01b0390811693506040860135906147748261563d565b94979396509093169360600135925050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b600081518084526147e6816020860160208601615611565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b90565b60007fffffffffffffffff0000000000000000000000000000000000000000000000008860c01b1682527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008760601b1660088301528486601c840137848201601c81018281528486823750909201601c019182525095945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b0386168252846020830152606060408301526148fa606083018486614786565b9695505050505050565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b60008582526060602083015261494a606083018587614786565b905082604083015295945050505050565b60006020825261242860208301846147ce565b60208082526026908201527f4c617965725a65726f3a20696e76616c6964206f7574626f756e642070726f6f60408201527f6620747970650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f4c617965725a65726f3a206f6e6c792074726561737572790000000000000000604082015260600190565b6020808252601e908201527f4c617965725a65726f3a20496e76616c696420636f6e66696720747970650000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a207769746864726177206661696c6564000000000000604082015260600190565b60208082526025908201527f4c617965725a65726f3a206e6f7420656e6f756768206e617469766520666f7260408201527f2066656573000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f4c617965725a65726f3a205f6c617965725a65726f546f6b656e2063616e6e6f60408201527f74206265207a65726f2061646472657373000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a20696e76616c69642072656c6179657220616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4c617965725a65726f3a206661696c656420746f20726566756e640000000000604082015260600190565b6020808252602b908201527f4c617965725a65726f3a206d75737420626520706169642062792073656e646560408201527f72206f72206f726967696e000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4c617965725a65726f3a20636861696e496420646f6573206e6f74206578697360408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4c617965725a65726f3a20696e76616c6964206f7261636c652061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f4c617965725a65726f3a20696e76616c69642064737420616464726573730000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a20696e76616c69642072656c61796572000000000000604082015260600190565b60208082526029908201527f4c617965725a65726f3a206c6962726172792063616e6e6f74206265207a657260408201527f6f20616464726573730000000000000000000000000000000000000000000000606082015260800190565b60208082526043908201527f4c617965725a65726f3a206f7261636c6520646174612063616e206f6e6c792060408201527f75706461746520696620697420686173206d6f726520636f6e6669726d61746960608201527f6f6e730000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526017908201527f4c617965725a65726f3a6f6e6c79207472656173757279000000000000000000604082015260600190565b60208082526030908201527f4c617965725a65726f3a20696e76616c696420696e626f756e642070726f6f6660408201527f206c6962726172792076657273696f6e00000000000000000000000000000000606082015260800190565b6020808252602a908201527f4c617965725a65726f3a2074726561737572792063616e6e6f74206265207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4c617965725a65726f3a2072656d6f746520756c6e20616c726561647920736560408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a2063616e206e6f7420616464206e6577206c6962726160408201527f7279000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f4c617965725a65726f3a206f6e6c7920656e64706f696e740000000000000000604082015260600190565b6020808252602e908201527f4c617965725a65726f3a20696e76616c6964206f7574626f756e6420626c6f6360408201527f6b20636f6e6669726d6174696f6e000000000000000000000000000000000000606082015260800190565b60208082526024908201527f4c617965725a65726f3a20756e737570706f727465642077697468647261772060408201527f7479706500000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4c617965725a65726f3a205f7061636b65742e756c6e4164647265737320697360408201527f20696e76616c6964000000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4c617965725a65726f3a2072656d6f746520636861696e20616464726573732060408201527f73697a6520616c72656164792073657400000000000000000000000000000000606082015260800190565b6020808252602d908201527f4c617965725a65726f3a20696e76616c696420696e626f756e6420626c6f636b60408201527f20636f6e6669726d6174696f6e00000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4c617965725a65726f3a206e6f7420656e6f75676820626c6f636b20636f6e6660408201527f69726d6174696f6e730000000000000000000000000000000000000000000000606082015260800190565b600060c08201905061ffff808451168352602084015167ffffffffffffffff8082166020860152604086015191506001600160a01b0380831660408701528360608801511660608701528160808801511660808701528060a08801511660a08701525050505092915050565b815181526020918201519181019190915260400190565b61ffff91909116815260200190565b61ffff9290921682526001600160a01b0316602082015260400190565b61ffff9490941684526001600160a01b039290921660208401526040830152606082015260800190565b61ffff929092168252602082015260400190565b600061ffff8416825260406020830152613bba60408301846147ce565b600061ffff8816825260c0602083015261535a60c08301886147ce565b6001600160a01b038716604084015267ffffffffffffffff8616606084015284608084015282810360a084015261539181856147ce565b9998505050505050505050565b61ffff92831681529116602082015260400190565b600061ffff80891683528088166020840152506001600160a01b038616604083015284606083015260a060808301526153f060a083018486614786565b98975050505050505050565b600061ffff80881683528087166020840152506001600160a01b038516604083015283606083015260a06080830152613d3060a08301846147ce565b600061ffff8087168352808616602084015250606060408301526148fa606083018486614786565b600061ffff80861683528085166020840152506060604083015261548760608301846147ce565b95945050505050565b61ffff938416815291909216602082015267ffffffffffffffff909116604082015260600190565b61ffff9788168152958716602087015267ffffffffffffffff9490941660408601526001600160a01b039283166060860152908516608085015290931660a083015290911660c082015260e00190565b61ffff968716815267ffffffffffffffff95861660208201526001600160a01b03948516604082015292909516606083015290921660808301529190911660a082015260c00190565b600061ffff808816835267ffffffffffffffff8716602084015280861660408401525060806060830152613d30608083018486614786565b918252602082015260400190565b67ffffffffffffffff91909116815260200190565b60ff91909116815260200190565b60ff9590951685526001600160a01b03938416602086015291831660408501529091166060830152608082015260a00190565b60405181810167ffffffffffffffff8111828210171561560957fe5b604052919050565b60005b8381101561562c578181015183820152602001615614565b83811115613a6f5750506000910152565b74ffffffffffffffffffffffffffffffffffffffffff8116811461566057600080fd5b50565b61ffff8116811461566057600080fd5b67ffffffffffffffff8116811461566057600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212207d21b80caaafb404a85f37203bf2affa26f549a98a557b0a0d19d029f0bd45eb64736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061031e5760003560e01c80638317814a116101a5578063d56bc64b116100ec578063ebfa08e911610095578063f2fde38b1161006f578063f2fde38b14610d1c578063f47a5feb14610d56578063f8e1734c14610d85578063f9dd8e0f14610dbf5761031e565b8063ebfa08e914610c61578063ed28580a14610ca8578063f0f4426014610ce25761031e565b8063e6108a82116100c6578063e6108a8214610bb3578063ea216c2114610bed578063eb0d4c3114610c275761031e565b8063d56bc64b14610b05578063db00719b14610b3f578063ddfdef5a14610b795761031e565b8063a183608c1161014e578063b77d22ad11610128578063b77d22ad14610a48578063b8e7e3e014610a77578063d543c77414610abe5761031e565b8063a183608c14610998578063a4662222146109d2578063abe685cd14610a195761031e565b80638da5cb5b1161017f5780638da5cb5b14610900578063904d3b8d1461092f578063959f59431461095e5761031e565b80638317814a146108525780638525b7111461088c57806387078f9f146108c65761031e565b80634d0ca1b4116102695780635e280f1111610212578063715018a6116101ec578063715018a6146107ba5780638140666e146107e95780638207f79d146108185761031e565b80635e280f111461071757806361aa19da14610746578063704316e5146107805761031e565b806352d3b5001161024357806352d3b500146106745780635b5a2678146106ae5780635c011531146106dd5761031e565b80634d0ca1b4146105f85780634d3a0f7c1461062757806352d2871f1461063a5761031e565b80632cfacb06116102cb57806331bd2430116102a557806331bd24301461055257806340a7bb101461058157806349148c37146105c95761031e565b80632cfacb061461049b5780632e9959ec146104ca5780632f813464146105065761031e565b806318da0011116102fc57806318da0011146103eb57806322c107761461041a5780632a819bbf146104545761031e565b806302e72c631461032357806307b9ca7c14610373578063096607f8146103af575b600080fd5b34801561032f57600080fd5b50d3801561033c57600080fd5b50d2801561034957600080fd5b5061035d610358366004614044565b610dee565b60405161036a9190614927565b60405180910390f35b34801561037f57600080fd5b50d3801561038c57600080fd5b50d2801561039957600080fd5b506103a2610e00565b60405161036a9190614899565b3480156103bb57600080fd5b50d380156103c857600080fd5b50d280156103d557600080fd5b506103e96103e4366004614647565b610e0f565b005b3480156103f757600080fd5b50d3801561040457600080fd5b50d2801561041157600080fd5b506103a2611175565b34801561042657600080fd5b50d3801561043357600080fd5b50d2801561044057600080fd5b506103e961044f366004614723565b611184565b34801561046057600080fd5b50d3801561046d57600080fd5b50d2801561047a57600080fd5b5061048e6104893660046145b7565b61137d565b60405161036a919061495b565b3480156104a757600080fd5b50d380156104b457600080fd5b50d280156104c157600080fd5b5061035d61143f565b3480156104d657600080fd5b50d380156104e357600080fd5b50d280156104f057600080fd5b506104f9611444565b60405161036a91906155ac565b34801561051257600080fd5b50d3801561051f57600080fd5b50d2801561052c57600080fd5b5061054061053b3660046142fa565b611449565b60405161036a96959493929190615508565b34801561055e57600080fd5b50d3801561056b57600080fd5b50d2801561057857600080fd5b5061035d6114cd565b34801561058d57600080fd5b50d3801561059a57600080fd5b50d280156105a757600080fd5b506105bb6105b6366004614357565b6114d2565b60405161036a929190615589565b3480156105d557600080fd5b50d380156105e257600080fd5b50d280156105ef57600080fd5b5061035d61189c565b34801561060457600080fd5b50d3801561061157600080fd5b50d2801561061e57600080fd5b506104f96118a1565b6103e961063536600461412e565b6118a6565b34801561064657600080fd5b50d3801561065357600080fd5b50d2801561066057600080fd5b5061048e61066f36600461440b565b6120c7565b34801561068057600080fd5b50d3801561068d57600080fd5b50d2801561069a57600080fd5b506103e96106a9366004614044565b61242f565b3480156106ba57600080fd5b50d380156106c757600080fd5b50d280156106d457600080fd5b5061035d612537565b3480156106e957600080fd5b50d380156106f657600080fd5b50d2801561070357600080fd5b506103e9610712366004614455565b61253d565b34801561072357600080fd5b50d3801561073057600080fd5b50d2801561073d57600080fd5b506103a2612811565b34801561075257600080fd5b50d3801561075f57600080fd5b50d2801561076c57600080fd5b5061035d61077b366004614044565b612835565b34801561078c57600080fd5b50d3801561079957600080fd5b50d280156107a657600080fd5b506103e96107b536600461457d565b612854565b3480156107c657600080fd5b50d380156107d357600080fd5b50d280156107e057600080fd5b506103e96128e9565b3480156107f557600080fd5b50d3801561080257600080fd5b50d2801561080f57600080fd5b5061035d6129bf565b34801561082457600080fd5b50d3801561083157600080fd5b50d2801561083e57600080fd5b506103e961084d366004614316565b6129c4565b34801561085e57600080fd5b50d3801561086b57600080fd5b50d2801561087857600080fd5b506103e96108873660046145e4565b612b5c565b34801561089857600080fd5b50d380156108a557600080fd5b50d280156108b257600080fd5b506103e96108c13660046140fa565b612c3f565b3480156108d257600080fd5b50d380156108df57600080fd5b50d280156108ec57600080fd5b506103e96108fb366004614552565b612d31565b34801561090c57600080fd5b50d3801561091957600080fd5b50d2801561092657600080fd5b506103a2612e1e565b34801561093b57600080fd5b50d3801561094857600080fd5b50d2801561095557600080fd5b5061035d612e2d565b34801561096a57600080fd5b50d3801561097757600080fd5b50d2801561098457600080fd5b5061035d6109933660046142fa565b612e32565b3480156109a457600080fd5b50d380156109b157600080fd5b50d280156109be57600080fd5b5061035d6109cd366004614044565b612e44565b3480156109de57600080fd5b50d380156109eb57600080fd5b50d280156109f857600080fd5b50610a0c610a07366004614316565b612e56565b60405161036a9190615233565b348015610a2557600080fd5b50d38015610a3257600080fd5b50d28015610a3f57600080fd5b5061035d613024565b348015610a5457600080fd5b50d38015610a6157600080fd5b50d28015610a6e57600080fd5b5061035d611444565b348015610a8357600080fd5b50d38015610a9057600080fd5b50d28015610a9d57600080fd5b50610ab1610aac3660046142fa565b61302a565b60405161036a91906152b6565b348015610aca57600080fd5b50d38015610ad757600080fd5b50d28015610ae457600080fd5b50610af8610af33660046145b7565b613040565b60405161036a9190614904565b348015610b1157600080fd5b50d38015610b1e57600080fd5b50d28015610b2b57600080fd5b506105bb610b3a3660046140b1565b613060565b348015610b4b57600080fd5b50d38015610b5857600080fd5b50d28015610b6557600080fd5b506103a2610b743660046145b7565b61308a565b348015610b8557600080fd5b50d38015610b9257600080fd5b50d28015610b9f57600080fd5b50610540610bae366004614070565b6130b0565b348015610bbf57600080fd5b50d38015610bcc57600080fd5b50d28015610bd957600080fd5b5061035d610be8366004614044565b61313f565b348015610bf957600080fd5b50d38015610c0657600080fd5b50d28015610c1357600080fd5b5061035d610c223660046142fa565b61315a565b348015610c3357600080fd5b50d38015610c4057600080fd5b50d28015610c4d57600080fd5b506103e9610c5c3660046145b7565b61316c565b348015610c6d57600080fd5b50d38015610c7a57600080fd5b50d28015610c8757600080fd5b50610c9b610c963660046140b1565b61325b565b60405161036a919061529f565b348015610cb457600080fd5b50d38015610cc157600080fd5b50d28015610cce57600080fd5b506103e9610cdd366004614552565b6132af565b348015610cee57600080fd5b50d38015610cfb57600080fd5b50d28015610d0857600080fd5b506103e9610d17366004614044565b61339c565b348015610d2857600080fd5b50d38015610d3557600080fd5b50d28015610d4257600080fd5b506103e9610d51366004614044565b613499565b348015610d6257600080fd5b50d38015610d6f57600080fd5b50d28015610d7c57600080fd5b5061035d6135c6565b348015610d9157600080fd5b50d38015610d9e57600080fd5b50d28015610dab57600080fd5b506103e9610dba3660046144d8565b6135cc565b348015610dcb57600080fd5b50d38015610dd857600080fd5b50d28015610de557600080fd5b506104f961189c565b60056020526000908152604090205481565b6002546001600160a01b031681565b610e1761392c565b6001600160a01b0316610e28612e1e565b6001600160a01b031614610e83576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8088166000908152600c6020526040902054811690871611801590610eaf575060008661ffff16115b610ed45760405162461bcd60e51b8152600401610ecb90614e5a565b60405180910390fd5b60008567ffffffffffffffff1611610efe5760405162461bcd60e51b8152600401610ecb90615179565b6001600160a01b038416610f245760405162461bcd60e51b8152600401610ecb90614b2a565b61ffff8088166000908152600d602090815260408083209387168352929052205460ff16610f645760405162461bcd60e51b8152600401610ecb9061496e565b60008261ffff1611610f885760405162461bcd60e51b8152600401610ecb90615005565b6001600160a01b038116610fae5760405162461bcd60e51b8152600401610ecb90614c78565b6040518060c001604052808761ffff1681526020018667ffffffffffffffff168152602001856001600160a01b031681526020018461ffff1681526020018361ffff1667ffffffffffffffff168152602001826001600160a01b0316815250600960008961ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001600a6101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600001601e6101000a81548161ffff021916908361ffff16021790555060808201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160010160086101000a8154816001600160a01b0302191690836001600160a01b031602179055509050507f45bb8a2b6b05457ff80b84be5bf06f2d05069fa8099fcb9d8e34149654b4d5c28787878787878760405161116497969594939291906154b8565b60405180910390a150505050505050565b6003546001600160a01b031681565b600260005414156111dc576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560ff8416611228576003546001600160a01b031633146112135760405162461bcd60e51b8152600401610ecb90614e23565b6006546112209082613930565b6006556112b6565b60ff841660011415611263573360009081526004602052604090205461124e9082613930565b336000908152600460205260409020556112b6565b60ff84166002141561129e57336000908152600560205260409020546112899082613930565b336000908152600560205260409020556112b6565b60405162461bcd60e51b8152600401610ecb90615062565b6000826001600160a01b0316826040516112cf90614818565b60006040518083038185875af1925050503d806000811461130c576040519150601f19603f3d011682016040523d82523d6000602084013e611311565b606091505b50509050806113325760405162461bcd60e51b8152600401610ecb90614a39565b7f163adce0473e267e1db8ecb524c0fcdceda62c3e6f231966bbb252e01043253785853386866040516113699594939291906155ba565b60405180910390a150506001600055505050565b600a6020908152600092835260408084208252918352918190208054825160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f8101859004850282018501909352828152929091908301828280156114375780601f1061140c57610100808354040283529160200191611437565b820191906000526020600020905b81548152906001019060200180831161141a57829003601f168201915b505050505081565b600381565b600181565b6009602052600090815260409020805460019091015461ffff8083169267ffffffffffffffff6201000082048116936001600160a01b036a010000000000000000000084048116947e010000000000000000000000000000000000000000000000000000000000009094049093169291811691680100000000000000009091041686565b600681565b604080516020601f840181900481028201810190925282815260009182918a918a918991859190899089908190840183828082843760009201829052509394506115229250879150869050612e56565b905060008251600014156116925761ffff8681166000908152600a60209081526040808320606087015190941683529281528282208054845160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f8101849004840282018401909552848152929390918301828280156115f75780601f106115cc576101008083540402835291602001916115f7565b820191906000526020600020905b8154815290600101906020018083116115da57829003601f168201915b5050505050905082604001516001600160a01b031663e54a22158885606001518989866040518663ffffffff1660e01b815260040161163a9594939291906153fc565b60206040518083038186803b15801561165257600080fd5b505afa158015611666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168a91906146ef565b915050611721565b81604001516001600160a01b031663e54a22158784606001518888886040518663ffffffff1660e01b81526004016116ce9594939291906153fc565b60206040518083038186803b1580156116e657600080fd5b505afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e91906146ef565b90505b60a082015160608301516040517f0b4d51070000000000000000000000000000000000000000000000000000000081526000926001600160a01b031691630b4d510791611772918b9160040161539e565b60206040518083038186803b15801561178a57600080fd5b505afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c291906146ef565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316635cbbbd758e85856040518463ffffffff1660e01b815260040161180b9392919061490f565b60206040518083038186803b15801561182357600080fd5b505afa158015611837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185b91906146ef565b90508c61186b5780995089611870565b809850885b506118879050816118818b8561398d565b9061398d565b98505050505050505097509795505050505050565b600281565b600081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146118ee5760405162461bcd60e51b8152600401610ecb90614fce565b60006118fa8a8d612e56565b61ffff8b166000908152601060205260409020549091508c908c908c906119335760405162461bcd60e51b8152600401610ecb90614c1b565b6000808560a001516001600160a01b0316630b4d51078488606001516040518363ffffffff1660e01b815260040161196c92919061539e565b60206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc91906146ef565b60a08701516001600160a01b03166000908152600460205260409020549091506119e6908261398d565b60a08701516001600160a01b031660009081526004602052604090819020919091558601518b9088611c095761ffff8581166000908152600a6020908152604080832060608d015190941683529281528282208054845160026001831615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190921691909104601f810184900484028201840190955284815292939091830182828015611ad95780601f10611aae57610100808354040283529160200191611ad9565b820191906000526020600020905b815481529060010190602001808311611abc57829003601f168201915b5050505060608b01516040517fe54a22150000000000000000000000000000000000000000000000000000000081529293506001600160a01b0385169263e54a22159250611b31918a918d90899088906004016153fc565b60206040518083038186803b158015611b4957600080fd5b505afa158015611b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8191906146ef565b60608a01516040517f3a5fb82a0000000000000000000000000000000000000000000000000000000081529196506001600160a01b03841691633a5fb82a91611bd1918a91908690600401615460565b600060405180830381600087803b158015611beb57600080fd5b505af1158015611bff573d6000803e3d6000fd5b5050505050611d18565b806001600160a01b031663e54a2215868a606001518a868f8f6040518763ffffffff1660e01b8152600401611c43969594939291906153b3565b60206040518083038186803b158015611c5b57600080fd5b505afa158015611c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9391906146ef565b60608901516040517f3a5fb82a0000000000000000000000000000000000000000000000000000000081529195506001600160a01b03831691633a5fb82a91611ce5918991908f908f90600401615438565b600060405180830381600087803b158015611cff57600080fd5b505af1158015611d13573d6000803e3d6000fd5b505050505b6040808901516001600160a01b0316600090815260056020522054611d3d908561398d565b6040808a01516001600160a01b03166000908152600560205281902091909155606089015190517fb8a7262132db1f61626604a31c3de81dc1a5bb0f1511dfa70d626ab1b88b52c291611d979188918a918f908f90615551565b60405180910390a150600090506001600160a01b038a161580611dc357506002546001600160a01b0316155b6003546040517f5cbbbd750000000000000000000000000000000000000000000000000000000081529192506000916001600160a01b0390911690635cbbbd7590611e17908515908890889060040161490f565b60206040518083038186803b158015611e2f57600080fd5b505afa158015611e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6791906146ef565b90508015611f03578115611e9657600654611e82908261398d565b600655611e8f848261398d565b9350611f03565b866001600160a01b03168b6001600160a01b03161480611ebe57506001600160a01b038b1632145b611eda5760405162461bcd60e51b8152600401610ecb90614bbe565b600254611ef2906001600160a01b03168c30846139e7565b600754611eff908261398d565b6007555b50611f109050828261398d565b915050600083858f8f8f8f604051602001611f309695949392919061481b565b60405160208183030381529060405290507fe8d23d927749ec8e512eb885679c2977d57068839d8cca1a85685dbbea0648f68382604051611f72929190615320565b60405180910390a160a0860151606087015160808801516040517f665305790000000000000000000000000000000000000000000000000000000081526001600160a01b0390931692636653057992611fcf928892600401615490565b600060405180830381600087803b158015611fe957600080fd5b505af1158015611ffd573d6000803e3d6000fd5b5050505050348111156120225760405162461bcd60e51b8152600401610ecb90614a70565b600061202e3483613930565b905080156120b45760008a6001600160a01b03168260405161204f90614818565b60006040518083038185875af1925050503d806000811461208c576040519150601f19603f3d011682016040523d82523d6000602084013e612091565b606091505b50509050806120b25760405162461bcd60e51b8152600401610ecb90614b87565b505b5050505050505050505050505050505050565b6001600160a01b038216600090815260086020908152604080832061ffff871684529091529020606090600183141561215b57805461ffff166121455761ffff80861660009081526009602090815260409182902054915161212e939290921691016152b6565b604051602081830303815290604052915050612428565b805460405161212e9161ffff16906020016152b6565b60028314156121d157805462010000900467ffffffffffffffff166121af5761ffff851660009081526009602090815260409182902054915161212e9262010000900467ffffffffffffffff169101615597565b805460405161212e9162010000900467ffffffffffffffff1690602001615597565b600383141561225c5780546a010000000000000000000090046001600160a01b03166122335761ffff851660009081526009602090815260409182902054915161212e926a010000000000000000000090046001600160a01b03169101614899565b805460405161212e916a010000000000000000000090046001600160a01b031690602001614899565b60048314156123155780547e01000000000000000000000000000000000000000000000000000000000000900461ffff166122dd5761ffff80861660009081526009602090815260409182902054915161212e937e0100000000000000000000000000000000000000000000000000000000000090930490921691016152b6565b805460405161212e917e01000000000000000000000000000000000000000000000000000000000000900461ffff16906020016152b6565b600583141561238257600181015467ffffffffffffffff166123635761ffff851660009081526009602090815260409182902060010154915161212e9267ffffffffffffffff169101615597565b600181015460405161212e9167ffffffffffffffff1690602001615597565b60068314156124105760018101546801000000000000000090046001600160a01b03166123e65761ffff851660009081526009602090815260409182902060010154915161212e926801000000000000000090046001600160a01b03169101614899565b600181015460405161212e916801000000000000000090046001600160a01b031690602001614899565b60405162461bcd60e51b8152600401610ecb90614a02565b9392505050565b61243761392c565b6001600160a01b0316612448612e1e565b6001600160a01b0316146124a3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166124c95760405162461bcd60e51b8152600401610ecb90614acd565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517f33d644987381deff4408951d55afa136f124e22a7810b163b2aaa3ebef770f649061252c908390614899565b60405180910390a150565b60065481565b60006125498787612e56565b60408101519091506001600160a01b031633146125785760405162461bcd60e51b8152600401610ecb90614d0c565b612580613de5565b61ffff8089166000818152600b60209081526040808320875190951683529381528382205460a08701516001600160a01b039081168452600f83528584209484529382528483208a84528252939091209085015181549290931692909167ffffffffffffffff90911611156126075760405162461bcd60e51b8152600401610ecb906151d6565b61ffff8a166000908152600e60205260409081902054600183015491517fb71e0f7100000000000000000000000000000000000000000000000000000000815290916001600160a01b0385169163b71e0f719161266c918b908b908790600401614930565b600060405180830381600087803b15801561268657600080fd5b505af115801561269a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526126e0919081019061421e565b60a081015161ffff8d1660009081526010602052604090205491955014925061271e9150505760405162461bcd60e51b8152600401610ecb906150bf565b866001600160a01b031681606001516001600160a01b0316146127535760405162461bcd60e51b8152600401610ecb90614cd5565b80516080820151606083015160408085015160c086015191517fc2fa48130000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169563c2fa4813956127d5959194909391928e919060040161533d565b600060405180830381600087803b1580156127ef57600080fd5b505af1158015612803573d6000803e3d6000fd5b505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600460205260409020545b919050565b336000908152600f6020908152604080832061ffff88168452825280832086845290915290208054831161289a5760405162461bcd60e51b8152600401610ecb90614da0565b828155600181018290556040517fc5e97f049604c4d8626704341240f021a22cee0d8b66ec306a45344be67733a0906128da9087903390879089906152e2565b60405180910390a15050505050565b6128f161392c565b6001600160a01b0316612902612e1e565b6001600160a01b03161461295d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600481565b6129cc61392c565b6001600160a01b03166129dd612e1e565b6001600160a01b031614612a38576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612a5e5760405162461bcd60e51b8152600401610ecb90614d43565b61ffff8281166000908152600c6020526040902054811610612a925760405162461bcd60e51b8152600401610ecb90614f71565b61ffff8083166000908152600c60209081526040808320805480861660010186167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00009091161790819055600b83528184209416835292905281902080546001600160a01b0384167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055517f802d55279d51813cb7a9a98e8fd2d7bec5346cb830901c11b85d1650cb857e9a90612b5090849084906152c5565b60405180910390a15050565b612b6461392c565b6001600160a01b0316612b75612e1e565b6001600160a01b031614612bd0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8085166000908152600a60209081526040808320938716835292905220612bfb908383613e23565b507f4a5695eee2a74d548d5f5c485a3de99ace99e3b664c8e30a90f49be6ebb5493284848484604051612c319493929190615438565b60405180910390a150505050565b60026000541415612c97576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556003546001600160a01b03163314612cc65760405162461bcd60e51b8152600401610ecb906149cb565b600754612cd39082613930565b600755600254612ced906001600160a01b03168383613a75565b7f3a20c8c3cd1848485ae8261a52398bb9b26f195b717306b3cf7f058e62c095d5338383604051612d20939291906148ad565b60405180910390a150506001600055565b612d3961392c565b6001600160a01b0316612d4a612e1e565b6001600160a01b031614612da5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff82166000908152600e602052604090205415612dd65760405162461bcd60e51b8152600401610ecb9061511c565b61ffff82166000908152600e602052604090819020829055517f0611bb2107e385b79ec826fff8ecc1c1248a7aae3c875c96668f8cfbf173422090612b50908490849061530c565b6001546001600160a01b031690565b600581565b600e6020526000908152604090205481565b60046020526000908152604090205481565b612e5e613ecd565b6001600160a01b03808316600090815260086020908152604080832061ffff808916808652918452828520835160c0810185528154808416825267ffffffffffffffff6201000082048116838901526a010000000000000000000082048a16838801527e010000000000000000000000000000000000000000000000000000000000009091048416606083015260019092015491821660808201526801000000000000000090910490961660a087015290845260099092529091208251909116612f2b57805461ffff1682525b602082015167ffffffffffffffff16612f5657805462010000900467ffffffffffffffff1660208301525b60408201516001600160a01b0316612f875780546a010000000000000000000090046001600160a01b031660408301525b606082015161ffff16612fc25780547e01000000000000000000000000000000000000000000000000000000000000900461ffff1660608301525b608082015167ffffffffffffffff16612fea57600181015467ffffffffffffffff1660808301525b60a08201516001600160a01b031661301c5760018101546801000000000000000090046001600160a01b031660a08301525b509392505050565b61271081565b600c6020526000908152604090205461ffff1681565b600d60209081526000928352604080842090915290825290205460ff1681565b600f6020908152600093845260408085208252928452828420905282529020805460019091015482565b600b6020908152600092835260408084209091529082529020546001600160a01b031681565b60086020908152600092835260408084209091529082529020805460019091015461ffff8083169267ffffffffffffffff6201000082048116936001600160a01b036a010000000000000000000084048116947e010000000000000000000000000000000000000000000000000000000000009094049093169291811691680100000000000000009091041686565b6001600160a01b031660009081526005602052604090205490565b60106020526000908152604090205481565b61317461392c565b6001600160a01b0316613185612e1e565b6001600160a01b0316146131e0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8083166000908152600d60209081526040808320938516835292905281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fec23bee6f88cfecebb09d6aaaed66f0ce110debc1f61117c8270a7116597df9a90612b50908490849061539e565b613263613f02565b506001600160a01b0383166000908152600f6020908152604080832061ffff86168452825280832084845282529182902082518084019093528054835260010154908201529392505050565b6132b761392c565b6001600160a01b03166132c8612e1e565b6001600160a01b031614613323576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61ffff8216600090815260106020526040902054156133545760405162461bcd60e51b8152600401610ecb90614f14565b61ffff821660009081526010602052604090819020829055517f0dad975e1d2fbe771c95cdcc7be9a1e61181de7173abe0a32b8f8f83140873e590612b50908490849061530c565b6133a461392c565b6001600160a01b03166133b5612e1e565b6001600160a01b031614613410576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166134365760405162461bcd60e51b8152600401610ecb90614eb7565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383161790556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef39061252c908390614899565b6134a161392c565b6001600160a01b03166134b2612e1e565b6001600160a01b03161461350d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166135525760405162461bcd60e51b815260040180806020018281038252602681526020018061568a6026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60075481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146136145760405162461bcd60e51b8152600401610ecb90614fce565b6001600160a01b038416600090815260086020908152604080832061ffff89168452909152902060018414156136c1576000613652838501856142fa565b61ffff8089166000908152600c6020526040902054919250908116908216111561368e5760405162461bcd60e51b8152600401610ecb90614e5a565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff919091161781556138e7565b60028414156137185760006136d883850185614707565b825467ffffffffffffffff90911662010000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffff909116178255506138e7565b600384141561377657600061372f83850185614044565b82546001600160a01b039091166a0100000000000000000000027fffff0000000000000000000000000000000000000000ffffffffffffffffffff909116178255506138e7565b600484141561383057600061378d838501856142fa565b61ffff8089166000908152600d602090815260408083209385168352929052205490915060ff16806137c1575061ffff8116155b6137dd5760405162461bcd60e51b8152600401610ecb9061496e565b815461ffff9091167e01000000000000000000000000000000000000000000000000000000000000027dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091161781556138e7565b600584141561388857600061384783850185614707565b6001830180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055506138e7565b600684141561241057600061389f83850185614044565b6001830180546001600160a01b0390921668010000000000000000027fffffffff0000000000000000000000000000000000000000ffffffffffffffff909216919091179055505b7ffc01bf86212a14151d51d1be5c2ac64d67d5ec823dfc6f53298d7ce3f3d3d2528585858560405161391c94939291906148d1565b60405180910390a1505050505050565b3390565b600082821115613987576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015612428576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613a6f908590613afa565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052613af5908490613afa565b505050565b6000613b4f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613bab9092919063ffffffff16565b805190915015613af557808060200190516020811015613b6e57600080fd5b5051613af55760405162461bcd60e51b815260040180806020018281038252602a8152602001806156d6602a913960400191505060405180910390fd5b6060613bba8484600085613bc2565b949350505050565b606082471015613c035760405162461bcd60e51b81526004018080602001828103825260268152602001806156b06026913960400191505060405180910390fd5b613c0c85613d3b565b613c5d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613cb957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613c7c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d1b576040519150601f19603f3d011682016040523d82523d6000602084013e613d20565b606091505b5091509150613d30828286613d41565b979650505050505050565b3b151590565b60608315613d50575081612428565b825115613d605782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613daa578181015183820152602001613d92565b50505050905090810190601f168015613dd75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040805160e08101825260008082526020820181905291810182905260608082018390526080820181905260a082019290925260c081019190915290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282613e595760008555613ebd565b82601f10613e90578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555613ebd565b82800160010185558215613ebd579182015b82811115613ebd578235825591602001919060010190613ea2565b50613ec9929150613f19565b5090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b604080518082019091526000808252602082015290565b5b80821115613ec95760008155600101613f1a565b60008135613f3b8161563d565b6001600160a01b031692915050565b60008151613f3b8161563d565b60008083601f840112613f68578182fd5b50813567ffffffffffffffff811115613f7f578182fd5b602083019150836020828501011115613f9757600080fd5b9250929050565b600082601f830112613fae578081fd5b815167ffffffffffffffff811115613fc257fe5b613ff360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016155ed565b818152846020838601011115614007578283fd5b613bba826020830160208701615611565b803561284f81615663565b805161284f81615663565b803561284f81615673565b805161284f81615673565b600060208284031215614055578081fd5b81356140608161563d565b6001600160a01b03169392505050565b60008060408385031215614082578081fd5b823561408d8161563d565b6001600160a01b0316915060208301356140a681615663565b809150509250929050565b6000806000606084860312156140c5578081fd5b83356140d08161563d565b6001600160a01b0316925060208401356140e981615663565b929592945050506040919091013590565b6000806040838503121561410c578182fd5b82356141178161563d565b6001600160a01b0316946020939093013593505050565b60008060008060008060008060008060006101008c8e03121561414f578687fd5b6141588c613f2e565b9a5061416660208d0161402e565b995061417460408d01614018565b985067ffffffffffffffff8060608e0135111561418f578788fd5b61419f8e60608f01358f01613f57565b909950975060808d01358110156141b4578687fd5b6141c48e60808f01358f01613f57565b90975095506141d560a08e01613f2e565b94506141e360c08e01613f2e565b93508060e08e013511156141f5578283fd5b506142068d60e08e01358e01613f57565b81935080925050509295989b509295989b9093969950565b60006020828403121561422f578081fd5b815167ffffffffffffffff80821115614246578283fd5b9083019060e08286031215614259578283fd5b61426360e06155ed565b61426c83614023565b815261427a60208401614023565b602082015261428b60408401614039565b604082015261429c60608401613f4a565b60608201526080830151828111156142b2578485fd5b6142be87828601613f9e565b60808301525060a083015160a082015260c0830151828111156142df578485fd5b6142eb87828601613f9e565b60c08301525095945050505050565b60006020828403121561430b578081fd5b813561242881615663565b60008060408385031215614328578182fd5b823561433381615663565b915060208301356143438161563d565b6001600160a01b0381169150509250929050565b600080600080600080600060a0888a031215614371578081fd5b873561437c81615663565b9650602088013561438c8161563d565b6001600160a01b03169550604088013567ffffffffffffffff808211156143b1578283fd5b6143bd8b838c01613f57565b909750955060608a0135915081151582146143d6578283fd5b909350608089013590808211156143eb578283fd5b506143f88a828b01613f57565b989b979a50959850939692959293505050565b60008060006060848603121561441f578081fd5b833561442a81615663565b9250602084013561443a8161563d565b6001600160a01b038116925050604084013590509250925092565b60008060008060008060a0878903121561446d578384fd5b863561447881615663565b955060208701356144888161563d565b6001600160a01b031694506040870135935060608701359250608087013567ffffffffffffffff8111156144ba578283fd5b6144c689828a01613f57565b979a9699509497509295939492505050565b6000806000806000608086880312156144ef578283fd5b85356144fa81615663565b9450602086013561450a8161563d565b6001600160a01b0316935060408601359250606086013567ffffffffffffffff811115614535578182fd5b61454188828901613f57565b969995985093965092949392505050565b60008060408385031215614564578182fd5b823561456f81615663565b946020939093013593505050565b60008060008060808587031215614592578182fd5b843561459d81615663565b966020860135965060408601359560600135945092505050565b600080604083850312156145c9578182fd5b82356145d481615663565b915060208301356140a681615663565b600080600080606085870312156145f9578182fd5b843561460481615663565b9350602085013561461481615663565b9250604085013567ffffffffffffffff81111561462f578283fd5b61463b87828801613f57565b95989497509550505050565b600080600080600080600060e0888a031215614661578081fd5b873561466c81615663565b9650602088013561467c81615663565b9550604088013561468c81615673565b9450606088013561469c8161563d565b6001600160a01b0390811694506080890135906146b882615663565b90935060a0890135906146ca82615663565b90925060c0890135906146dc8261563d565b8082169250505092959891949750929550565b600060208284031215614700578081fd5b5051919050565b600060208284031215614718578081fd5b813561242881615673565b60008060008060808587031215614738578182fd5b843560ff81168114614748578283fd5b935060208501356147588161563d565b6001600160a01b0390811693506040860135906147748261563d565b94979396509093169360600135925050565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b600081518084526147e6816020860160208601615611565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b90565b60007fffffffffffffffff0000000000000000000000000000000000000000000000008860c01b1682527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008760601b1660088301528486601c840137848201601c81018281528486823750909201601c019182525095945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b0386168252846020830152606060408301526148fa606083018486614786565b9695505050505050565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b60008582526060602083015261494a606083018587614786565b905082604083015295945050505050565b60006020825261242860208301846147ce565b60208082526026908201527f4c617965725a65726f3a20696e76616c6964206f7574626f756e642070726f6f60408201527f6620747970650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f4c617965725a65726f3a206f6e6c792074726561737572790000000000000000604082015260600190565b6020808252601e908201527f4c617965725a65726f3a20496e76616c696420636f6e66696720747970650000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a207769746864726177206661696c6564000000000000604082015260600190565b60208082526025908201527f4c617965725a65726f3a206e6f7420656e6f756768206e617469766520666f7260408201527f2066656573000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526031908201527f4c617965725a65726f3a205f6c617965725a65726f546f6b656e2063616e6e6f60408201527f74206265207a65726f2061646472657373000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a20696e76616c69642072656c6179657220616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f4c617965725a65726f3a206661696c656420746f20726566756e640000000000604082015260600190565b6020808252602b908201527f4c617965725a65726f3a206d75737420626520706169642062792073656e646560408201527f72206f72206f726967696e000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4c617965725a65726f3a20636861696e496420646f6573206e6f74206578697360408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4c617965725a65726f3a20696e76616c6964206f7261636c652061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f4c617965725a65726f3a20696e76616c69642064737420616464726573730000604082015260600190565b6020808252601a908201527f4c617965725a65726f3a20696e76616c69642072656c61796572000000000000604082015260600190565b60208082526029908201527f4c617965725a65726f3a206c6962726172792063616e6e6f74206265207a657260408201527f6f20616464726573730000000000000000000000000000000000000000000000606082015260800190565b60208082526043908201527f4c617965725a65726f3a206f7261636c6520646174612063616e206f6e6c792060408201527f75706461746520696620697420686173206d6f726520636f6e6669726d61746960608201527f6f6e730000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526017908201527f4c617965725a65726f3a6f6e6c79207472656173757279000000000000000000604082015260600190565b60208082526030908201527f4c617965725a65726f3a20696e76616c696420696e626f756e642070726f6f6660408201527f206c6962726172792076657273696f6e00000000000000000000000000000000606082015260800190565b6020808252602a908201527f4c617965725a65726f3a2074726561737572792063616e6e6f74206265207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f4c617965725a65726f3a2072656d6f746520756c6e20616c726561647920736560408201527f7400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f4c617965725a65726f3a2063616e206e6f7420616464206e6577206c6962726160408201527f7279000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f4c617965725a65726f3a206f6e6c7920656e64706f696e740000000000000000604082015260600190565b6020808252602e908201527f4c617965725a65726f3a20696e76616c6964206f7574626f756e6420626c6f6360408201527f6b20636f6e6669726d6174696f6e000000000000000000000000000000000000606082015260800190565b60208082526024908201527f4c617965725a65726f3a20756e737570706f727465642077697468647261772060408201527f7479706500000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4c617965725a65726f3a205f7061636b65742e756c6e4164647265737320697360408201527f20696e76616c6964000000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4c617965725a65726f3a2072656d6f746520636861696e20616464726573732060408201527f73697a6520616c72656164792073657400000000000000000000000000000000606082015260800190565b6020808252602d908201527f4c617965725a65726f3a20696e76616c696420696e626f756e6420626c6f636b60408201527f20636f6e6669726d6174696f6e00000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4c617965725a65726f3a206e6f7420656e6f75676820626c6f636b20636f6e6660408201527f69726d6174696f6e730000000000000000000000000000000000000000000000606082015260800190565b600060c08201905061ffff808451168352602084015167ffffffffffffffff8082166020860152604086015191506001600160a01b0380831660408701528360608801511660608701528160808801511660808701528060a08801511660a08701525050505092915050565b815181526020918201519181019190915260400190565b61ffff91909116815260200190565b61ffff9290921682526001600160a01b0316602082015260400190565b61ffff9490941684526001600160a01b039290921660208401526040830152606082015260800190565b61ffff929092168252602082015260400190565b600061ffff8416825260406020830152613bba60408301846147ce565b600061ffff8816825260c0602083015261535a60c08301886147ce565b6001600160a01b038716604084015267ffffffffffffffff8616606084015284608084015282810360a084015261539181856147ce565b9998505050505050505050565b61ffff92831681529116602082015260400190565b600061ffff80891683528088166020840152506001600160a01b038616604083015284606083015260a060808301526153f060a083018486614786565b98975050505050505050565b600061ffff80881683528087166020840152506001600160a01b038516604083015283606083015260a06080830152613d3060a08301846147ce565b600061ffff8087168352808616602084015250606060408301526148fa606083018486614786565b600061ffff80861683528085166020840152506060604083015261548760608301846147ce565b95945050505050565b61ffff938416815291909216602082015267ffffffffffffffff909116604082015260600190565b61ffff9788168152958716602087015267ffffffffffffffff9490941660408601526001600160a01b039283166060860152908516608085015290931660a083015290911660c082015260e00190565b61ffff968716815267ffffffffffffffff95861660208201526001600160a01b03948516604082015292909516606083015290921660808301529190911660a082015260c00190565b600061ffff808816835267ffffffffffffffff8716602084015280861660408401525060806060830152613d30608083018486614786565b918252602082015260400190565b67ffffffffffffffff91909116815260200190565b60ff91909116815260200190565b60ff9590951685526001600160a01b03938416602086015291831660408501529091166060830152608082015260a00190565b60405181810167ffffffffffffffff8111828210171561560957fe5b604052919050565b60005b8381101561562c578181015183820152602001615614565b83811115613a6f5750506000910152565b74ffffffffffffffffffffffffffffffffffffffffff8116811461566057600080fd5b50565b61ffff8116811461566057600080fd5b67ffffffffffffffff8116811461566057600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212207d21b80caaafb404a85f37203bf2affa26f549a98a557b0a0d19d029f0bd45eb64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2233,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8655,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "layerZeroToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1690"
      },
      {
        "astId": 8657,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "treasuryContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILayerZeroTreasury)17133"
      },
      {
        "astId": 8673,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "oracleQuotedFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8677,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "relayerQuotedFees",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8679,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "treasuryNativeFees",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8681,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "treasuryZROFees",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8687,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "appConfig",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_struct(ApplicationConfiguration)8653_storage))"
      },
      {
        "astId": 8691,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "defaultAppConfig",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint16,t_struct(ApplicationConfiguration)8653_storage)"
      },
      {
        "astId": 8697,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "defaultAdapterParams",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 8703,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "inboundProofLibrary",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_address))"
      },
      {
        "astId": 8707,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "maxInboundProofLibrary",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint16,t_uint16)"
      },
      {
        "astId": 8713,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "supportedOutboundProof",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_bool))"
      },
      {
        "astId": 8717,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "chainAddressSizeMap",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 8725,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "hashLookup",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_mapping(t_bytes32,t_struct(BlockData)8622_storage)))"
      },
      {
        "astId": 8729,
        "contract": "contracts/UltraLightNode.sol:UltraLightNode",
        "label": "ulnLookup",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint16,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1690": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroTreasury)17133": {
        "encoding": "inplace",
        "label": "contract ILayerZeroTreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_mapping(t_bytes32,t_struct(BlockData)8622_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => mapping(bytes32 => struct UltraLightNode.BlockData)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_mapping(t_bytes32,t_struct(BlockData)8622_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_struct(ApplicationConfiguration)8653_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => struct UltraLightNode.ApplicationConfiguration))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(ApplicationConfiguration)8653_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(BlockData)8622_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct UltraLightNode.BlockData)",
        "numberOfBytes": "32",
        "value": "t_struct(BlockData)8622_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes32,t_struct(BlockData)8622_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes32 => struct UltraLightNode.BlockData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(BlockData)8622_storage)"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_address))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_address)"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bool)"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_mapping(t_uint16,t_struct(ApplicationConfiguration)8653_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct UltraLightNode.ApplicationConfiguration)",
        "numberOfBytes": "32",
        "value": "t_struct(ApplicationConfiguration)8653_storage"
      },
      "t_mapping(t_uint16,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ApplicationConfiguration)8653_storage": {
        "encoding": "inplace",
        "label": "struct UltraLightNode.ApplicationConfiguration",
        "members": [
          {
            "astId": 8642,
            "contract": "contracts/UltraLightNode.sol:UltraLightNode",
            "label": "inboundProofLibraryVersion",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8644,
            "contract": "contracts/UltraLightNode.sol:UltraLightNode",
            "label": "inboundBlockConfirmations",
            "offset": 2,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8646,
            "contract": "contracts/UltraLightNode.sol:UltraLightNode",
            "label": "relayer",
            "offset": 10,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8648,
            "contract": "contracts/UltraLightNode.sol:UltraLightNode",
            "label": "outboundProofType",
            "offset": 30,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8650,
            "contract": "contracts/UltraLightNode.sol:UltraLightNode",
            "label": "outboundBlockConfirmations",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 8652,
            "contract": "contracts/UltraLightNode.sol:UltraLightNode",
            "label": "oracle",
            "offset": 8,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BlockData)8622_storage": {
        "encoding": "inplace",
        "label": "struct UltraLightNode.BlockData",
        "members": [
          {
            "astId": 8619,
            "contract": "contracts/UltraLightNode.sol:UltraLightNode",
            "label": "confirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8621,
            "contract": "contracts/UltraLightNode.sol:UltraLightNode",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}