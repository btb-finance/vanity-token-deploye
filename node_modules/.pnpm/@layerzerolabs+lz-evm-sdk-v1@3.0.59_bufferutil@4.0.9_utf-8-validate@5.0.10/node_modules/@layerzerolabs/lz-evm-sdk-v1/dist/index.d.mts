export { t as AltTokenUA, u as AltTokenUA__factory, A as ArbSys, q as ArbSys__factory, ag as CounterI, ah as CounterI__factory, ai as CounterPrecrime, ak as CounterPrecrimeView, al as CounterPrecrimeView__factory, aj as CounterPrecrime__factory, am as CounterV, an as CounterV__factory, ao as CounterView, ap as CounterView__factory, aT as DefaultProxyAdmin, aU as DefaultProxyAdmin__factory, E as Endpoint, g as EndpointLite, s as EndpointLite__factory, r as Endpoint__factory, aD as FPValidator, aE as FPValidator__factory, F as FeeHandler, v as FeeHandler__factory, be as GetARGsTypeFromFactory, bd as GetContractTypeFromFactory, I as IContractOne, w as IContractOne__factory, x as ILayerZeroEndpoint, y as ILayerZeroEndpoint__factory, z as ILayerZeroMessagingLibrary, C as ILayerZeroMessagingLibraryV2, D as ILayerZeroMessagingLibraryV2__factory, B as ILayerZeroMessagingLibrary__factory, G as ILayerZeroOracle, J as ILayerZeroOracleV2, K as ILayerZeroOracleV2__factory, H as ILayerZeroOracle__factory, L as ILayerZeroPriceFeed, O as ILayerZeroPriceFeedV2, Q as ILayerZeroPriceFeedV2__factory, M as ILayerZeroPriceFeed__factory, S as ILayerZeroReceiver, V as ILayerZeroReceiver__factory, W as ILayerZeroRelayer, Y as ILayerZeroRelayerV2, _ as ILayerZeroRelayerV2PriceData, $ as ILayerZeroRelayerV2PriceData__factory, Z as ILayerZeroRelayerV2__factory, X as ILayerZeroRelayer__factory, a0 as ILayerZeroTreasury, a1 as ILayerZeroTreasury__factory, a2 as ILayerZeroUltraLightNodeV1, a3 as ILayerZeroUltraLightNodeV1__factory, a4 as ILayerZeroUltraLightNodeV2, a5 as ILayerZeroUltraLightNodeV2__factory, a6 as ILayerZeroUserApplicationConfig, a7 as ILayerZeroUserApplicationConfig__factory, a8 as ILayerZeroValidationLibrary, a9 as ILayerZeroValidationLibrary__factory, aq as IPreCrime, as as IPreCrimeBase, at as IPreCrimeBase__factory, au as IPreCrimeView, av as IPreCrimeView__factory, ar as IPreCrime__factory, aY as IStargateComposer, aZ as IStargateComposer__factory, aN as IUltraLightNode, aO as IUltraLightNode__factory, aa as IValidationLibraryHelper, ac as IValidationLibraryHelperV2, ad as IValidationLibraryHelperV2__factory, ab as IValidationLibraryHelper__factory, aF as MPTValidator, aH as MPTValidator01, aI as MPTValidator01__factory, aJ as MPTValidatorStgV3, aK as MPTValidatorStgV3__factory, aL as MPTValidatorV2, aM as MPTValidatorV2__factory, aP as MPTValidatorV4, aQ as MPTValidatorV4__factory, aR as MPTValidatorV5, aS as MPTValidatorV5__factory, aG as MPTValidator__factory, bc as MinEthersFactory, N as NonceContract, h as NonceContractRadar, af as NonceContractRadar__factory, ae as NonceContract__factory, bb as OnEvent, aw as PreCrime, ay as PreCrimeBase, az as PreCrimeBase__factory, aA as PreCrimeView, aB as PreCrimeView__factory, ax as PreCrime__factory, P as PriceFeed, aC as PriceFeed__factory, bf as PromiseOrValue, R as Relayer, a_ as RelayerV2, j as RelayerV2Radar, b0 as RelayerV2Radar__factory, a$ as RelayerV2__factory, aX as Relayer__factory, aV as TransparentUpgradeableProxy, aW as TransparentUpgradeableProxy__factory, T as Treasury, k as TreasuryV2, l as TreasuryV2Radar, b3 as TreasuryV2Radar__factory, b2 as TreasuryV2__factory, b1 as Treasury__factory, b8 as TypedEvent, b9 as TypedEventFilter, ba as TypedListener, U as UltraLightNode, m as UltraLightNodeV2, n as UltraLightNodeV2AltToken, b6 as UltraLightNodeV2AltToken__factory, o as UltraLightNodeV2Radar, b7 as UltraLightNodeV2Radar__factory, b5 as UltraLightNodeV2__factory, b4 as UltraLightNode__factory, a as arbitrum, b as example, p as factories, c as interfaces, d as precrime, e as proof, f as proxy, i as relayerV2Sol } from './index-G8KojTCL.mjs';
import { Abi, LayerZeroParsedError } from '@layerzerolabs/evm-sdks-core';
import 'ethers';
import '@ethersproject/providers';
import '@ethersproject/abi';

var errors = [
];

var errorSelectors = {
	
};

declare function getDeployedContractAddress(network: string, contractName: string): string;
declare function checkError(data: string, abi?: Abi): void;
declare function parseError(data: string, abi?: Abi): LayerZeroParsedError | null;

export { checkError, errorSelectors, errors, getDeployedContractAddress, parseError };
