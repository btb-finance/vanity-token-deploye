import * as _layerzerolabs_devtools_evm_hardhat from '@layerzerolabs/devtools-evm-hardhat';
import { OmniGraphHardhat } from '@layerzerolabs/devtools-evm-hardhat';
import * as _layerzerolabs_lz_v2_utilities from '@layerzerolabs/lz-v2-utilities';
import { z } from 'zod';
import { OAppNodeConfig, OAppEdgeConfig, OAppReadNodeConfig, OwnableNodeConfig, ISingleViewFunctionCallerEVM, IComputerEVM, ICommandResolver, ITimeMarkerResolverChain, ITimeMarkerResolver, ITimeMarkerValidatorChain, ITimeMarkerValidator } from '@layerzerolabs/ua-devtools';
import { JsonRpcProvider } from '@ethersproject/providers';
import { EndpointBasedFactory, Factory, OmniGraph, IOmniSDK, Configurator, OmniSDKFactory, OmniAddress } from '@layerzerolabs/devtools';
import { ProviderFactory } from '@layerzerolabs/devtools-evm';
import { ZodType, ZodTypeDef } from 'zod/lib/types';
import { IEndpointV2, Uln302UlnConfig, Uln302ExecutorConfig, Timeout, UlnReadUlnConfig } from '@layerzerolabs/protocol-devtools';
import { EndpointId } from '@layerzerolabs/lz-definitions';

declare const TASK_LZ_ERRORS_DECODE = "lz:errors:decode";
declare const TASK_LZ_ERRORS_LIST = "lz:errors:list";
declare const TASK_LZ_OAPP_WIRE = "lz:oapp:wire";
declare const TASK_LZ_OAPP_CONFIG_GET_DEFAULT = "lz:oapp:config:get:default";
declare const TASK_LZ_OAPP_CONFIG_GET_EXECUTOR = "lz:oapp:config:get:executor";
declare const TASK_LZ_OAPP_CONFIG_GET = "lz:oapp:config:get";
declare const TASK_LZ_OAPP_PEERS_GET = "lz:oapp:peers:get";
declare const TASK_LZ_OAPP_ENFORCED_OPTS_GET = "lz:oapp:enforced-opts:get";
declare const TASK_LZ_OAPP_CONFIG_INIT = "lz:oapp:config:init";
declare const SUBTASK_LZ_OAPP_WIRE_CONFIGURE = "::lz:oapp:wire:configure";
declare const SUBTASK_LZ_OAPP_CONFIG_LOAD = "::lz:oapp:config:load";
declare const TASK_LZ_OWNABLE_TRANSFER_OWNERSHIP = "lz:ownable:transfer-ownership";
declare const TASK_LZ_READ_RESOLVE_COMMAND = "lz:read:resolve-command";
declare const TASK_LZ_OAPP_READ_WIRE = "lz:oapp-read:wire";
declare const TASK_LZ_OAPP_READ_CONFIG_GET = "lz:oapp-read:config:get";
declare const TASK_LZ_OAPP_READ_CONFIG_INIT = "lz:oapp-read:config:init";
declare const SUBTASK_LZ_OAPP_READ_WIRE_CONFIGURE = "::lz:oapp-read:wire:configure";
declare const TASK_LZ_OAPP_READ_CONFIG_GET_CHANNEL = "lz:oapp-read:config:get:channel";

/**
 * Validation schema for OApp configs in hardhat environment.
 *
 * Produces an `OAppOmniGraphHardhat` after successful parsing
 * the user input.
 */
declare const OAppOmniGraphHardhatSchema: z.ZodType<_layerzerolabs_devtools_evm_hardhat.OmniGraphHardhat<z.objectOutputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.ZodTypeAny, "passthrough"> | undefined, z.objectOutputType<{
    sendLibrary: z.ZodOptional<z.ZodString>;
    receiveLibraryConfig: z.ZodOptional<z.ZodObject<{
        gracePeriod: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
        receiveLibrary: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        receiveLibrary: string;
        gracePeriod: bigint;
    }, {
        receiveLibrary: string;
        gracePeriod?: unknown;
    }>>;
    receiveLibraryTimeoutConfig: z.ZodOptional<z.ZodObject<{
        lib: z.ZodString;
        expiry: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        lib: string;
        expiry: bigint;
    }, {
        lib: string;
        expiry?: unknown;
    }>>;
    sendConfig: z.ZodOptional<z.ZodObject<{
        executorConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodString;
            maxMessageSize: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            executor: string;
            maxMessageSize: number;
        }, {
            executor: string;
            maxMessageSize?: unknown;
        }>>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        executorConfig?: {
            executor: string;
            maxMessageSize: number;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        executorConfig?: {
            executor: string;
            maxMessageSize?: unknown;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    receiveConfig: z.ZodOptional<z.ZodObject<{
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_RECEIVE>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_RECEIVE;
        gas: number;
        value?: number | undefined;
    }, {
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_RECEIVE;
        msgType?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.NATIVE_DROP>;
        amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        receiver: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.NATIVE_DROP;
        amount: number;
        receiver: string;
    }, {
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.NATIVE_DROP;
        receiver: string;
        msgType?: unknown;
        amount?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED;
    }, {
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, z.ZodTypeAny, "passthrough"> | undefined>, z.ZodTypeDef, unknown>;

type OAppOmniGraphHardhat = OmniGraphHardhat<OAppNodeConfig | undefined, OAppEdgeConfig | undefined>;

/**
 * Validation schema for OAppRead configs in hardhat environment.
 *
 * Produces an `OAppReadOmniGraphHardhat` after successful parsing
 * the user input.
 */
declare const OAppReadOmniGraphHardhatSchema: z.ZodType<_layerzerolabs_devtools_evm_hardhat.OmniGraphHardhat<z.objectOutputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    delegate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    readChannelConfigs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        channelId: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        active: z.ZodOptional<z.ZodBoolean>;
        readLibrary: z.ZodOptional<z.ZodString>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodOptional<z.ZodString>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
        enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_READ>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            size: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        }, {
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE>;
            index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        }, {
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        }>, z.ZodObject<{
            msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
            optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED>;
        }, "strip", z.ZodTypeAny, {
            msgType: number;
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED;
        }, {
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED;
            msgType?: unknown;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        channelId: number;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
        enforcedOptions?: ({
            msgType: number;
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE;
            gas: number;
            index: number;
            value?: number | undefined;
        } | {
            msgType: number;
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED;
        } | {
            msgType: number;
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_READ;
            gas: number;
            size: number;
            value?: number | undefined;
        })[] | undefined;
    }, {
        channelId?: unknown;
        active?: boolean | undefined;
        readLibrary?: string | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            executor?: string | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
        enforcedOptions?: ({
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE;
            msgType?: unknown;
            index?: unknown;
            gas?: unknown;
            value?: unknown;
        } | {
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED;
            msgType?: unknown;
        } | {
            optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_READ;
            msgType?: unknown;
            gas?: unknown;
            size?: unknown;
            value?: unknown;
        })[] | undefined;
    }>, "many">>;
}, z.ZodTypeAny, "passthrough"> | undefined, z.objectOutputType<{
    sendLibrary: z.ZodOptional<z.ZodString>;
    receiveLibraryConfig: z.ZodOptional<z.ZodObject<{
        gracePeriod: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
        receiveLibrary: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        receiveLibrary: string;
        gracePeriod: bigint;
    }, {
        receiveLibrary: string;
        gracePeriod?: unknown;
    }>>;
    receiveLibraryTimeoutConfig: z.ZodOptional<z.ZodObject<{
        lib: z.ZodString;
        expiry: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        lib: string;
        expiry: bigint;
    }, {
        lib: string;
        expiry?: unknown;
    }>>;
    sendConfig: z.ZodOptional<z.ZodObject<{
        executorConfig: z.ZodOptional<z.ZodObject<{
            executor: z.ZodString;
            maxMessageSize: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            executor: string;
            maxMessageSize: number;
        }, {
            executor: string;
            maxMessageSize?: unknown;
        }>>;
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        executorConfig?: {
            executor: string;
            maxMessageSize: number;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        executorConfig?: {
            executor: string;
            maxMessageSize?: unknown;
        } | undefined;
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    receiveConfig: z.ZodOptional<z.ZodObject<{
        ulnConfig: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, bigint, unknown>, z.ZodBigInt>>;
            requiredDVNs: z.ZodArray<z.ZodString, "many">;
            optionalDVNs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            optionalDVNThreshold: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        }, {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: bigint | undefined;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: number | undefined;
        } | undefined;
    }, {
        ulnConfig?: {
            requiredDVNs: string[];
            confirmations?: unknown;
            optionalDVNs?: string[] | undefined;
            optionalDVNThreshold?: unknown;
        } | undefined;
    }>>;
    enforcedOptions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_RECEIVE>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_RECEIVE;
        gas: number;
        value?: number | undefined;
    }, {
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.LZ_RECEIVE;
        msgType?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.NATIVE_DROP>;
        amount: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        receiver: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.NATIVE_DROP;
        amount: number;
        receiver: string;
    }, {
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.NATIVE_DROP;
        receiver: string;
        msgType?: unknown;
        amount?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE>;
        index: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        gas: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        value: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE;
        gas: number;
        index: number;
        value?: number | undefined;
    }, {
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.COMPOSE;
        msgType?: unknown;
        index?: unknown;
        gas?: unknown;
        value?: unknown;
    }>, z.ZodObject<{
        msgType: z.ZodPipeline<z.ZodEffects<z.ZodUnknown, number, unknown>, z.ZodNumber>;
        optionType: z.ZodLiteral<_layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED>;
    }, "strip", z.ZodTypeAny, {
        msgType: number;
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED;
    }, {
        optionType: _layerzerolabs_lz_v2_utilities.ExecutorOptionType.ORDERED;
        msgType?: unknown;
    }>]>, "many">>;
}, z.ZodTypeAny, "passthrough"> | undefined>, z.ZodTypeDef, unknown>;

type OAppReadOmniGraphHardhat = OmniGraphHardhat<OAppReadNodeConfig | undefined, OAppEdgeConfig | undefined>;

/**
 * Validation schema for Ownable configs in hardhat environment.
 *
 * Produces an `OwnableOmniGraphHardhat` after successful parsing
 * of the user input.
 */
declare const OwnableOmniGraphHardhatSchema: z.ZodType<_layerzerolabs_devtools_evm_hardhat.OmniGraphHardhat<z.objectOutputType<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.ZodTypeAny, "passthrough">, unknown>, z.ZodTypeDef, unknown>;

type OwnableOmniGraphHardhat = OmniGraphHardhat<OwnableNodeConfig>;

declare const createSingleViewFunctionCallerEVMFactory: (providerFactory?: ProviderFactory<JsonRpcProvider>) => EndpointBasedFactory<ISingleViewFunctionCallerEVM>;
declare const createComputerEVMFactory: (providerFactory?: ProviderFactory<JsonRpcProvider>) => EndpointBasedFactory<IComputerEVM>;
declare const createCommandResolverFactory: (singleViewFunctionCallerEVMFactory?: EndpointBasedFactory<ISingleViewFunctionCallerEVM>, computerEVMFactory?: EndpointBasedFactory<IComputerEVM>) => Factory<[], ICommandResolver>;
declare const createTimeMarkerResolverChainFactory: (providerFactory?: ProviderFactory<JsonRpcProvider>) => EndpointBasedFactory<ITimeMarkerResolverChain>;
declare const createTimeMarkerResolverFactory: (timeMarkerResolverChainFactory?: EndpointBasedFactory<ITimeMarkerResolverChain>) => Factory<[], ITimeMarkerResolver>;
declare const createTimeMarkerValidatorChainFactory: (providerFactory?: ProviderFactory<JsonRpcProvider>) => EndpointBasedFactory<ITimeMarkerValidatorChain>;
declare const createTimeMarkerValidatorFactory: (timeMarkerValidatorChainFactory?: EndpointBasedFactory<ITimeMarkerValidatorChain>) => Factory<[], ITimeMarkerValidator>;

interface SubtaskConfigureTaskArgs<TOmniGraph extends OmniGraph = OmniGraph, TSDK = IOmniSDK> {
    graph: TOmniGraph;
    configurator?: Configurator<TOmniGraph, TSDK>;
    sdkFactory?: OmniSDKFactory<TSDK>;
}

interface SubtaskLoadConfigTaskArgs {
    configPath: string;
    schema: ZodType<OmniGraphHardhat, ZodTypeDef, unknown>;
    task: string;
}

declare function getSendConfig(endpointV2Sdk: IEndpointV2, eid: EndpointId, address?: OmniAddress, custom?: boolean): Promise<[OmniAddress, Uln302UlnConfig, Uln302ExecutorConfig] | undefined>;
declare function getReceiveConfig(endpointV2Sdk: IEndpointV2, eid: EndpointId, address?: OmniAddress, custom?: boolean): Promise<[OmniAddress, Uln302UlnConfig, Timeout] | undefined>;
declare function getReadConfig(endpointV2Sdk: IEndpointV2, channelIds?: number[], address?: OmniAddress, custom?: boolean): Promise<[OmniAddress, UlnReadUlnConfig, number][] | undefined>;

export { type OAppOmniGraphHardhat, OAppOmniGraphHardhatSchema, type OAppReadOmniGraphHardhat, OAppReadOmniGraphHardhatSchema, type OwnableOmniGraphHardhat, OwnableOmniGraphHardhatSchema, SUBTASK_LZ_OAPP_CONFIG_LOAD, SUBTASK_LZ_OAPP_READ_WIRE_CONFIGURE, SUBTASK_LZ_OAPP_WIRE_CONFIGURE, type SubtaskConfigureTaskArgs, type SubtaskLoadConfigTaskArgs, TASK_LZ_ERRORS_DECODE, TASK_LZ_ERRORS_LIST, TASK_LZ_OAPP_CONFIG_GET, TASK_LZ_OAPP_CONFIG_GET_DEFAULT, TASK_LZ_OAPP_CONFIG_GET_EXECUTOR, TASK_LZ_OAPP_CONFIG_INIT, TASK_LZ_OAPP_ENFORCED_OPTS_GET, TASK_LZ_OAPP_PEERS_GET, TASK_LZ_OAPP_READ_CONFIG_GET, TASK_LZ_OAPP_READ_CONFIG_GET_CHANNEL, TASK_LZ_OAPP_READ_CONFIG_INIT, TASK_LZ_OAPP_READ_WIRE, TASK_LZ_OAPP_WIRE, TASK_LZ_OWNABLE_TRANSFER_OWNERSHIP, TASK_LZ_READ_RESOLVE_COMMAND, createCommandResolverFactory, createComputerEVMFactory, createSingleViewFunctionCallerEVMFactory, createTimeMarkerResolverChainFactory, createTimeMarkerResolverFactory, createTimeMarkerValidatorChainFactory, createTimeMarkerValidatorFactory, getReadConfig, getReceiveConfig, getSendConfig };
