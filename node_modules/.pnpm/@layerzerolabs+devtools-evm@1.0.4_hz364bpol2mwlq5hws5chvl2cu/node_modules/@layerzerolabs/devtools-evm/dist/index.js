'use strict';

var address = require('@ethersproject/address');
var constants = require('@ethersproject/constants');
var ioDevtools = require('@layerzerolabs/io-devtools');
var abi = require('@ethersproject/abi');
var zod = require('zod');
var bignumber = require('@ethersproject/bignumber/lib/bignumber');
var devtools = require('@layerzerolabs/devtools');
var pMemoize = require('p-memoize');
var providers = require('@ethersproject/providers');
var Safe = require('@safe-global/protocol-kit');
var SafeApiKit = require('@safe-global/api-kit');
var assert = require('assert');
var ethers = require('ethers');
var _function = require('fp-ts/lib/function');
var A = require('fp-ts/Array');
var O = require('fp-ts/Option');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var pMemoize__default = /*#__PURE__*/_interopDefault(pMemoize);
var Safe__default = /*#__PURE__*/_interopDefault(Safe);
var SafeApiKit__default = /*#__PURE__*/_interopDefault(SafeApiKit);
var assert__default = /*#__PURE__*/_interopDefault(assert);
var A__namespace = /*#__PURE__*/_interopNamespace(A);
var O__namespace = /*#__PURE__*/_interopNamespace(O);

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js
var require_CompatibilityFallbackHandlerContract = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js
var require_CreateCallContract = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js
var require_MultiSendCallOnlyContract = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js
var require_MultiSendContract = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SafeContract.js
var require_SafeContract = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SafeContract.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SafeProxyFactoryContract.js
var require_SafeProxyFactoryContract = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SafeProxyFactoryContract.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js
var require_SignMessageLibContract = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SimulateTxAccessorContract.js
var require_SimulateTxAccessorContract = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SimulateTxAccessorContract.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js
var require_EthAdapter = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/types.js
var require_types = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/types.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OperationType = void 0;
    (function(OperationType3) {
      OperationType3[OperationType3["Call"] = 0] = "Call";
      OperationType3[OperationType3["DelegateCall"] = 1] = "DelegateCall";
    })(exports.OperationType || (exports.OperationType = {}));
  }
});

// ../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js
var require_src = __commonJS({
  "../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_CompatibilityFallbackHandlerContract(), exports);
    __exportStar(require_CreateCallContract(), exports);
    __exportStar(require_MultiSendCallOnlyContract(), exports);
    __exportStar(require_MultiSendContract(), exports);
    __exportStar(require_SafeContract(), exports);
    __exportStar(require_SafeProxyFactoryContract(), exports);
    __exportStar(require_SignMessageLibContract(), exports);
    __exportStar(require_SimulateTxAccessorContract(), exports);
    __exportStar(require_EthAdapter(), exports);
    __exportStar(require_types(), exports);
  }
});
var makeZeroAddress = (address) => address != null ? address : constants.AddressZero;
var addChecksum = (address$1) => address.getAddress(address$1);
var isEVMAddress = address.isAddress;
var ContractError = class extends Error {
};
var UnknownError = class extends ContractError {
  constructor(message = "Unknown contract error") {
    super(message);
    __publicField(this, "reason");
    this.name = "UnknownError";
  }
};
var PanicError = class extends ContractError {
  constructor(reason, message = `Contract panicked (assert() has been called)`) {
    super(message);
    this.reason = reason;
    this.name = "PanicError";
  }
  toString() {
    return `${super.toString()}. Error code ${this.reason}`;
  }
};
var RevertError = class extends ContractError {
  constructor(reason, message = `Contract reverted`) {
    super(message);
    this.reason = reason;
    this.name = "RevertError";
  }
  toString() {
    return `${super.toString()}. Error reason '${this.reason}'`;
  }
};
var CustomError = class extends ContractError {
  constructor(reason, args, message = `Contract reverted with custom error`) {
    super(message);
    this.reason = reason;
    this.args = args;
    this.name = "CustomError";
  }
  toString() {
    const formattedArgs = this.args.map((arg) => ioDevtools.printJson(arg, false));
    return `${super.toString()}. Error ${this.reason}(${formattedArgs})`;
  }
};
var BigNumberishSchema = zod.z.custom((value) => bignumber.isBigNumberish(value));
var BigNumberishBigIntSchema = BigNumberishSchema.transform(bignumber.BigNumber.from).transform((bn) => bn.toBigInt());
var BigNumberishNumberSchema = BigNumberishSchema.transform(bignumber.BigNumber.from).transform((bn) => bn.toNumber());

// src/errors/parser.ts
var createContractErrorParser = (contract) => (error) => {
  var _a, _b;
  return (
    // First we'll try to decode a contract error if we have a contract
    (_b = (_a = contract ? parseContractError(error, contract.contract) : null) != null ? _a : (
      // Then we'll try decoding a generic one
      parseGenericError(error)
    )) != null ? _b : (
      // The we throw a generic one
      new UnknownError(`Unknown error: ${toStringSafe(error)}`)
    )
  );
};
var parseContractError = (error, contract) => {
  if (error instanceof ContractError) {
    return error;
  }
  try {
    const candidates = getErrorDataCandidates(error);
    const contractDecoder = createContractDecoder(contract);
    return candidates.flatMap(contractDecoder).at(0);
  } catch (e) {
    return void 0;
  }
};
var parseGenericError = (error) => {
  if (error instanceof ContractError) {
    return error;
  }
  try {
    const candidates = getErrorDataCandidates(error);
    return candidates.flatMap(basicDecoder).at(0);
  } catch (e) {
    return void 0;
  }
};
var REVERT_ERROR_PREFIX = "0x08c379a0";
var PANIC_ERROR_PREFIX = "0x4e487b71";
var basicDecoder = (data) => {
  if (data === "" || data === "0x") {
    return [new UnknownError(`Reverted with empty data`)];
  }
  if (data.startsWith(PANIC_ERROR_PREFIX)) {
    const reason = data.slice(PANIC_ERROR_PREFIX.length);
    if (reason === "") {
      return [new PanicError(BigInt(0))];
    }
    try {
      const [decodedRawReason] = abi.defaultAbiCoder.decode(["uint256"], `0x${reason}`);
      const decodedReason = BigNumberishBigIntSchema.parse(decodedRawReason);
      return [new PanicError(decodedReason)];
    } catch (e) {
      return [new PanicError(BigInt(0), `Reason unknown, ABI decoding failed. The raw reason was '0x${reason}'`)];
    }
  }
  if (data.startsWith(REVERT_ERROR_PREFIX)) {
    const reason = data.slice(REVERT_ERROR_PREFIX.length);
    try {
      const [decodedReason] = abi.defaultAbiCoder.decode(["string"], `0x${reason}`);
      return [new RevertError(decodedReason)];
    } catch (e) {
      return [new RevertError(`Reason unknown, ABI decoding failed. The raw reason was '0x${reason}'`)];
    }
  }
  return [];
};
var createContractDecoder = (contract) => (data) => {
  try {
    const errorDescription = contract.interface.parseError(data);
    return [new CustomError(errorDescription.name, [...errorDescription.args])];
  } catch (e) {
    return [];
  }
};
var getErrorDataCandidates = (error) => {
  var _a, _b, _c;
  return [
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (_b = (_a = error == null ? void 0 : error.error) == null ? void 0 : _a.data) == null ? void 0 : _b.data,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (_c = error == null ? void 0 : error.error) == null ? void 0 : _c.data,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error == null ? void 0 : error.data
  ].filter((candidate) => typeof candidate === "string");
};
var toStringSafe = (obj) => {
  try {
    return String(obj);
  } catch (e) {
    return "[unknown]";
  }
};

// src/events/parser.ts
var parseLogs = (receipt, contract) => {
  var _a, _b;
  return (_b = (_a = receipt.logs) == null ? void 0 : _a.flatMap((log) => {
    if (log.address !== contract.address) {
      return [];
    }
    try {
      return [contract.interface.parseLog(log)];
    } catch (e) {
      return [];
    }
  })) != null ? _b : [];
};
var parseLogsWithName = (receipt, contract, name) => parseLogs(receipt, contract).filter((log) => log.eventFragment.name === name);

// src/omnigraph/coordinates.ts
var omniContractToPoint = ({ eid, contract }) => ({
  eid,
  address: contract.address
});
var connectOmniContract = ({ eid, contract }, provider) => ({
  eid,
  contract: contract.connect(provider)
});
var formatOmniContract = (contract) => `EVM contract at ${devtools.formatOmniPoint(omniContractToPoint(contract))}`;
var OmniSDK = class {
  constructor(contract, logger = ioDevtools.createModuleLogger(
    `EVM SDK ${new.target.name} @ ${formatOmniContract(contract)}`
  )) {
    this.contract = contract;
    this.logger = logger;
  }
  /**
   * Registers a `OmniContractErrorParserFactory` function to be used when
   * an SDK needs to get an instance of `OmniContractErrorParser`.
   *
   * This enables us to use environment-specific error parsers
   * while maintaining separation of concerns. For example, `hardhat`-specific
   * environments can create error parsers based on all available errors from the build artifacts.
   *
   * @param {OmniContractErrorParserFactory | undefined} factory
   * @returns {void}
   */
  static registerErrorParserFactory(factory) {
    this.errorParserFactory = factory != null ? factory : createContractErrorParser;
  }
  /**
   * Creates an instance of `OmniContractErrorParser` based on the registered
   * `OmniContractErrorParserFactory`
   *
   * @param {OmniContract | null | undefined} contract
   * @returns {OmniContractErrorParser}
   */
  static createErrorParser(contract) {
    return this.errorParserFactory(contract);
  }
  /**
   * Human radable label for this SDK
   */
  get label() {
    return formatOmniContract(this.contract);
  }
  get point() {
    return omniContractToPoint(this.contract);
  }
  createTransaction(data) {
    return {
      point: this.point,
      data
    };
  }
  async parseError(error) {
    const parser = await this.constructor.createErrorParser(this.contract);
    return parser(error);
  }
};
__publicField(OmniSDK, "errorParserFactory", createContractErrorParser);
var createProviderFactory = (urlFactory) => pMemoize__default.default(async (eid) => new providers.JsonRpcProvider(await urlFactory(eid)));

// src/signer/sdk.ts
var import_safe_core_sdk_types = __toESM(require_src());
var OmniSignerEVMBase = class extends devtools.OmniSignerBase {
  constructor(eid, signer) {
    super(eid);
    this.signer = signer;
  }
  async getPoint() {
    return { eid: this.eid, address: await this.signer.getAddress() };
  }
};
var _serializeTransaction, serializeTransaction_fn;
var OmniSignerEVM = class extends OmniSignerEVMBase {
  constructor(eid, signer) {
    super(eid, signer);
    __privateAdd(this, _serializeTransaction);
  }
  async sign(transaction) {
    this.assertTransaction(transaction);
    return this.signer.signTransaction(__privateMethod(this, _serializeTransaction, serializeTransaction_fn).call(this, transaction));
  }
  async signAndSend(transaction) {
    this.assertTransaction(transaction);
    const nativeTransaction = __privateMethod(this, _serializeTransaction, serializeTransaction_fn).call(this, transaction);
    const { hash, ...response } = await this.signer.sendTransaction(nativeTransaction);
    return {
      ...response,
      transactionHash: hash
    };
  }
};
_serializeTransaction = new WeakSet();
serializeTransaction_fn = function(transaction) {
  return {
    // mandatory
    to: transaction.point.address,
    data: transaction.data,
    // optional
    ...transaction.gasLimit != null && { gasLimit: transaction.gasLimit },
    ...transaction.value != null && { value: transaction.value }
  };
};
var _proposeSafeTransaction, proposeSafeTransaction_fn, _createSafeTransaction, createSafeTransaction_fn, _serializeTransaction2, serializeTransaction_fn2;
var GnosisOmniSignerEVM = class extends OmniSignerEVMBase {
  constructor(eid, signer, safeUrl, safeConfig, ethAdapter = new Safe.EthersAdapter({
    ethers: ethers.ethers,
    signerOrProvider: signer
  }), apiKit = new SafeApiKit__default.default({ txServiceUrl: safeUrl, ethAdapter }), safeSdkPromise = Safe__default.default.create({
    ethAdapter,
    safeAddress: safeConfig.safeAddress,
    contractNetworks: safeConfig.contractNetworks
  })) {
    super(eid, signer);
    this.safeUrl = safeUrl;
    this.safeConfig = safeConfig;
    this.ethAdapter = ethAdapter;
    this.apiKit = apiKit;
    this.safeSdkPromise = safeSdkPromise;
    __privateAdd(this, _proposeSafeTransaction);
    __privateAdd(this, _createSafeTransaction);
    __privateAdd(this, _serializeTransaction2);
  }
  async sign(_) {
    throw new Error(`Signing transactions with safe is currently not supported, use signAndSend instead`);
  }
  async signAndSend(transaction) {
    return this.signAndSendBatch([transaction]);
  }
  async signAndSendBatch(transactions) {
    assert__default.default(transactions.length > 0, `signAndSendBatch received 0 transactions`);
    const safeTransaction = await __privateMethod(this, _createSafeTransaction, createSafeTransaction_fn).call(this, transactions);
    return __privateMethod(this, _proposeSafeTransaction, proposeSafeTransaction_fn).call(this, safeTransaction);
  }
};
_proposeSafeTransaction = new WeakSet();
proposeSafeTransaction_fn = async function(safeTransaction) {
  const safeSdk = await this.safeSdkPromise;
  const safeAddress = await safeSdk.getAddress();
  const safeTxHash = await safeSdk.getTransactionHash(safeTransaction);
  const senderSignature = await safeSdk.signTransactionHash(safeTxHash);
  const senderAddress = await this.signer.getAddress();
  await this.apiKit.proposeTransaction({
    senderSignature: senderSignature.data,
    safeAddress,
    safeTransactionData: safeTransaction.data,
    safeTxHash,
    senderAddress
  });
  return {
    transactionHash: safeTxHash,
    wait: async (_confirmations) => {
      return {
        transactionHash: safeTxHash
      };
    }
  };
};
_createSafeTransaction = new WeakSet();
createSafeTransaction_fn = async function(transactions) {
  transactions.forEach((transaction) => this.assertTransaction(transaction));
  const safeSdk = await this.safeSdkPromise;
  const safeAddress = await safeSdk.getAddress();
  const nonce = await this.apiKit.getNextNonce(safeAddress);
  return safeSdk.createTransaction({
    safeTransactionData: transactions.map((transaction) => __privateMethod(this, _serializeTransaction2, serializeTransaction_fn2).call(this, transaction)),
    options: { nonce }
  });
};
_serializeTransaction2 = new WeakSet();
serializeTransaction_fn2 = function(transaction) {
  var _a;
  return {
    to: transaction.point.address,
    data: transaction.data,
    value: String((_a = transaction.value) != null ? _a : 0),
    operation: import_safe_core_sdk_types.OperationType.Call
  };
};
var createAnvilCliOptions = ({
  host,
  port,
  mnemonic,
  forkUrl,
  forkBlockNumber,
  retries,
  timeout,
  blockTime,
  count,
  derivationPath,
  state,
  stateInterval,
  pruneHistory
}) => _function.pipe(
  [
    _function.pipe(
      O__namespace.fromNullable(host),
      O__namespace.map((host2) => ["--host", host2])
    ),
    _function.pipe(
      O__namespace.fromNullable(port),
      O__namespace.map((port2) => ["--port", String(port2)])
    ),
    _function.pipe(
      O__namespace.fromNullable(mnemonic),
      O__namespace.map((mnemonic2) => ["--mnemonic", mnemonic2])
    ),
    _function.pipe(
      O__namespace.fromNullable(count),
      O__namespace.map((count2) => ["--count", String(count2)])
    ),
    _function.pipe(
      O__namespace.fromNullable(derivationPath),
      O__namespace.map((derivationPath2) => ["--derivation-path", derivationPath2])
    ),
    _function.pipe(
      O__namespace.fromNullable(forkUrl),
      O__namespace.map((forkUrl2) => ["--fork-url", forkUrl2])
    ),
    _function.pipe(
      O__namespace.fromNullable(forkBlockNumber),
      O__namespace.map((forkBlockNumber2) => ["--fork-block-number", String(forkBlockNumber2)])
    ),
    _function.pipe(
      O__namespace.fromNullable(retries),
      O__namespace.map((retries2) => ["--retries", String(retries2)])
    ),
    _function.pipe(
      O__namespace.fromNullable(timeout),
      O__namespace.map((timeout2) => ["--timeout", String(timeout2)])
    ),
    _function.pipe(
      O__namespace.fromNullable(blockTime),
      O__namespace.map((blockTime2) => ["--block-time", String(blockTime2)])
    ),
    _function.pipe(
      O__namespace.fromNullable(state),
      O__namespace.map((state2) => ["--state", state2])
    ),
    _function.pipe(
      O__namespace.fromNullable(stateInterval),
      O__namespace.map((stateInterval2) => ["--state-interval", String(stateInterval2)])
    ),
    _function.pipe(
      O__namespace.fromNullable(pruneHistory),
      O__namespace.filter(_function.identity),
      O__namespace.map(() => ["--prune-history"])
    )
  ],
  A__namespace.compact,
  A__namespace.flatten
);

exports.BigNumberishBigIntSchema = BigNumberishBigIntSchema;
exports.BigNumberishNumberSchema = BigNumberishNumberSchema;
exports.BigNumberishSchema = BigNumberishSchema;
exports.ContractError = ContractError;
exports.CustomError = CustomError;
exports.GnosisOmniSignerEVM = GnosisOmniSignerEVM;
exports.OmniSDK = OmniSDK;
exports.OmniSignerEVM = OmniSignerEVM;
exports.OmniSignerEVMBase = OmniSignerEVMBase;
exports.PanicError = PanicError;
exports.RevertError = RevertError;
exports.UnknownError = UnknownError;
exports.addChecksum = addChecksum;
exports.connectOmniContract = connectOmniContract;
exports.createAnvilCliOptions = createAnvilCliOptions;
exports.createContractErrorParser = createContractErrorParser;
exports.createProviderFactory = createProviderFactory;
exports.formatOmniContract = formatOmniContract;
exports.isEVMAddress = isEVMAddress;
exports.makeZeroAddress = makeZeroAddress;
exports.omniContractToPoint = omniContractToPoint;
exports.parseContractError = parseContractError;
exports.parseGenericError = parseGenericError;
exports.parseLogs = parseLogs;
exports.parseLogsWithName = parseLogsWithName;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map