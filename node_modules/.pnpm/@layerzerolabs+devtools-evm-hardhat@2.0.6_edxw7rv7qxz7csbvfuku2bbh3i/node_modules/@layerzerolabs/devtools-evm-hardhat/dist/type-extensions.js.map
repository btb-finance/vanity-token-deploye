{"version":3,"sources":["../src/type-extensions.ts"],"names":[],"mappings":";AAAA,OAAO","sourcesContent":["import 'hardhat/types/config'\nimport { EndpointId } from '@layerzerolabs/lz-definitions'\nimport { ConnectSafeConfigWithSafeAddress } from '@safe-global/protocol-kit'\nimport { SimulationUserConfig } from '@/simulation/types'\n\n/**\n * Packages containing external artifacts can be specified either\n *\n * - By just their package name, in which case the artifacts will be loaded from the `./artifacts` path\n * - By their package name and a specific path to the artifacts directory\n * - By a filesystem path\n */\nexport type ArtifactPackage = ArtifactPackageName | ArtifactPackageWithPath | ArtifactPackagePath\n\nexport type ArtifactPackageName = string\n\nexport interface ArtifactPackageWithPath {\n    name: ArtifactPackageName\n    path?: string\n}\n\nexport interface ArtifactPackagePath {\n    name?: never\n    path: string\n}\n\ndeclare module 'hardhat/types/config' {\n    interface HardhatNetworkUserConfig {\n        eid?: never\n        safeConfig?: never\n    }\n\n    interface HardhatNetworkConfig {\n        eid?: never\n        safeConfig?: never\n    }\n\n    interface HttpNetworkUserConfig {\n        /**\n         * Specifies the mapping between the network\n         * defined in your hardhat config and the LayerZero endpoint ID\n         * on this network.\n         *\n         * This allows you to use arbitrary network names while maintaining\n         * allowing you to easily find deployment and artifact information\n         * for LayerZero protocol contracts using the standard hardhat deploy methods\n         */\n        eid?: EndpointId\n\n        /**\n         * Use a \"local\" LayerZero environment for the network.\n         *\n         * Local environments are postfixed with `-local` in the deployment directories\n         * and represent contracts deployed to ephemerous development networks.\n         *\n         * Local environments cannot coexists with their non-local counterparts\n         * in hardhat configs since they share the same `eid`\n         */\n        isLocalEid?: boolean\n\n        /**\n         * Optional gnosis safe config.\n         */\n        safeConfig?: SafeConfig\n    }\n\n    interface HttpNetworkConfig {\n        /**\n         * Specifies the mapping between the network\n         * defined in your hardhat config and the LayerZero endpoint ID\n         * on this network.\n         *\n         * This allows you to use arbitrary network names while maintaining\n         * allowing you to easily find deployment and artifact information\n         * for LayerZero protocol contracts using the standard hardhat deploy methods\n         */\n        eid?: EndpointId\n\n        /**\n         * Use a \"local\" LayerZero environment for the network.\n         *\n         * Local environments are postfixed with `-local` in the deployment directories\n         * and represent contracts deployed to ephemerous development networks\n         *\n         * Local environments cannot coexists with their non-local counterparts\n         * in hardhat configs since they share the same `eid`\n         */\n        isLocalEid?: boolean\n\n        /**\n         * Optional gnosis safe config.\n         */\n        safeConfig?: SafeConfig\n    }\n    interface SafeConfig extends ConnectSafeConfigWithSafeAddress {\n        safeUrl: string // Note:  This is the URL of the Safe API, not the safe itself\n        safeAddress: string // override to make ConnectSafeConfig.safeAddress mandatory\n    }\n\n    interface HardhatUserConfig {\n        /**\n         * LayerZero advanced configuration\n         */\n        layerZero?: LayerZeroHardhatUserConfig\n    }\n\n    interface LayerZeroHardhatUserConfig {\n        /**\n         * Defines the names of @layerzerolabs packages\n         * that will be added to your hardhat config under external deployments.\n         *\n         * By default, the protocol deployments from `@layerzerolabs/lz-evm-sdk-v2`\n         * will be added which allows your scripts to reference deployments\n         * of protocol contracts such as `EndpointV2`:\n         *\n         * ```\n         * // In your deploy script or task\n         * const { address, abi } = hre.deployments.get('EndpointV2')\n         * ```\n         *\n         * @default ['@layerzerolabs/lz-evm-sdk-v2']\n         */\n        deploymentSourcePackages?: string[]\n\n        /**\n         * Defines the names of @layerzerolabs packages\n         * that will be added to your hardhat config under external artifacts.\n         *\n         * By default, the protocol artifacts from `@layerzerolabs/lz-evm-sdk-v2`\n         * will be added which allows your scripts to reference artifacts\n         * of protocol contracts such as `EndpointV2`:\n         *\n         * ```\n         * // In your deploy script or task\n         * const { address, abi } = hre.deployments.get('EndpointV2')\n         * ```\n         *\n         * For testing purposes, artifacts from `@layerzerolabs/test-devtools-evm-hardhat`\n         * will also be added. This allows your tests to reference contracts such as `EndpointV2Mock`:\n         *\n         * ```\n         * // In your hardhat test\n         * const EndpointV2MockArtifact = await hre.deployments.getArtifact('EndpointV2Mock')\n         * ```\n         *\n         * @default ['@layerzerolabs/lz-evm-sdk-v2','@layerzerolabs/test-devtools-evm-hardhat']\n         */\n        artifactSourcePackages?: ArtifactPackage[]\n\n        /**\n         * Configuration of features that are not considered stable yet\n         */\n        experimental?: {\n            /**\n             * Configuration for omnichain simulation\n             *\n             * Omnichain simulation allows developers to easily setup\n             * local environment forked from live networks without\n             * having to adjust the `hardhat.config.ts` file\n             */\n            simulation?: SimulationUserConfig\n        }\n    }\n}\n"]}